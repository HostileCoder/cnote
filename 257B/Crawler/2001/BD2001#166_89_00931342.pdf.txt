A Novel Approach to Fault Tolerant Computing 
A. Kellner, H.-J. Kolinowitz, G. Urban 
Astrium GmbH Space Infrastructure Division 
Hiinefeldstrasse 1-5 
28199 Bremen, Germany 
Hans-Joachim.Kolinowitz@astrium-space.com 
0049-421-539-4283 
Abstract-The realization of fault tolerant computers 
requires a considerable effort, both for their development 
and validation. In addition, the redundancy required to 
achieve the fault tolerance increases power consumption, 
mass and volume of the computers. 
In order to mitigate these problems, a standardized Fault 
Management Element (FME) has been developed, in which 
the complete set of fault management functions necessary to 
realize fault tolerant computers are provided ,,once and for 
all" in standardized and fully validated form. 
The fault management technology of this FME is based on 
the "Byzantine" fault tolerant computer developed under 
contract of the European Space Agency for the Russian 
Service Module of the International Space Station, and for 
the logistics vehicle ATV servicing the station [l, 2,9]. 
Using this FME, fault tolerant computers need not be 
developed in the usual sense, but are basically realized by a 
configuration process, which, in simplified terms, comprises 
an integration of an FME with each of the foreseen 
redundant application processor boards, and their cross- 
strapping via the preconceived high-speed data links of the 
FMEs. 
By this novel approach the considerable development and 
validation effort to realize fault tolerant computers is 
practically eliminated. 
Moreover, the FME, which is currently available as printed 
circuit board, will be available as ASIC in the near future, 
such that the above mentioned power, mass and volume 
problems are also greatly reduced. 
Keywords: Fault Tolerant Computer, Fault Management 
Element, System-on-a-Chip Design, Formal Verification 
TABLE OF CONTENT 
1. INTR~DUCTION 
2. DEVELOPMENT OF FAULT TOLERANT COMPUTER BY 
CONFIGUFWTION 
3. TECHNOLOGICAL BASIS 
4. THE FME DESIGN 
6. CONCLUSION 
5. FME FUNCTIONS AND PERFORMANCE 
1. INTRODUCTION 
There is a growing demand for fault tolerance in space 
systems, for instance to increase the reliability and 
availability of space vehicles or to enhance the safety of 
manned space missions. 
Moreover, for cost reasons and due to the reduced 
availability of qualified electronics parts, there is an 
increased tendency to substitute fault avoidance by. fault 
tolerance, using commercial or =-standard parts. 
Fault tolerance is typically achieved by an adequate, 
redundant system design and fault tolerant avionics, with a 
fault tolerant computer as central equipment. 
Fault tolerant computers [3, 41 are realized by a 'pool' of 
several redundant computers or controllers which mutually 
supervise each other. Special fault management functions 
ensure that all computers of the pool are provided with 
exactly identical input data, synchronously run identical 
processes, mutually exchange the output data and compare 
them by a voting process before delivering the result to the 
system. 
In case of an erroneous output generated by one of the 
computers of the pool, this majority voting process 
0-7803-6599-2/01~$10.00  2001 IEEE 
3-1 127 
suppresses or ,,masks" the error, in this way providing for a 
fail-operational behavior of the pool. 
Subsequently, the fault management functions must provide 
- again by a majority vote - for the correct localization of the 
fault and the isolation of the faulty computer, such that a 
reduced, but guaranteed ,,healthy" pool of computers is 
again available for the management of possibk: further 
faults, if this is required. 
Moreover, to increase the availability of the system in many 
cases it is required that computers once isolated may be 
reintegrated during runtime (in case their isolation was only 
due to temporary or spurious faults) 
The development, and particularly also the valid:ation, of 
these fault management functions generally requires a 
considerable effort [5 ,6 ,  7,8]. 
Astrium has developed a Fault Management Element (Fh4E) 
which allows this effort to be practically eliminated. 
2. DEVELOPMENT OF FAULT OLERANT 
COMPUTERS BY CONFIGURATION 
The FME is a module currently available as printed circuit 
board and in the near future as application specific 
integrated circuit(ASIC), in which the above m.entioned 
fault management functions are implemented and validated 
Using this FME, fault tolerant computers need. not be 
developed in the usual sense anymore, but are basically 
realized by a configuration process, which, in simplified 
terms, comprises the following steps: 
0 
0 
firstly, an FME has to be integrated into each of the 
redundant computers or controllers of the pool 
subsequently these computers have to be 1inke.d to each 
other via the preconceived high-speed data interfaces of 
the FMEs 
The integration of the FME into the pool computers is 
realized lby a particularly simple interface to the application. 
The interface consists of a dual ported memory in hardware 
and a deterministic data exchange between FME and 
application SW. This data exchange is subdivided into time 
slots witlh fixed length and synchronized by a fault tolerant 
clock. The latter also synchronizes the application SW by an 
interrupt which correspond to the clock. frequency. 
The design of the pool computers or controller cards is left 
unchanged. 
Figure 1 shows this principle for a quadruplex computer 
pool. Interfaces to the system have been suppressed for 
clarity's sake in this figure; the data links shown represent 
the cross-strapping between the FME's. 
Interfaces to the system can be provided, e.g. by the 
processor board running the application. However, also the 
FME's cim be adapted to provide this interface, which is the 
case, e.g. for the fault tolerant computer of the ISS and the 
servicing vehicle ATV mentioned below. 
3. TECHNOLOGICAL BASIS 
The FMI;, is a commercial follow-on d.evelopment of a fault 
tolerant computer which Astrium-SI has developed under a 
contract for the European Space Agency. 
This computer is the flight computer a t  the Russian Service 
Module of the International Space Station (ISS) responsible 
for the attitude control of ISS. It is in operation in orbit since 
July 2000. 
Moreover, it is used as flight computer for the logistics 
vehicle ATV (Automated Transfer Vehicle) servicing the 
ISS, which automatically has to pwform safety critical 
rendezvous and docking maneuvers with the station. 
Some of' the major features of this fault tolerant computer 
comprise: 
0 a strict separation of all fault management functions 
from the application S / W :  the latter can be developed 
without bothering with fault management aspects 
an extremely thorough testing mid validation, both by 
fornaal and million-fold automatic tests as well as by 
years of field-testing by users, 
a scalability to simplex- duplex-, triplex- and 
qualdruplex-codigurations with self-adapting voting 
algorithms, 
the capability to reintegrate once-isolated computers 
during runtime 
0 
3-1128 
the capability to perform voting on bit-wise identical 
data as well as on approximately identical data (e.g. in 
the case of redundant analog sensors) 
and in particular the world-wide first-of-its-kind 
operational implementation of the so-called 
,,Byzantine" fault management technique 
The Byzantine technique allows, by contrast to all other 
types of fault tolerant computers, the detection and 
localization of faults also in the communication between the 
pool computers, by which the data is exchanged for the 
voting process. 
Apart from the correct fault masking, this technique 
guarantees in particular the correct localization and isolation 
of faulty units, such that, e.g., after a fault in a quadruplex- 
configuration and reset of the assumed faulty unit it can be 
guaranteed that the resulting triplex-configuration is again a 
healthy one, ready to mask a second fault. 
Accidental isolation of healthy units is excluded. 
The commercial follow-on development mainly comprises 
the implementation of all fault management functions in a 
single hardware element, a miniaturization of this element, a 
drastic increase in performance and a standardization of the 
application interface. 
4. THEFIVEDESIGN 
As described before, the FME contains all fault management 
functions in "concentrated" form, most of them 
implemented in hardware. 
The major fault management functions of this FME 
comprise: 
Synchronization of the pool computers or controllers 
via a fault tolerant clock 
,@Byzantine" data exchange 
CRC algorithms 
fault masking via ,,Byzantine" voting algorithms 
voting on bit-wise identical data 
voting on approximately identical data with user- 
confgurable voting laws 
isolation of faulty units by majority-reset 
reintegration of once-isolated units during runtime 
scaleable redundancy 
As mentioned before, the latter feature implies that simplex- 
, duplex- triplex- and quadruplex-systems can be 
configured. The voting algorithms and all other fault 
management functions automatically adapt to the given 
conf guration. 
Due to its easy upward-scalability, using the FME in a 
simplex configuration is particularly useful for early 
development and test of the application software of the 
computer pool. 
The triplex configuration allows for a fail-operational 
behavior w.r.t. a single fault (which is masked out by the 
voting process) 
The quadruplex configuration allows for a two-fold fail- 
operational behavior. 
As mentioned above, after a first fault the triplex 
configuration resulting from the subsequent isolation of a 
unit is guaranteed healthy due to the Byzantine technique, 
such that the proper masking of another fault is provided 
for. 
The key features of the functional design of the FME are 
shown in the block diagram in Figure 2. 
clock 
cross strapping 
data reset 
crossstrapping cross strapping 
I 
Deterministic lime Slots for Data exchange and vote 
memory mapped DPFUW interface 
reset pulse 
x$I- 
The core of the FME is the data distribution and voting logic 
unit and the fault tolerant clock, both implemented in 
hardware. 
5. FME FUNCTIONS AND PERFORMANCE 
In the following, the major functions and performance data 
of the FME are presented in summarized form: 
Data Distribution and Voting: 
e 
two round Byzantine data distribution 
fault masking via consistency check and data content 
vote 
voting of messages with fmed length of 512 byte 
3-1 129 
voting can be defined individually for each time slot 
(see below) by the application for: 
- single source data 
- bit-wise identical redundant data 
- approximately identical redundant data (user 
permanent FME system status vector vote at 100 HZ 
capability for detection of dormant faults prior to 
command issuing 
autonomous processor pool redundancy management 
(4- 3- 2- 1) via FME status vector and remote reset 
control 
0 scalable redundancy (simplex, duplex, triplex, 
quadruplex) 
message protection with CRC in hardware 
defined voting laws) 
0 
0 
Synchronization: 
0 
0 
0 
inter-unit synchronization at 100 Hz via fault tolerant 
clock 
deterministic data distribution in lms time slots (see 
Figure 3) 
synchronization precision between redundant units < 5 
micro seconds 
local synchronization of application board via 100 Hz 
fault toierant clock pulse 
FA4E Cross-Strapping: 
0 point to point data cross-strapping'with high speed 
IEEE 1355 data links of 200 Mbit/s 
0 fault tolerant clock cross-strapping 
remote reset cross-strapping 
FME per$ormance data: 
0 constant data distribution, voting, error masking and 
data correction within a time period of 1 millisecond for 
a data size of 5 12 byte 
synchronized message passing with application SW in 1 
kHz time slots 
total FME throughput capability = 500 kbyte per 
secondAppIication Interface: 
Strict separation of fault management functions and 
application S / W  via DPRAM IIF 
5 12 byte data read and write buffer for each tinie slot 
0 
0 
32 Bit DPRAM addresses 
0 
Isolation and Recovery: 
0 majority reset of faulty units 
capability for online reintegration of units which had 
been reset due to spurious faults 
Reliability 
Concerning the reliability figure R (t) of fault tolerant 
computers realized by means of the FME it has been 
analyzed, that even the reliability of I;: = 0,99 for operation 
periods of 15 years typically required by customers today 
(but not achieved yet) can be realized, provided that the 
FME is realized by a System-on Chip (SoC) design and is 
used in a quadruplex configuration. 
6.  CONCLUSIONS 
The realization of fault tolerant computers requires a 
considerable effort, both for their development and 
validation. In addition, the redundancy required to achieve 
the fault tolerance increases power consumption, mass and 
volume of the computers. 
Astrim has developed a Fault Management Element by 
which the above mentioned development is practically 
eliminated. 
3-1130 
Moreover, this FME, which will be available as ASIC in 
the near future, such that the power, mass and volume 
problems are also greatly reduced. 
Smaller applications could also be accommodated in the 
core processor of the ASIC itself, such that the fault tolerant 
computer is basically reduced to 3 to 4 ASICs in this case. 
With the advances in ASIC technology, this miniature 
configuration could finally become the standard for any size 
of application in future. 
References 
1. 
2. 
3. 
4. 
5. 
6. 
7. 
8. 
9. 
Lamport, Shostak and Pease: The Byzantine Generals 
Problem ACM Transactions on Programming Lanuages 
and Systems, Vol. 4, No. 3, (1982) 
G. Urban, H.-J. Kolinowitz, J. Peleska: A Survivable 
Avionics System for Space Applications. In 
Proceedings of the 
FTCS-28 Symposium on Fault-Tolerant Computing, 
June 1998 
H. Kopek: Real-Time Systems, Kluwer Academic 
Publishers 1997 
S.-T. Levi, AX. Agrawala: Fault Tolerant System 
Design, MCGraw-Hill Senes on Computer Engineering, 
1994 
B. Buth and J. Peleska: Daimler-Benz Aerospace- 
Project DMS-R - FTC Development-Venlfication of 
Avionics Interface AVI, Technical Report, JP Software- 
Consulting 1996 
B. Buth, J. Peleska and H. Shi: Daimler-Benz 
Aerospace-Project DMS-R - FTC Development - Fault 
Management Layer (FML): Verification of Deadlock 
Freedom. Technical Report, JP Software-Consulting, 
1996 
J.C. Laprie: Dependability: Basic Concepts and 
Terminology, IFIP WG 10.4 Dependable Computing 
and Fault Tolerance Springer-Verlag 1991 
B. Buth, M. Kouvaras, J. Peleska and H. Shi: Deadlock 
Analysis for a Fault-Tolerant System. In Proceedings of 
the AMAST Conference, November 1997, Springer 
LNCS (1997) 
G. Brandt, W. Schneider. G. Urban, 
V. Branets, C. Reimers: European Built Core Data 
Management System for the Russian Service Module, 
IAF-95-T.2.06 
3-1131 
