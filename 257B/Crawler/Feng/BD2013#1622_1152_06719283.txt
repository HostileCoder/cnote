Extending the visualization capabilities  
of a genome browser 
 
 
Csaba Lámfalusi, Dávid Girus, Kinga Kruppa,  
János Tóth, Enik? Hajduné Pocsai, Roland Kunkli, 
András Hajdu 
Faculty of Informatics, University of Debrecen 
4010 Debrecen, POB 12, Hungary 
{lamfalusy, girus.david, kruppa.kinga, tothjanos.ipgd} 
@gmail.com, {pocsai.eniko, kunkli.roland, 
hajdu.andras}@inf.unideb.hu 
Bálint L. Bálint 
Department of Biochemistry and Molecular Biology 
Medical and Health Science Center, University of Debrecen 
4032 Debrecen, Nagyerdei krt. 98, Hungary 
lbalint@med.unideb.hu 
 
 
Abstract—Scalable visualization of big data is highly desired 
in several fields. A demonstrative example is annotated genetic 
data, where the DNA sequence can be better visualized using 
space-filling fractal curves. Though such approaches are already 
available in the literature, they are not applied routinely in the 
clinical practice. The reason of this undesired fact is that clini-
 cians use well-established, but rather old gene browsers in their 
work. Naturally, these browsers lack state-of-the-art program-
 ming support and also visualization features. To help with this 
problem, in this paper, we propose a completion of a very widely 
used genome browser with scalable visualization techniques. The 
motivation of the work came from the clinical partner, since a 
good overview of the whole annotated DNA segment can lead to 
the recognition of currently unknown relations between genes. 
We explain what steps were needed to add the new visualization 
feature to the browser in terms of graphical elements, data ex-
 traction, and a scalable user interface. 
Keywords—Customizable content management; Information 
visualization; Scalable data analytics; Genome browsing; Space-
 filling curves 
I. INTRODUCTION 
Efficient visualization of large amount of data (Big Data) is 
an emerging trend worldwide. A common expectation towards 
the selected visualization technique is that it should be scalable. 
In other words, the visualization approach should be able to 
handle the situation, when the amount of data is multiplied in 
the future. To resolve this issue such models are needed that 
can be refined basically in an infinite way. One natural selec-
 tion can be to map the data to fractals, which objects are also 
known as self-affine, which property meets the infinite scala-
 bility.  
A specific field, where Big Data raise is genetics. DNA se-
 quences are composed from billions of nucleic acids, and ana-
 lyses that are more complex are also desired to be executed. 
Among such complex approaches, we can find metagenomics, 
where complete microecologies are observed instead of indi-
 vidual organisms. Another demonstrative example is the de-
 termination of associations between genes, which is important 
to explain specific diseases, but also the 3D spatial placement 
of the genome [1-3]. 
Clinical experts work with genome database in their daily 
routine in both medical care and research. Since genetic data 
analysis attained very strong interest from the beginnings ge-
 nome browsers have been developed, updated and used in the 
last few decades. These browsers support the access to fre-
 quently updated genome databases, and the visualization of the 
annotated genome sequences (also known as tracks). Several 
genome browsers are available for web-based usage, among 
which one of the most popular and widely applied tool is the 
UCSC Genome Browser [4-6].  
In genome research, it is essential to visualize genetic data 
in an easily interpretable way that helps fast cognition and rec-
 ognition of relations/behavior. The rapid development of com-
 puter science and graphics, and the new knowledge on the spa-
 tial structure of genome made it available to meet the growing 
needs for attractive and more demonstrative visualization by 
offering corresponding techniques. However, efficient visuali-
 zation of genetic data is a very challenging task. The traditional 
visualization techniques considering graphs, points, lines, etc. 
are less efficient here, since they ignore the scalability issue. 
To overcome these difficulties, to accumulate genetic data, 
space-filling (e.g. Hilbert) fractal curves were recommended 
[7-9]. The advantage of this approach is that though this tech-
 nique cannot provide the true spatial behavior, but still closer 
than a simple line representation, and the creation of such 
curves is quite fast. Though these techniques are already avail-
 able, their incorporation into the traditionally widely used 
UCSC Genome Browser has not been solved yet. In this paper, 
we propose a way to add this important feature. 
The rest of the paper is organized as follows. In section II, 
we give a brief description about the UCSC Genome Browser 
with focusing on the currently available visualization tech-
 nique, but also its implementation to see why this completion is 
far from trivial. The scalable visualization technique using 
419
 CogInfoCom 2013 • 4th IEEE International Conference on Cognitive Infocommunications • December 2–5, 2013 , Budapest, Hungary
 978-1-4799-1546-0/13/$31.00 ©2013 IEEE
space-filling curves and its integration into the genome browser 
is described in section III. We give specific implementation 
details, since the completion is also designed for further im-
 provements. In section IV, we discuss on some common issues 
raising for new visualization solutions, and draw some conclu-
 sions, as well. 
II. THE UCSC GENOME BROWSER 
A. Features 
The UCSC Genome Browser is a very popular tool partly 
because of its verbose, clear and user-friendly documentation. 
The user can easily load genetic data in the browser from the 
largest genome databases including e.g. the complete human 
genome. Additional advantages of this browser are that it is 
updated regularly with data essential from both theoretical and 
practical view. That is, besides formerly uploaded data the lat-
 est genetic data are also available. As for visualization, the 
UCSC Genome Browser supports sequential visualization of 
the annotated genomic data. Different annotations can be vi-
 sualized in different tracks as shown in Fig. 1.  
 
Fig. 1. The main window of the UCSC Genome Browser. Sequential 
visualization of annotated data are supported in differen tracks. 
It is also possible to search within a DNA sequence, since 
textual support is also provided. Some navigation and zooming 
features are available; however, the browser does not support 
the automatic interpretation of the data. The browser is capable 
to compare two DNA sequences. This is a useful feature for 
regarding any visualization method, since the possible differ-
 ences along the sequences can be nicely observable as peaks in 
the annotation histograms. The main drawback regarding the 
visualization supported by the UCSC Genome Browser is that 
larger sequences cannot be seen as a whole. Our work was mo-
 tivated to overcome this problem. 
B. Technical details 
One of the technologies the UCSC Genome Browser uses is 
the Common Gateway Interface (CGI). The CGI programs can 
generate any content and write it to standard output, which is 
transferred to the client browser from the web server. This 
technology supports the creation of dynamic websites. Within 
the UCSC Genome Browser, 35 groups of CGI programs are 
available for communicating with the user. These programs are 
written in C language with the source code is made publicly 
available. Some CGI programs serve to set up the connection 
with MySQL databases storing the genetic data and send one or 
more queries to it. Overall, we had to consider these require-
 ments to integrate the new visualization feature. 
III. EXTENDING THE VISUALIZATION CAPABILITIES  
OF THE BROWSER 
In this section, we describe how the visualization features 
of the UCSC Genome Browser are completed with adding a 
scalable, space-filling curve based technique. For filling a rec-
 tangular domain, we consider Hilbert curves, whose descrip-
 tion are given next. Then, we explain how this new visualiza-
 tion feature is integrated to the browser with giving the proper 
technical details of the implementation. 
A. Hilbert curve-based visualization for genetic data 
The main advantage of using Hilbert curves in genetic data 
visualization is that their self-affine behavior supports infinite 
scalability of the data. In other words, basically arbitrary large 
amount of data can be accumulated in these curves. Another 
important point of Hilbert curves is that though they are far 
being optimal in reflecting the real spatial behavior of the ge-
 nome, but still better approximate it than the sequential repre-
 sentation. Moreover, these curves can be easily, and thus rapid-
 ly generated [10]. 
The space-filling Hilbert curve is able to traverse through 
all the points of a square as Peano has shown that a line seg-
 ment can be recursively fragmented in such a way (see Fig. 2). 
The resulting attractor curve is a fractal that is self-affine, that 
is, any smaller portion of the curve has just the same structure 
as the original one. 
 
Fig. 2. The first six iterations in the construction of the Hilbert curve. 
The Hilbert curves have a clustering behavior property, 
which makes them a useful tool for the visualization of genetic 
data. That is, the points that are close in the sequential repre-
 sentation are also close after mapping them to the curve. Thus, 
closer genetic pieces of information have patch-like appearance 
on the curve with the size of the patch corresponds to the car-
 dinality of the bases, while coloring indicates the annotation 
values [11]. 
420
 Cs. Lámfalusi et al. • Extending the visualization capabilities of a genome browser
There are several implementations available for the visuali-
 zation of genetic data with Hilbert curve. Such a tool is the 
HilbertVis software developed in the well-known statistical 
programming language R [12]. The HilbertVis tool is available 
both as a stand-alone application and as an R package [13, 14]. 
The GUI of HilbertVis contains several useful features for 
handling the data (e.g. scaling, coloring) as it can be seen also 
in Fig. 3. Because of its several positive features, we consi-
 dered the integration of HilbertVis into the UCSC Genome 
Browser. 
 
Fig. 3. The graphical user interface of the stand-alone version of the 
HilbertVis tool. 
B. Integrating visualization into the browser 
During the development, we considered various program-
 ming technologies, like Java, Java Web Start, R etc. We have 
started with writing a script in the R language. This script in-
 cludes two packages: the packages HilbertVis and HilbertVis-
 GUI. Then, we have developed a simple Java applet that uses 
and executes the R script during through user interaction. 
 
Fig. 4. Converting the output format (GFF) of the UCSC Genome Browser to 
the input format (WIG) of the HilberVis tool. 
This application runs on client side. Because of security and 
permission problems, we use the Java Web Start technology 
with handling certificates. Using this technology, stand-alone 
Java applications can be deployed with a single click over the 
network. These Java Web Start applications are launched by 
using the Java Network Launch Protocol (JNLP). During 
usage, the program code is downloaded to client side before 
running the Java application, and then it starts running on the 
user's computer. 
A critical issue is how the data we would like to visualize is 
passed to the HilbertVis tool. For this task, we have to use a 
special file structure (WIG) as input requirement of HilbertVis. 
As for the original usage of the UCSC Genome Browser, the 
user can select the interested genomic region and its annota-
 tion. Moreover, the genome browser supports the export of the 
data in GFF format [15], which we had to convert to WIG for-
 mat as shown also in Fig. 4. 
Thus, we had to solve also the problem to pass the selected 
data automatically to the HilbertVis tool. Accordingly, we had 
to modify the C source of the hgTables CGI program. The 
hgTables CGI is responsible for the preparation of Table 
Browser, which is one of the pages of the UCSC Genome 
Browser (see Fig. 5). 
 
Fig. 5. The Table Browser page of the UCSC Genome Browser for selecting 
or saving the data for visualization. 
This page was very useful for us, since it originally composed 
the genomic data selected by the user the appropriate GFF for-
 mat. We have created a new CGI program hgHilbert as a mod-
 ified version of hgTables. The main difference to let the new 
visualization available is shown in Fig. 6. 
The hgHilbert program does not send directly the selected 
genomic data to the user, but it automatically extracts that for 
the visualization tool. After finishing all these steps, the Hil-
 bertVis tool loads and visualize the selected data automatically. 
 
Fig. 6. The modified version of the Table Browser page to integrate the 
possibility to launch the Hilbert visualization tool (marked by red). 
421
 CogInfoCom 2013 • 4th IEEE International Conference on Cognitive Infocommunications • December 2–5, 2013 , Budapest, Hungary
Since our primary aim was to provide an extension to the 
existing browser, we have inserted an extra item in the top 
menu of the main page of the UCSC Genome Browser called 
HilbertVis (see Fig. 7) that opens the modified Table Browser 
with linking to the hgHilbert program. In this way, the final 
step of integration is gained. As a summary, we present the 
components of our proposed system in Fig. 8 with indicating 
which elements are needed at both server and client side for the 
successful operation. 
 
Fig. 7. The modified top menu of the UCSC Genome Browser with the new 
HilbertVis menu item (marked by red). 
 
Fig. 8. The deployment of the components of the proposed system. 
IV. DISCUSSION AND CONCLUSIONS 
In this paper, we have proposed a way to integrate a scala-
 ble visualization technique into the UCSC Genome Browser. 
The selected Hilbert curve-based technique allows visualiza-
 tion of large genetic annotation data in a more easily interpret-
 able way than traditional sequential methods, facilitating fast 
cognition and recognition of relations and data behavior. 
Our primary motivation was to release a prototype, and 
based on the feedbacks on its usage in the clinical domain we 
plan some further improvements. As major revision points the 
HilbertVis tool of the R language could be replaced by devel-
 oping an own visualization framework. To reach this aim, we 
have already made the first step, since we have introduced Java 
platform, which can be easily improved by new graphical fea-
 tures, such as WebGL techniques. Moreover, we plan to test in 
what extent the actual efficiency of the usage of the browser 
raised through some adequate quantitative analysis of visuali-
 zation. Since besides the visualization of simple annotated data 
specific relationships between certain genomic segments can 
be important, we plan to extend to the fractal-based visualiza-
 tion techniques to 3D. Finally, if the prototype will be found as 
an efficient tool for the clinical domain, we plan to release our 
development in terms of an installation kit to upgrade the 
UCSC Genome Browser to support scalable visualization. 
ACKNOWLEDGMENT 
This work was supported in part by the projects TÁMOP-
 4.2.2.C-11/1/KONV-2012-0001, and TÁMOP 4.2.4. A/2-11-1-
 2012-0001 supported by the European Union, co-financed by 
the European Social Fund, and by the OTKA grant NK101680. 
REFERENCES 
[1] G. Felsenfeld, M. Groudine, “Controlling the double helix”, Nature, vol. 
421, pp. 448–453, 2003. 
[2] A.T. Annunziato, “DNA Packaging: Nucleosomes and Chromatin”, 
Nature Education, vol. 1, no. 1, 2008. 
[3] O. J. Miller, Human Chromosomes, Springer, 2000. 
[4] UCSC Genome Bioinformatics, [Online]. Available: 
http://genome.ucsc.edu/ 
[5] UCSC Cancer Genomics Browser, [Online]. Available: https://genome-
 cancer.ucsc.edu/ 
[6] UCSC – Sequence and Annotation Downloads, [Online]. Available: 
http://hgdownload.soe.ucsc.edu/downloads.html 
[7] S. Anders, “Visualization of genomic data with the Hilbert curve”, 
Bioinformatics, vol. 25, no. 10, pp. 1231-1235, 2008. 
[8] J. Huo, Space-Filling Curves, [Online]. Available: 
http://www.mii.lt/antanas/uploads/visualization/lectures/lect12/ 
SpaceFilC.ppt 
[9] C.B. Nielsen, M. Cantor, I. Dubchak, D. Gordon, T. Wang, “Visualizing 
genomes: techniques and challenges”, Nature methods, vol. 7, S5-S15, 
2010. 
[10] B. Michael, Space-Filling Curves – An Introduction with Applications in 
Scientific Computing, Springer, 2013. 
[11] K. Mitchell: Hilbert Curve Coloring, [Online]. Available: 
https://www.fractalus.com/kerry/tutorials/hilbert/hilbert-tutorial.html 
[12] The Comprehensive R Archive Network, seqinr: Biological Sequences 
Retrieval and Analysis, [Online]. Available: http://cran.r-
 project.org/web/packages/seqinr/index.html 
[13] Bioconductor – Open source software for bioinformatics, [Online]. 
Available: http://www.bioconductor.org/ 
[14] Bioconductor – Hilbert curve visualization, [Online]. Available: 
http://bioconductor.org/packages/release/bioc/html/HilbertVis.html 
[15] Trust Sanger Institute, “GFF specifications document”, [Online]. 
Available: http://www.sanger.ac.uk/resources/software/gff/spec.htm 
422
 Cs. Lámfalusi et al. • Extending the visualization capabilities of a genome browser
