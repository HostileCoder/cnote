Utilizing Human Intelligence in a Crowdsourcing Marketplace
 for Big Data Processing
 Sivadon Chaisiri
 School of Information Technology, Shinawatra University
 99 Moo 10, Bangtoey, Samkhok, Pathum Thani 12160 Thailand
 Email: sivadon@ieee.org
 Abstract—Crowdsourcing emerging as a distributed
 problem-solving model can dispatch tasks to a large number
 of human workers. The workers’ human intelligence can
 be utilized to execute tasks which cannot be efficiently
 performed by computer-based systems. A crowdsourcing
 environment supports various data processing tasks, for
 example, data collection, data annotation, data validation,
 data classification, and natural language processing. In
 particular, the crowdsourcing environment can be applied for
 big data processing as well. In this paper, we propose Human-
 Intelligence-as-a-Service (HIaaS) which is a cloud computing
 service model utilizing human intelligence in a crowdsourcing
 marketplace to process big data. We also propose an
 optimization model based on stochastic programming for
 provisioning human workers in a HIaaS-based marketplace.
 Numerical studies are performed to evaluate the optimization
 model. A video rating system handling a big data set is an
 illustrative example analyzed in the studies. The results show
 that the model can efficiently reduce the cost to provision
 workers for processing a big data job.
 Keywords-big data; crowdsourcing; cloud computing;
 stochastic programming;
 I. INTRODUCTION
 Data processing and data analysis techniques are applied
 to discover useful information and value inside a data set.
 When traditional processing techniques cannot efficiently
 cope a data set due to its size, we could refer to such a
 data set as big data [1]. For processing big data efficiently,
 platforms and technologies (for example, Hadoop, HDFS,
 Hypertable, Hive, and Amazon Mechanical Turk) are sug-
 gested [2].
 In this paper, we mainly focus on crowdsourcing for pro-
 cessing data. Basically, crowdsourcing can offer a distributed
 problem-solving environment where a number of humans are
 assigned to execute tasks [3]. In the crowdsourcing environ-
 ment, some problems could be less complex when solved by
 the human than when solved by the computer-based system.
 Crowdsourcing has been applied for various data processing
 tasks, for example, data collection [4], data classification [5],
 data validation [6], data annotation [7], and natural language
 processing [8]. Amazon Mechanical Turk and InnoCentive
 are, for example, crowdsourcing environments where tasks
 (i.e., small job units) can be dispatched to human workers.
 When the size of data becomes part of problems that a
 conventional computer system cannot efficiently address, a
 crowdsourcing marketplace can be another source of big data
 processing power.
 In this paper, we propose a service model, namely Human-
 Intelligence-as-a-Service (HIaaS). This model utilizes hu-
 man intelligence in a crowdsourcing marketplace for pro-
 cessing big data. By splitting big data to a number of tasks,
 tasks can be distributed to a crowd for processing in a
 parallel fashion. Software components required to operate
 the HIaas by a provider are recommended. This model
 also presents that two key types of workers, namely, on-
 demand and contract workers should be available in the
 crowdsourcing marketplace. Next, the paper proposes an
 optimization model, namely HIaaS Resource Provisioning
 Optimization (HRPO) based on stochastic programming [9].
 We derive this HRPO primarily from a HIaaS customer’s
 perspective for minimizing the cost to provision workers
 processing big data from HIaaS providers. Numerical studies
 are performed to evaluate the HRPO. A video rating system
 handling a large number of video clips considered as a big
 data set is an illustrative example analyzed in the studies.
 The results show that the HRPO can efficiently reduce the
 cost to provision workers for processing the big data job.
 The rest of this paper is organized as follows: Section II
 presents an overview of the HIaaS model. Section III de-
 scribes the system model and assumption. The proposed
 optimization model of the HRPO is discussed in Section IV.
 Section V presents the numerical studies to evaluate the
 HRPO. The paper is summarized in Section VI.
 II. OVERVIEW OF HUMAN INTELLIGENCE AS A SERVICE
 In Fig. 1, the architectural layers of cloud com-
 puting services are presented, i.e., Software-as-a-Service
 (SaaS), Human-Intelligence-as-a-Service (HIaaS), Platform-
 as-a-Service (PaaS), and Infrastructure-as-a-Service (IaaS).
 The details of SaaS, PaaS, and IaaS layers can be found
 in [10]. The authors in [10] also mentioned the term “Hu-
 man as a Service” (HuaaS) which is related to the HIaaS
 model. However, software components required to operate
 the HuaaS model were not proposed. Moreover, the HuaaS
 model did not address human resource provisioning for big
 data processing. In this paper, we propose the HIaaS model
 2013 19th IEEE International Conference on Parallel and Distributed Systems
 1521-9097/13 $31.00 © 2013 IEEE
 DOI 10.1109/.112
 6343
 2013 International Conference on Parallel and Distributed Systems
 DOI 10.1109/ICPADS.2013.113
Software-as-a-Service
 Human-Intelligence-as-a-Service
 Outsourcer Data repository Scheduler Recruiter
 Platform-as-a-Service
 Infrastructure-as-a-Service
 Worktable Monitor Logger Biller
 Figure 1: Layers of Cloud Computing Services.
 specifically coined for big data processing in a crowdsourc-
 ing environment. We also propose software components
 forming basic building blocks of a HIaaS-based platform and
 derive an optimization model to provision human workers
 for processing big data jobs. The optimization model consid-
 ers uncertainties of availability of human workers, unit price
 of man-hour, and the number of big data tasks. To the best
 of our knowledge, human resource provisioning under the
 uncertainties for big data processing in the crowdsourcing
 environment has never been exclusively studied.
 Basically, a HIaaS platform can be implemented on top
 of either Paas or IaaS. Later, software applications (e.g.,
 scientific applications and SaaS) can be built on top of
 the HIaaS platform. Then, a HIaaS provider can provide
 programming libraries (i.e., APIs) or Web Services to soft-
 ware developers who are HIaaS customers for implementing
 applications that allow big data to be processed in the HIaaS
 provider’s platform.
 With the HIaaS platform, a big data set of a job can be
 divided into a number of data chunks. Data chunks of the
 same job can be processed by a number of workers given the
 same function (e.g., image annotation and data classification)
 in a parallel fashion. A function with a data chunk can be
 referred to as a human intelligence task (HIT). Note that the
 term “Human Intelligence Task (HIT)” is coined as the unit
 of work on Amazon Mechanical Turk [7].
 The conceptual software components required to operate
 the HIaaS platform (shown in Fig. 1) are described as
 follows:
 1) Outsourcer – This component admits HITs from a
 HIaaS customer. The outsourcer also provides a mech-
 anism for the provider and the customer to nego-
 tiate prices to provision workers and service-level-
 agreement (SLA) to operate HITs before the HITs will
 be processed.
 2) Data repository – The results of processing HITs are
 stored in the data repository. Moreover, the customer
 can store data chunks of jobs in this data repository.
 3) Scheduler – Based on a scheduling policy, the sched-
 uler assigns HITs to workers.
 4) Recruiter – The recruiter acts as a human resource
 department recruiting workers for processing HITs.
 5) Worktable – This component provides an interface to a
 worker. Through the interface, the worker can receive,
 display, and process a HIT, and then the worker can
 submit the HIT result to the data repository.
 6) Monitor – HITs are tracked by the monitor so that
 the HIaaS customer can check the progress and status
 of HITs. With the information from the monitor, the
 HIaaS provider can evaluate workers’ performance and
 plan to provision workers as well.
 7) Logger – The logger records activities in the HIaaS
 platform for debugging and auditing purposes.
 8) Biller – This component can charge the HIaaS cus-
 tomer and (electronically) transfer remuneration to
 workers.
 The implementation of a HIaaS platform will be ex-
 tensively addressed in the future work. Basically, all the
 software components of the platform can be deployed as
 Web Services so that service invocations to the components
 can be conveniently performed. Moreover, a job can be de-
 veloped as a MapReduce job which is specifically designed
 for processing large data sets [11]. With the MapReduce
 programming model, HITs can be map tasks or reduce
 tasks which can be assigned to workers by a master (i.e.,
 the scheduler in Fig. 1). Hence, the HIaaS platform must
 provide APIs supporting MapReduce for such a job. In
 addition, a web application connecting to the worktable
 component can be provided to workers such that the workers
 can conveniently handle HITs. Fig. 2 depicts a process flow
 diagram representing flows starting from a HIaaS customer
 to five software components and a worker.
 III. SYSTEM MODEL AND ASSUMPTION
 In this section, we define the system model and assump-
 tion of a crowdsourcing marketplace where HIaaS providers
 exist. A single HIaaS customer is considered in the model.
 The customer’s objective is to provision workers from HIaaS
 providers through both on-demand and contract options for
 processing HITs of jobs. Let  denote the set of jobs. The
 total number of HITs of job  is denoted by  . Let 
 be the deadline or the maximum amount of time required to
 complete every HIT of job . The amount of time to process
 a HIT is called processing time and its measurement unit is
 man-hour.
 Let  denote the set of HIaaS providers. Each provider
 employs workers for processing HITs. We assume that work-
 ers in HIaaS are skilful to perform HITs. It is assumed that
 the HIaaS provider defines SLAs to guarantee the processing
 time and quality for handling HITs from the customer. Let
  denote the maximum processing time defined in the SLA
 to process a single HIT of job  by provider . We assume
 that SLAs of all providers are not violated.
 6354
Outsourcer
 1. submit HITs
 Scheduler
 3. forward HITs
 4. schedule HIT
 5. get data chunk
 HIaaS 
customer
 2. store data
 6. process HIT
 Biller
 11. get paid
 10. inform
 WorktableData repository
 8. store result
 9. get HIT results Worker
 7. submit HIT result
 Figure 2: Process flow diagram in HIaaS.
 To simplify the model, the main objective of our proposed
 optimization model is only to minimize the human provi-
 sioning cost. Therefore, the cost of data transfer (including
 both downlink and uplink) between the customer and the
 providers are assumed to be neglected. We also assume that
 data chunks of all jobs are initially stored in a centralized
 storage (e.g., a FTP/HTTP host and cloud storage). When a
 HIT is processed by a worker, its associated data chunk will
 be instantly transferred from the storage to the worker. All
 results of HITs will be stored in the data repository (shown in
 Fig. 2). Next, the customer can retrieve the results anytime.
 This paper ignores the cost to utilize the data repository.
 Finally, the results of the HITs can be statistically analyzed
 through traditional MapReduce (e.g., Hadoop).
 A. On-demand and Contract Options
 Two options to process HITs are assumed to be available
 in HIaaS providers, namely on-demand and contract options.
 These options are similar to the options available in IaaS
 providers (e.g., Amazon EC2 and Windows Azure). With
 the on-demand option, the customer can submit jobs to be
 processed, and then the cost is charged to the customer on a
 pay-per-use basis according to the real usage of processing
 time required for HITs (i.e., the number of used man-hours).
 A HIaaS provider can adjust the number of workers and
 prices for the on-demand option according to the supply-
 and-demand of workers. For job  processed in provider ,
 let  and  denote the unit cost (i.e., $ per man-hour) and
 the number of available workers in the on-demand option,
 respectively.
 With the contract option, the customer subscribes to a
 contract by stating the number of contract workers required
 for HITs, and then the unit cost of the contract option is fixed
 and generally cheaper than the on-demand option within
 a specific time duration called contract duration. Different
 contract durations (e.g., 7-day, 3-month, and 1-year dura-
 tions) can be available. The number of contract workers will
 be available only within the contract duration. Therefore,
 the customer can choose an appropriate duration and pay an
 upfront cost to obtain the cheaper unit price. Furthermore,
 the customer should provision the appropriate number of
 contract workers to hedge against risks of fluctuating price
 and the unavailability of workers in the on-demand option.
 In this paper, it is assumed that only one time duration is
 available and able to meet all the job deadlines. Let 	
 denote the cost to hire a contract worker to process job  in
 provider .
 In practice, the contract option needs to be requested and
 signed by the customer in advance such as 1-month or 3-
 month early. With the advance request, the HIaaS provider
 can prepare the number of contract workers to meet the
 customer’s request. Contract workers will be reserved to
 work for certain contracts.
 B. Uncertainty
 It is possible that the number of HITs of a job cannot
 be known by the customer in advance. For example, at the
 moment when the customer purchased the contract option,
 the customer might not realize the actual number of HITs at
 the later moment when the signed contract has commenced.
 Moreover, the unit price of man-hours and the number of
 workers in the on-demand option can fluctuate. Due to
 these uncertainties, it is not trivial to achieve the optimal
 solution to sign contract workers. Either over-subscription
 or under-subscription of a signed contract can occur. The
 over-subscription results in wasteful expenditure. In contrast,
 the under-subscription results in the higher cost to hire on-
 demand workers. Furthermore, the number of on-demand
 workers might not be sufficient to complete HITs and meet
 the deadline.
 This paper addresses the uncertainties by deriving a
 stochastic programming optimization model [9]. With the
 model, all possible values of the uncertainty parameters are
 described by scenarios. Let  denote the set of all scenarios.
 Given job  and provider , 
    
 denotes the random vector of scenario    where  ,
  , and  denote the number of HITs, the number of
 available on-demand workers, and unit-price of on-demand
 option, respectively. Scenario  is associated with a certain
 probability denoted by  . A probability distribution asso-
 ciated with scenarios in  is assumed to be known. It is
 assumed that the probability distribution has finite support.
 That is,  has a finite number of scenarios with probability
 6365
 where
 
 
   .
 C. Decision Variables
 Decision variables for the stochastic programming opti-
 mization model can be mapped into three groups, namely
   ,   ,   .  is the set of non-negative
 integers. Variable  denotes the number of contract workers
 to be hired through the contract option for job  in provider
 . Under scenario , variable  denotes the number
 of man-hours to be utilized from the contract worker for
 job  in provider . Under scenario , the number of
 contract workers could be deficient to process remaining
 HITs. Consequently, the number of man-hours denoted by
  can be dynamically provisioned through the on-demand
 option.
 IV. HIAAS RESOURCE PROVISIONING OPTIMIZATION
 In this section, we propose the HIaaS resource provision-
 ing optimization (HRPO) based on the stochastic program-
 ming optimization model with two-stage recourse [9]. The
 objective function of the model is defined as follows:
 Min
 
 
 
 
 	  
 
 Q  (1)
 The objective function in (1) is to minimize the cost to
 provision workers for processing big data jobs while the
 deadlines of the jobs can be met and the uncertainty are
 taken into account. Under the uncertainties described by sce-
 narios (i.e., ), 	
 denotes the expectation of costs paid
 for the on-demand option.  denotes the composite variable
 consisting of all decision variables  . Given scenario 
 and composite variable , function Q in (1) represents the
 cost to utilize the on-demand option as fully expressed as
 follows:
 Q   Min
 
 
 
 
 
 
 (2)
 subject to:           (3)
  
 
 
   
 
     (4)
           (5)
           (6)
 In (2), functionQ is a minimization problem consisting of
 four groups of constraints. The number of contract workers
 which can be provisioned by the customer is controlled by
 constraint (3) where  denotes the maximum number of
 contract workers which can be supplied by provider  for job
 . Constraint (4) ensures that all the HITs will be processed.
 Constraint (5) governs the utilization of contract workers.
 Constraint (6) controls the number of man-hours which can
 be utilized through the on-demand option.
 Next, the stochastic programming optimization model
 shown in (2)–(6) is transformed into the deterministic equiv-
 alence which can be efficiently solved by an optimization
 solver supporting mixed integer programming (for example,
 a solver available in NEOS [12]). The deterministic equiva-
 lence can be fully expressed as follows:
 Min
 
 
 
 
 	 
 
 
 
 
 
 
 (7)
 subject to: 
  
 
 
   
 
         (8)
               (9)
              (10)
 V. NUMERICAL STUDIES
 A. Illustrative Example
 The proposed HRPO is evaluated by performing numer-
 ical studies. A video rating system (VRS) for a streaming
 media service is analyzed in the studies. The VRS has new
 numerous one-minute video clips in every month which can
 be considered as a big data set. The VRS needs to classify
 every clip to a specific rate. For example, there are four rates
 used in a television content rating system in Thailand (i.e.,
 C, U, PG-13, and 18). Then, the VRS annotates each clip
 by listing at least four keywords or tags.
 The average size of the one-minute video clip is 443.27
 MB. Note that this video clip size is based on the H.264
 720p format (with resolution = 1280x720 and frame rate =
 30fps) and estimated by the Video Space Calculator [13].
 In every 3 months, the average number of video clips
 gathered by the VRS is 216,416. That is, 96TB of storage
 capacity is required. Currently, a computer-based system
 cannot efficiently process such a big data set. The VRS is
 then considering a HIaaS-based crowdsourcing marketplace.
 B. Parameter Setting
 Only one job is considered (i.e., 	 	  ). A HIT of the
 job consists of both rating and annotation functions. It is
 assumed that the VRS is going to apply HIaaS for the next
 big data set only. The number of HITs (i.e., the number
 of video clips) is not known in advance. For example, the
 VRS needs to purchase the contract option a month early
 before the actual number of HITs will be realized so that
 the provider can prepare the sufficient number of contract
 workers required by the VRS. The probability distribution
 of the number of HITs can be obtained from historical data.
 A probability distribution used in [14] is applied for the
 probability distribution of the number of HITs and depicted
 in Fig. 3(c).
 Two HIaaS providers are considered in the studies, namely
  and . The VRS has to sign contracts with the two
 providers in advance. Moreover, the contract workers could
 be trained to enhance the skill performing the job. Both
 6376
3.4 3.42 3.44 3.460
 0.01
 0.02
 0.03
 0.04
 Price ($ per man?hour)
 Probabilit
 y
 (a) On-demand price distribution in 
 3.4 3.42 3.44 3.460
 0.01
 0.02
 0.03
 0.04
 Price ($ per man?hour)
 Probabilit
 y
 (b) On-demand price distribution in 
 0 10 20 30 40 500
 0.05
 0.1
 0.15
 0.2
 #HITs (x 104)
 Probabilit
 y
 (c) Distribution of the number of HITs (d) Scenario distribution
 Figure 3: Probability distributions.
 providers guarantee 120 seconds of the maximum processing
 time to complete a HIT. Let the maximum number of
 contract workers which can be supplied by each provider
 be 1,000. The number of on-demand workers is assumed to
 be infinite in both providers. The same price of the contract
 option in  and  is $1.7 per man-hour. Note that all prices
 used in the parameter setting are based on an hourly wage
 in Thailand. It is assumed that the number of man-hours
 offered by a contract worker equals the amount of time of
 the deadline. Hence, the cost to hire a single contract worker
 (i.e., 	) is equal to  .
 Prices in the on-demand option vary. We use historical
 prices of Spot Instances in Amazon EC2 to simulate the
 probability distributions of the on-demand prices used in
 the studies. We first set the constant value equal to three
 as a base value. Then, the results of adding the base value
 to the Amazon EC2 spot prices of Linux m2.2xlarge (US
 East) in October 2010 and December 2010 are applied for
 the fluctuating on-demand prices in  and , respectively.
 The probability distributions of on-demand prices in  and
  are shown in Fig. 3(a) and Fig. 3(b), respectively.
 To obtain the probability distribution of the scenario set
 (i.e., ), we first let  and  be the sets of on-demand
 prices in provider  and the possible numbers of HITs of job
 , respectively. Then,  can be defined through the Cartesian
 product as follows:
  
 
 
 
 
  
 
 
  
 The joint distribution of all uncertainty parameters (i.e.,
 ) is shown in Fig. 3(d). Note that the total number of
 scenarios is 94,600.
 Next, the optimization model in (7)-(10) with the param-
 eters defined in this section is implemented and solved by
 GAMS/CPLEX [15] to evaluate the HRPO.
 C. Results
 Table I: Number of contract workers and cost given different
 deadline.
 Deadline   Cost ($)
 1 min. 1,000 1,000 24,302.84
 6 min. 1,000 1,000 23,858.09
 15 min. 1,000 1,000 23,858.09
 30 min. 1,000 1,000 23,360.66
 1 hr. 1,000 1,000 22,696.15
 2 hr. 1,000 1,000 22,080.29
 3 hr. 1,000 666 22,035.37
 4 hr. 1,000 250 22,035.37
 5 hr. 1,000 0 22,035.37
 8 hr. 625 0 22,035.37
 The impact of job deadline on the optimal solution
 obtained from the HRPO is investigated. Without a fixed
 deadline, 16,667 man-hours and 7,214 man-hours will be re-
 quired to handle the maximum number of HITs (i.e., 500,000
 HITs) and the average number of HITs (i.e., 216,416 HITs),
 respectively. With a deadline, the HRPO yields the optimal
 number of man-hours under the uncertainties. Given a fixed
 deadline, the result of the solutions consisting of the number
 of contract workers hired from providers  and  (i.e.,
  and , respective) are shown in Table I. The shorter
 deadline results in greater number of contract workers and
 higher expected cost to be required for the job. For example,
 given a deadline which is shorter than three hours, the job
 can be accomplished by hiring 1,000 contract workers from
 each provider (which is the maximum number of contract
 workers supplied by the provider). The expected costs of
 deadlines being longer than two hours are converged, since
 the number of man-hours (about 8,967 man-hours) will be
 sufficient to complete all the HITs. In other words, the job
 can be finished within three hours while the expected cost
 can be minimized under the uncertainties of the number of
 HITs and on-demand prices.
 Next, we compare the HRPO with the other models,
 namely non-subscription (NS), random-subscription (RS),
 and expected-value of uncertainty (EU). The NS model
 applies only the on-demand option. The RS model sets the
 number of workers randomly. The EU model is based on the
 Jensen’s inequality [16]. In this comparison, only provider
  and the 6-hour deadline are applied.
 In Table. II, the number of contract workers and expected
 cost yielded by a given model is shown. The HRPO model
 yields the minimum cost given 833 contract workers. The
 RS model applies the different numbers of contract workers
 (i.e., 100, 250, 500, and 750). With such a random pattern,
 6387
Table II: Comparison among HRPO, non-subscription (NS),
 random subscription (RS), expected-value of uncertainty
 (EU).
 Model #contract workers Cost ($)
 HRPO 833 22,066.62
 RS 750 22,076.78
 EU 1,000 22,148.43
 RS 500 22,303.45
 RS 250 23,032.72
 RS 100 23,798.02
 NS 0 24,673.25
 the RS model could yield either an acceptable solution or a
 poor solution. For example, the solution given 750 contract
 workers is close to that of the HRPO model and acceptable,
 while the solution given 100 contract workers is poor. The
 EU model applies the maximum number of contract workers
 provided by the provider so the contract workers could be
 highly underutilized. The NS model yields the highest cost
 since the model dynamically applies only the expensive on-
 demand price. This NS model might be acceptable when the
 number of HITs is very small and known in advance.
 VI. CONCLUSION
 We have proposed the Human-Intelligence-as-a-Service
 (HIaaS) to be the cloud computing service utilizing human
 intelligence in a crowdsourcing marketplace for processing
 big data jobs. A big data job can be split to a number of
 tasks which can be processed by human workers in a parallel
 fashion. The software components have been recommended
 to be the basic building blocks of a HIaaS platform provided
 by a HIaaS provider. We have also shown that the on-
 demand and contract workers should be offered by HIaaS
 providers. A HIaaS customer can a priori reserve the number
 of contract workers to hedge against the risks of fluctuating
 prices and unavailability of on-demand workers.
 In the paper, we have proposed the the HRPO model based
 on stochastic programming primarily derived from the HIaaS
 customer’s perspective for minimizing the cost to provision
 workers from HIaaS providers for big data processing. We
 have performed the numerical studies to evaluate the model.
 The video rating system handling a large number of video
 clips has been analyzed in the studies. The results show
 that the model can efficiently reduce the cost to provision
 workers while the uncertainties are taken into account and
 the job deadline is met. For a HIaaS provider, the proposed
 HIaaS model can be applied to implement a crowdsourcing
 marketplace for big data processing. For a HIaaS consumer,
 our HRPO model can be applied to reduce the cost to
 provision workers under the uncertainties.
 For the future work, the detail of the HIaaS implementa-
 tion (i.e., the eight software components in Fig. 1) will be
 discussed. An efficient scheduling policy for the scheduler
 component specifically designed for a crowdsourcing envi-
 ronment will be proposed. An efficient recruitment method
 for the HIaaS model will be explored. Techniques to improve
 workers’ performance and validate the accuracy of results in
 crowdsourcing will be investigated. The HRPO model will
 be improved to fit an actual crowdsourcing environment.
 For example, the workers’ performance degradation will
 be taken into account. The dependency of tasks (e.g., a
 workflow of tasks) will be considered. The computational
 complexity of the HRPO model will be extensively studied.
 REFERENCES
 [1] A. Jacobs, “The Pathologies of Big Data,” in ACM Queue,
 vol. 7, no. 6, Jul. 2009.
 [2] Big Data Now: Current Perspectives from O’Reilly Radar,
 O’Reilly Media, Aug. 2011.
 [3] D. C. Brabham, “Crowdsourcing as a Model for Problem
 Solving: An Introduction and Cases,” in Convergence: The In-
 ternational Journal of Research into New Media Technologies,
 vol. 14, no. 1, pp. 75-90, 2008.
 [4] G. Chatzimilioudis, A. Konstantinidis, C. Laoudias, and
 D. Zeinalipour-Yazti, “Crowdsourcing with Smartphones,” in
 IEEE Internet Computing, vol. 16, no. 15, pp. 36-44, 2012.
 [5] J. Costa, C. Silva, M. Antunes, and B. Ribeiro, “On Using
 Crowdsourcing and Active Learning to Improve Classification
 Performance,” in 11th International Conference on Intelligent
 Systems Design and Applications (ISDA) pp. 469-474, 2011.
 [6] T. Yan, V. Kumar, and D Ganesan, “CrowdSearch: Exploiting
 Crowds for Accurate Real-time Image Search on Mobile
 Phones,” in Proceedings of the 8th International Conference on
 Mobile systems, Applications, and Services, pp. 77-90, 2010.
 [7] K. Crowston, “Amazon Mechanical Turk: A Research Tool
 for Organizations and Information Systems Scholars,” in IFIP
 Advances in Information and Communication Technology,
 vol. 389 pp. 210-221, 2012.
 [8] R. Snow, B. O’Connor, D. Jurafsky, and A. .Y. Ng,“Cheap and
 Fast—But is it Good?: Evaluating Non-expert Annotations for
 Natural Language Tasks,” in Proceedings of the Conference on
 Empirical Methods in Natural Language Processing, pp. 254-
 263, 2008.
 [9] J. R. Birge and F. Louveaux, “Introduction to Stochastic
 Programming (Springer Series in Operations Research and
 Financial Engineering),” Springer, 1997.
 [10] A. Lenk, M. Klems, J. Nimis, S. Tai, and T. Sandholm,
 “What’s inside the Cloud? An Architectural Map of the Cloud
 Landscape,” in Proceedings of the 2009 ICSE Workshop on
 Software Engineering Challenges of Cloud Computing, pp. 23-
 31, 2009.
 [11] J. Dean and S. Ghemawat, “MapReduce: Simplified Data
 Processing on Large Clusters,” in Communications of the ACM,
 vol. 51 no. 1, Jan. 2008.
 [12] J. Czyzyk, M. Mesnier, and J. More´, “The NEOS Server,”
 IEEE Journal on Computational Science and Engineering, vol.
 5, pp. 68-75, 1998.
 [13] Web Application of Video Space Calculator, http://www.
 digitalrebellion.com/webapps/video calc.html.
 [14] S. Chaisiri, B. S. Lee, and D. Niyato, “Optimal Virtual
 Machine Placement across Multiple Cloud Providers,” in Proc.
 IEEE Asia-Pacific Services Computing Conference, pp. 103-
 110, 2009.
 [15] GAMS Solvers, http://www.gams.com/solvers/index.htm.
 [16] J. L. Higle, “Chapter 1: Stochastic Programming: Optimiza-
 tion When Uncertainty Matters,” Tutorials in Operations Re-
 search, INFORMS, 2005.
 6398
