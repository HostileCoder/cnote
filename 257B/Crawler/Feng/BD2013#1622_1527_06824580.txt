A real time index model for big data based on DC-Tree 
 
DanWei Chen 
Information Security Laboratory, Nanjing University of 
Posts and Telecommunications, Nanjing 210003, Jiangsu 
Province, P. R. China 
chendw@njupt.edu.cn 
 
ABSTRACT5Due to the low efficiency and poor real-time 
performance of actual query in big data , this paper puts 
forward a new multidimensional big data real-time query 
mode which is based on a dynamic indexing structure and 
the corresponding real-time query and dynamic insertion 
algorithm. It utilizes the Z curve to reduce  dimension of 
multidimensional data,adopt Bloom Filter realize discrete 
storage and parallel computing, Meanwhile it enhances the 
real-time performance of data by using dynamic indexing 
structure DC-Tree. The results of experimental show that 
the model not only improves the query efficiency of big data, 
but also improve the real-time effect of data. 
Keywords-big data;Z curve;Bloom Filter;DC-Tree 
I. INTRODUCTION 
With the rapid development of Internet, social 
networking, mobile applications become increasingly hot, 
as we can see,the amount of data in the network 
information increase rapidly, big data which is as a new 
concept of data and information carrier is defined.The 
explosive growth of data allows us to enter the era of 
large-scale data analysis, which is characterized by 
computationally intensive and requires large-scale 
concurrent storage and processing capabilities. How to 
extract valuable information  from the mass of data 
quickly, timely and effectively is the urgent problem to 
solve. 
There are two kinds of mainstream technologies about 
Large-scale data analysis currently: (1) in the 
1980s,Teradata and Gamma's research projects which was 
as the represent of parallel database developed gradually,is 
was composed by a series of operators.The output stream 
of the former operator is the next operator's input 
stream.Record passed these operators sequentially by the 
way of pipeline.As a result,their method had high 
performance. (2) Parallel computing framework about a 
"shared-nothing" simple functional programming is 
composed of Distributed File System GFS,it supports 
hundreds of millions of searches every day.Apache's 
Hadoop is an open source implementation of Map 
Reduce.But these large-scale data processing technology 
is difficult to meet real-time requirements, and more for 
off-line data processing.Literature[2] analyzed the 
advantages and disadvantages of these two 
techniques,architectural differences and 
similarities.Hadoop is more of a ETL tool,the relationship 
between the two is complement rather than compete. 
Jun Zhuang 
Information Security Laboratory, Nanjing University of 
Posts and Telecommunications, Nanjing 210003, Jiangsu 
Province, P. R. China 
zhuangjun_1988@126.com 
 
On the other hand,the Guttman [3] proposed a 
dynamic index structure based on R-Tree and R-Tree 
variants [4].Its insertion, query and other operations can 
be performed simultaneously, and at the same time it 
supports multi-dimensional model. The advantage of the 
manner is obvious in many spatial indexing techniques . 
However, with the tree height increasing, the query node 
overlap increases in large-scale data processing,which 
resulted in rapid decrease in query efficiency. 
This article presents a kind of mass data real-time 
query model based on dynamic index DC-Tree, this 
model can not only achieve efficient parallel processing 
in large-scale data ,but also improve the real-time 
effectiveness of data. 
II. RELATED WORK 
A. Z Curve 
            
     Figure 1. An order curve   Figure 2. 2nd order curve  
Z Curve belongs to a space-filling curve, and its role is 
to map high-dimensional spatial data to one dimension, 
the relationship is one to one correspondence. The 
simplest Z Curve is shown in Figure 1.In order to 
construct a k-Z Curve,the  each grid in the simplest Z 
Curve should be replaced by (k-1) order Z Curve .2nd 
order curve shown in Figure 2. 
Definition 2-1 Z Curve is defined as one-one mapping 
between the n-dimensional space nR  and 
one-dimensional space A, it can be written as Z? ARn ? . 
If the point nRp? , then the item ApZ ?)( , also the item 
)( pZ  is referred to as the point p’s Z value. 
B. Bloom Filter 
Bloom filter is a space-efficient and low lookup time 
complexity method , its storage space and insertion/query 
time are constant.It is widely used in spell checking, and 
database systems. 
The initial state, Bloom Filter is a set of bits containing 
m bits, each bit sets 0. As shown below: 
 
2013 International Conference on Advanced Cloud and Big Data
 978-1-4799-3261-0/14 $31.00 © 2014 IEEE
 DOI 10.1109/CBD.2013.8
 99
Figure 3. Bloom Filter initialization state 
To express S = {x1, x2, ..., xn} such a set of n 
elements, Bloom Filter use k independent hash functions 
(Hash Function), each element of the collection is mapped 
to {1 , ..., m} of the range. For any element x, the position 
of HF mapped by the i-th hash function will be set to 1 (1 
i i i k). As shown in Figure 3. 
 
Figure 4. Bloom Filter hashing process 
In determining whether y belongs to the set,y is 
applied to the k-th hash function , if all HF positions are 1 
(1 i i i k), y is considered the element in the set or 
just a false positive (since Bloom Filter has a certain error 
rate), or that y is not the elements of the collection. 
Judgmental process shown in Figure 5. 
 
Figure 5. Bloom Filter judgmental proces 
C. DC-Tree 
DC-Tree is a dynamic index structure, it is mainly 
composed of the data node, directory node and super node. 
A minimum MDS (minimum description subset) is a guide 
of indexing. The following will show several relevant and 
important concepts about DC-Tree. 
 
1) Concept hierarchy 
A multi-dimensional data set contains several 
functional properties, a data set is grouped into different 
dimension based on different attribute characteristics.A 
multi-dimension data set can be seen as a spatial array,the 
array element contains the respective multi-dimension 
data set and its corresponding dependency attribute 
value.If there are multiple functions in each dimension 
attributes,these attributes are organized by hierarchical 
structure.A concept hierarchy is a instance of hierarchy 
model.Figure 6 shows an example:customer dimension 
and its functional attribute including regional, national, 
and customer ID.ALL is the root of the conceptual level, 
representing all the conceptual hierarchy values. 
 
Figure 6. Customer dimension hierarchy model and concept hierarchy 
model 
2) multi-dimension data set 
   We define a multidimensional (n) data set D,each of 
its dimensions is called domain Di,m is a value of its 
dimension dependency attribute.Then D can be expressed 
in the following form: 
 
m
 nDDD ????? ...1   (1) 
A data in multi-dimension data set is called data record, a 
data record performance in the form 
of; ),...,,,...,( 11 mn xxaa ,and the  
??? jii xDa , .DC-Tree stores each dimension in 
concept hierarchy,and distribute ID to each dimension's 
attribute,which is in order to reduce information 
redundancy caused by storing character strings.DC-Tree 
manage its concept hierarchy dynamically,Every time of 
the update is on the basis of attribute value ID of inserting 
record.ID structure is shown in Figure 7,the ID structure 
is only 4 bytes in length,and the first four bits indicate the 
concept hierarchy height. 
 
Figure 7. ID structure 
3) MDS (minimum description subset) 
Define the n-dimensional data set D,Di is a assemble 
of each field.let DS ? ,so that S is a subset of D,for 
example a assemble of data records,the form of data 
record is ),...,,,...,( 11 mn xxaa ,the ??? jii xDa , .S is the 
smallest MDS (minimum description subset),it is such a 
sequence: ),...,( 1 nMM ,the ii DM ? ,this sequence must 
meet the following two conditions: 
For all Sxxaa mn ?),...,,,...,( 11 ,and all 
i, ni ≤≤1 ,there is ii Mm ? ,established that ii ma ≤ . 
If there is ),...,( 1 nNN ,and ii DN ? ,meeting the 
above coverage conditions,then for all i, ni ≤≤1 ,and 
ii Mm ? ,there is ii Nn ? ,established that ii nm ≤ . 
After defining MDS,MDS's several important 
operations are defined.These are very important in the 
corresponding algorithms about DC-Tree.The following 
will list detailedly.  
N-dimensional data set D?Di is a assemble of each 
field.There is a minimum description 
subset ),...,( 1 nMM ,and ii DM ? .There is also another 
minimum description subset ),...,( 1 nNN ,and 
ii DN ? . || S  represents power of a assemble. 
N contains M, if for every dimension i, ni ≤≤1 ,there 
is ii Nn ? ,established that ii nm ≤ . 
The volume of M is defined as :  
 ||)(
 1
 i
 n
 i
 MMvolume
 =
 ∏=    (2) 
Overlap of M and N is expressed as overlap(M,N), its 
100
definition is: 
 ||),(
 1
 ii
 n
 i
 NMNMoverlap ?∏=
 =
           (3) 
Expansion of M and N is expressed as extension(M,N), its 
definition is: 
||),(
 1
 ii
 n
 i
 NMNMextension ?∏=
 =
          (4) 
It is noteworthy that, Mi and Ni's element in each 
dimension i must belong to the same level at the Concept 
hierarchy when operating the overlap and extension, 
otherwise the operation is of no significance. 
III. QUERY MODEL 
A. Real-time query model system 
In this paper, dynamic index structure DC-Tree is used 
to construct our real-time query model, the model system 
is shown in Figure 3.1. This paper uses the distributed 
architecture system theory, and the ideological structure is 
simpler and more efficient for processing massive data.In 
this model, the node type will be divided into MasterNode 
and DataNode. The difference is that, MasterNode is 
responsible for data query/update location, and DataNode 
is responsible for storaging specific data as well as 
creating dynamic index in each storage. 
 
Figure 8. Real-time query model system 
Construction and application of the real-time query 
model system is divided into two areas: (1) The building 
of real-time query indexing. (2) Query of real-time 
indexing.A detailed description of the construction of the 
index will be launched in the fourth quarter of this 
paper.Real-time index query has two main steps: 
a)  The user sends a query to the 
MasterNode,MasterNode will handle the query content 
with the Z curve and Bloom Filter operations to 
determine which part of the DataNode is the query on,and 
submit these satisfactory DataNode to the user.After the 
operation,the user will be disconnected to MasterNode 
and initiative to visit submitted DataNode for querying. 
b)  The user to obtain the satisfactory DataNode for 
the platform,parallel query will be carried out on dynamic 
index structure(DC-Tree) of these DataNodes.Since each 
DataNode results on DC-Tree index is only part of the 
query results,the eventual result returned to the user 
should be polymerized by all part results. 
B. real-time query process 
The system structure of Real-time query has been 
elaborated in 3.1, this section will detail the process of 
decomposition of queries.Process can be divided into three 
steps: 
a) multi-dimensional data record is calculated by 
the way of Z curve in order to achieve the purpose of 
dimension reduction. 
b) Take the method of Bloom Filter to select the 
desired query DataNode through the dimensionality 
reduction of one-dimensional data. 
c) According to b) selected DataNode,parallel 
DC-Tree Dynamic index will be conducted.Then the 
aggregated results are returned to the user.The process of 
real-time query system is shown in Figure 9. 
 
Figure 9. Real-time query model process 
1) Detailed step decomposition process is as 
follows: 
  a) MDS (minimum description subset) 
decomposition 
Manifestation of MDS (minimum description subset) 
is )(
 ,...,1 dMM ,and ii DM ?  .Assuming 
that },...,{ 2,1 ikiii aaaM = ,and iik Dadi ?≤≤ ,1 Then the 
corresponding multi-dimensional data record set of MDS 
(minimum description subset 
of)is : )},...,,(),...,,...,,{( 2112111 dkkkd aaaaaa ,marked MM. 
    b)   Z curve dimensionality reduction 
According to step a)'s results set MM, using Z Curve 
dimension reduction algorithm operation.Setting the Z 
101
Curve mapping function ),,( nmpf z ,and MMp? .m is 
the order of Z Curve, and n is the number of dimensions 
in multidimensional model. Assuming that the mapping 
function zf  returns a value py ,The pseudo-code about 
mapping function calculation process is as follows: 
 
Step1. 0=py ; 
   REPEAT  
      REPEAT 
 
Step2. ji
 jin
 pp ayy
 1)1(2 ?+?+=  
      UNTIL nj ≥  
UNTIL mi ≥  
 
Step3. RETURN py  
   As the space complexity of n-dimensional and 
m-order's mapping function of Z Curve is 
)(nO ,therefore the above algorithm results need the 
n-length array to store the result set.Assuming that this 
result set is S. 
  c)  Bloom Filter Positioning 
According to step b),the result set is obtained after 
dimensionality reduction process.At the same time,the 
relevant work on Bloom Filter indicate that the k hash 
functions should be selected firstly.There is a certain error 
rate in Bloom Filter itself,in order to reduce this positive 
errors this paper build a hash function according the 
Knuth argument: two hash functions and forms by the 
following  can be uesd to generate more hash functions : 
rifHFHFHFi mod)]([ 21 ++=   (5) 
The ki ≤≤1 , r is the length of Bloom Filter 
array. 1HF and 2HF are two independent hash 
functions.When 0)( =if ,double hash function 
mechanism is taken, or using a hash function on the 
expansion mechanism.In this way maintaining the 
positive and error rate of the generated hash function 
constantly,and improves the computational efficiency of 
the system. 
After the selecting k hash functions the data in set S is 
mapped,and a DataNode node set is returned.Assuming 
the set is NN .At the same time,NN is returned to the user. 
  d)  DC-Tree index and aggregate the results 
According to obtained NN set in step c),user navigate 
to the desired indexed DataNode, then DC-Tree indexing 
algorithm is taken to query the DataNode.Detailed 
indexing algorithm will be described in Section IV.After 
searching on each DataNode,the index results will be sent 
to the final result set,assuming the result is RSet .Then 
polymerizing the index result set and obtaining the final 
query results 
IV. ALGORITHM DESIGN 
This paper presents a indexing algorithm based on 
real-time query system,which has two main components: 
dynamic index query algorithm and insertion algorithm. 
As the number of DataNode increases, concurrent 
query and insert operation will greatly reduce the 
probability of accessing the same node.However,there is 
still an access violation which will as well as leads to 
lapse.To address this problem,this paper improves the 
DC-Tree index structure and propose a kind of access 
lock mechanism.More specifically,DataNode will be 
locked into the protected status of the node when it is 
accessed,and the follow-up visits will wait until the node 
unlocked. 
A. Parallel Query Algorithm 
The proposed algorithm for parallel query algorithm 
begins with the DC-Tree root node of each DataNode 
from top to bottom, and each result data of DataNode 
data will be aggregated finally.The process is as follows: 
Parallel Query function:PARALLEL QUERY (PQ) 
INPUT:necessary inquiries _MDS (minimum 
description subset) 
OUTPUT: the aggregation of  query result set  
   Step1. for all nodes in NN set,if the node is not 
locked,all nodes in NN will be concurrently accessed. 
Step2. Let D to be the inquiry DC-Tree root node. 
Step3. Apply for lock for the root node D. 
Step4. For every child node C in D,if the query is not 
in the same dimension _MDS level in any one dimension 
of C,the lower dimension of both will be converted to  a 
higher level of the dimension hierarchy. 
Step5. If C's MDS is included in the query _MDS , 
then the MDS and Measure values will be added to the 
result set. 
Step6. If there is overlap between C'MDS and the 
query _MDS ,and C'MDS is not included in the query 
_MDS.Then set the child node C as D,and query function 
PARALLEL QUERY will be recursively called.Going to 
PQ1 and proceed.  
Step7. If C is a leaf node, then the end of the visit. 
Step8. Apply for unlock for the root node D. 
Step9. Aggregate the result sets of all accessing nodes 
in NN set,and obtain the final query results. 
B. Dynamic insertion algorithm 
This paper presents a dynamic insertion algorithm 
which combines X-Tree's super node and the meaning of 
concept hierarchy,and at the same time combining the 
access lock mechanism.In this way,the problem about 
efficiency of dynamic insertion,split balance and access 
effectiveness is solved greatly.Detailed process of 
dynamic insertion algorithm is as follows: 
  a) Dynamic Insert Function: DYNAMICALLY INSERT 
(DI) 
INPUT: data record Data Record, denoted by DR 
Step1. Let D be the root node of inserted DC-Tree. 
Step2. Apply for lock for the root node D. 
Step3. Update the directory node’s Measure values. 
Step4. If the DR is only contained in one of MDS of D 
's child, then let D be set for this directory child node. 
Step5. If the DR in contained in multiple MDSs of 
D'child,then find out the child which contains minimum 
102
data nodes in these children,and D is set to the directory 
child node. 
Step6. If the DR is not contained in any of MDS of the 
D'child,firstly copy D and set copy D'.DR is added to 
each child node of D,and calculate the new overlapping 
values.Then select the child node which has the minimum 
value of overlapping,and set it D. 
Step7. Insert the data records DR into the D and 
updates the value of D Measure. 
Step8. If D has reached the maximum accommodation 
space, then call splitting function SPLIT, the D is passed 
as a parameter. 
Step9. Update Measure and MDS of D’s father node. 
Step10. Let D point to the D's parent node , if D is not 
updated or is not a root, then go DI6 and continue. 
Otherwise it ends. 
Step11. Apply for unlock for the root node D. 
 
  b)  Split function: SPLIT (SP) 
Step1. Node required to be splitted contains multiple 
MDSs,choose the smallest dimension of the concept 
hierarchy in all MDSs elements as a separatist,denoted 
SplitDimension. 
Step2. Calculate each pair's overlap of MDSs,selecte 
the maximum pair as seed of the two groups.  
Step3. For remaining MDS in MDSs,separate them 
into two groups, calculate SplitDimension extension 
values (extension) on the split dimension,select the 
extension's biggest MDS. 
Step4. MDS selected in SP3 are added to two 
groups,calculate the overlap value,select the value of the 
smaller overlap and add MDS to the group. 
Step5. If there in any MDS in MDSs,means that group 
is not yet complete,go to SP3 and continue. 
Step6. If separate two groups are unbalanced or 
overlap value is too high,select the next best split 
dimension SplitDimension. 
Step7. If all dimensions are selected, the split effect 
has not yet reached a good state,upgrade this node to 
super node to solve balance problems. 
V. EXPERIMENTS AND PERFORMANCE ANALYSIS 
A. Description of experimental environment 
Goal of this paper is to design a model for fast 
indexing queries in large data.In the design of 
experiment,MatLab7.0 is used to simulate the data model 
and behavior. Detailed experimental environment is: set 
the memory page size of 512KB,choose DC-Tree which 
has the dimension of 3,set DataNode number be 10.This 
experiment mainly focus on the compare and simulation 
in area of timeliness of inserting data and querying data. 
B. Model Performance-Comparative analysis in 
insertion time performance 
The number of data records inserted in experimental 
is between 2000 to 20,000,Z Curve and Bloom Filter 
processing should be conducted before inserting.In this 
way,the process will loss of part of the time,and insertion 
time of a few data records will be longer than insertion 
time of a single point.As the data record continuously 
increases and splitting probability of a single point occurs 
rapidly,the splitting time increases.At the same time,data 
records are parallelly allocated and inserted in this 
model,each DataNode loads balancing.DC-Tree will not 
increase as fast as a single point,then the split has less 
affection.As a result,the model improve the performance 
of the insertion time which is shown in Figure 10. 
 
Figure10. Insertion time performance comparison 
C. Model Performance-Comparative Analysis of query 
time performance 
To test the query performance on the index,the 
number of data record is set between 2000 to 20,000. 
Data record which is randomly generated to query every 
time will cause accidental probability.For querying on 
different data sets,the average query time of 100 data 
records randomly generated is used as the current query 
time,and performance comparison is based on this 
method.Query time performance comparison is shown in 
Figure 11. 
 
Figure11. Query time performance comparison 
   As shown in Figure 11,MDS should be split to query 
in the initial model,and result set must be merged after 
querying in each DataNode based on the parallel 
mechanism.These two reasons resulting in a high query 
time when there is a a small data set.With the increasing 
data sets,the overlap in single point of MDS become 
more,and multi-path traversal query add a lot of 
time-consuming.However,this model uses concurrent 
multi-point query,and increasing of query time is not 
103
obvious.As a result,the model achieve a better query 
effect. 
D. Complexity Analysis 
To check the time complexity, for example, the time 
complexity of the model consists of three parts. The first 
part comes from the Bloom Filter, because it uses a 
hashing approach, so the average time complexity is 
reduced to )1(1O . The second part is the mapping process 
from the Z Curve, time complexity of k-dimensional and 
m-order about Z Curve function is )(2 kO , and the k is 
the length of the array. The third part comes from the 
dynamic query process based on improved DC-Tree in 
structure, the complexity of data set is decided by the 
number of element-N, so as )(log3 NO .In summary, the 
time complexity of the process is: 
   )(log)()1(),( 321 NOkOONkO ++=       (6) 
In particular, as the size of data and the dimension of 
the data increases,combining advantages of the 
hierarchical structure and the linear structure , the model 
greatly reduces the overlap between the MBR problems 
and improves the efficiency of the query. 
VI. CONCLUSIONS 
This article presents a kind of mass data real-time 
query model based on dynamic index DC-Tree which is a 
kind of dynamic multi-dimensional index structure.In this 
way,the model resolve the problem of lagged query and 
analysis for massive data,especially for multi-dimensional 
data sets.AS the data model is based on concept 
hierarchy,the effectiveness of real time in 
decision-making on large data sets is greatly improved. 
Certainly,since the concurrent query and insertion 
mechanism are utilized in the model, it remains future 
work to solve the problem of conflict between the two 
more effectively. 
ACKNOWLEDGEMENTS 
The authors would like to thank the reviewers for 
their detailed reviews and constructive comments, which 
have helped improve the quality of this paper. 
REFERENCES 
[1] J. Han and M. Kamber, Data Mining: Concepts and 
Techniques.Morgan Kaufmann Publishers, 2000. 
[2] Michael S, Daniel A, David J D. Map Reduce and Parallel 
DBMSs:Friends or Foes?[EB/OL]. (2011-05-16). 
http://database.cs.brown.edu/papers/stonebraker-cacm2010.pdf. 
[3] Guttman A.: ‘R-trees: A Dynamic Index Structure for Spatial 
Searching’, Proc.ACM SIGMOD Int. Conf. on Management of 
Data, Boston, MA, 1984, pp. 47-57. 
[4] Berchtold, S., Keim, D.A., Kriegel, H.P.: The X-tree: An Index 
Structure for High-Dimensional Data. In: Proc. of 22th Int. Conf. 
on Very Large Data Bases, Mumbai(Bombay), India, pp. 28–39 
(1996) 
[5] Loureiro Jorge,Belo Orlando.The M-OLAP cube selection 
problem? A hyper–polymerphic algorithm approach? In?
 International Conference.2010-11,194-201 
[6] J. Gray, S. Chaudhuri, A. Bosworth, A. Layman, D. Reichart,M. 
Venkatrao, F. Pellow, and H. Pirahesh, “Data Cube:A Relational 
Aggregation Operator Generalizing Group-By,Cross-Tab, and 
Sub-Totals,” Data Min. Know. Disc., vol. 1,pp. 29–53, 1997. 
[7] Doka Katerina? Tsoumakos Dimitrios?Koziris Nectarios?
 Distributing the power of OLAP?HPDC 2010-In?Proceeding of 
the 19th ACM international Symposium on High Performance 
Distributed Computing?2010?324-327 
[8] F. Dehne, T. Eavis, and S. Hambrusch, “Parallelizing the data 
cube,” Distributed and Parallel 
Databases,vol.11,pp.181–201,2002.[Online].Available: 
http://www.springerlink.com/index/BGN4YJUMUBPELXK0.pdf 
[9] Yu Cao; Chun Chen; Fei Guo; Dawei Jiang; Yuting Lin; Beng 
Chin Ooi; Hoang Tam Vo; Sai Wu; Quanqing Xu .ES2: A cloud 
data storage system for supporting both OLTP and OLAP.Data 
Engineering (ICDE), 2011 IEEE 27th International Conference on 
. 
[10] Al-Aqrabi, H.; Lu Liu; Hill, R.; Antonopoulos, N. Taking the 
Business Intelligence to the Clouds.High Performance Computing 
and Communication & 2012 IEEE 9th International Conference on 
Embedded Software and Systems (HPCC-ICESS), 2012 IEEE 
14th International Conference on   
[11] U. Onan, “High performance on-line analytical processing on 
computational grids”, Master Thesis, 2005. 
[12] G. Brieter. "Cloud computing architecture and strategy". IBM 
Blue Books, pp. 3-4. 2010. 
[13] A. Bento and R. Bento. " Cloud Computing: A new phase in IT 
Management ". Journal of Information Technology Management, 
22 (1): pp. 39-46, 2011. 
[14] P. Brezany, Y. Zhang, I. Janciak, P.Chen and S. Ye, “An Elastic 
OLAP Cloud Platform”, in proceedings of International 
Conference on Cloud and Green Computing (CGC 2011) in 
Sydney, Australia, December 2011. 
[15] B. Chadha and M. Iyer. “BI in the cloud”. SET-Lab briefings, 8 
(1): pp. 39-44. Infosys Research. 2010. 
[16] Sicen Ye, Peng Chen, Ivan Janciak, and Peter Brezany.Accessing 
and Steering the Elastic OLAP Cloud.MIPRO, 2012 Proceedings 
of the 35th International Convention   
[17] P. Brezany and A. Wöhrer, “Performance Evaluation of 
WebRowSet Implementations”, In: Proceedings of the Third 
International Conference on Data Management in Grid and P2P 
Systems (GLOBE'10), Bilbao, Spain 2010. 
[18] M. Ester, J. Kohlhammer, and H.-P. Kriegel, “The DC-tree:a fully 
dynamic index structure for data warehouses,” 16th International 
Conference on Data Engineering (ICDE), pp.379–388, 2000. 
[Online]. Available: 
http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=8
 39438 
[19] Azza A, Kamil B P, Daniel J A. HadoopDB: An Architectural 
Hybrid of Map Reduce and DBMS Technologies for Analytical 
Workloads[C]//Proc. of VLDB’09. Lyon, France: ACM 
Press,2009. 
[20] Dean J, Ghemawat S. Map Reduce: Simplified Data Processing on 
Large Clusters[C]//Proc. of the 6th Symposium on Operating 
Systems Design and Implementation. San Francisco, USA: [s. 
n.],2004. 
[21] Apache Hadoop Organization. Hive[EB/OL]. (2011-08-21). 
http://www.hive.apache.org/. 
[22] Apache Hadoop Organization. Hadoop[EB/OL]. 
(2010-08-16).http://www.hadoop.apache.org. 
 
 
104
