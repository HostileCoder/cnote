Document-oriented Database-based Privacy Data 
Protection Architecture 
 
Zhen Jiang    Yongqing Zheng    Yuliang Shi  
School of Computer Science and Technology 
Shandong University 
Jinan, China 
jizh1234@gmail.com, zhengyongqing@dareway.com.cn, liangyus@sdu.edu.cn 
 
 
Abstract—NoSQL database has been popular in cloud 
storage and document-oriented database also has attracted 
much attention as a kind of NoSQL database. This paper 
introduces document-oriented database-based privacy data 
protection architecture. This architecture maintains the 
feature as scheme-free and nested document of document-
 oriented database, and protects tenants’ privacy through split 
value and confused key. To prevent the attacker recombining 
the split value, we provide the theory of matching degree, and 
give related definition and algorithm to decrease the possibility 
of exposing tenants’ privacy data. Finally the experiment 
proves that our architecture is practical and efficient. 
Keywords-  Cloud,  NoSQL,  Privacy Protection, Big Data  
I.  INTRODUCTION 
It is more and more difficult to deal with big data and 
high concurrency data for traditional RDBMS in cloud 
storage. NoSQL database [1] has been popular in cloud 
storage, and document-oriented database also has attracted 
much attention as a kind of NoSQL database. More and more 
organizations and enterprises deploy their data in document-
 oriented database [2]. 
Compared with a traditional RDBMS, a document-
 oriented database deals with high concurrency reading and 
writing very well, enables storage, accesses big data, and has 
high scalability and availability. Document-oriented database 
adopts agile document replacing the concept of tuple. The 
method of document-oriented embeds document or array in 
it and expresses the complex logical structures among data in 
a record. Furthermore, document-oriented database is 
schema-free database. The keys of document are not required 
and the orders of the keys are not fixed. The schema-free 
provides more operability for the data. 
With the wide application of document-oriented database 
in the cloud storage, data security issues also emerge. Cloud 
data leakage occurs frequently in recent years, which makes 
the cloud storage providers lose credibility and increase the 
worry of the tenant about their data’s security. Cloud data 
leakage is generally divided into two cases, which are 
internal leakage and external leakage. Internal leakage refers 
to the cloud storage provider’s staff stealing the tenant’s data 
and selling it to the attacker to gain an advantage. External 
leakage refers to the attacker obtaining tenant’s data through 
various channels, including attacks on the cloud servers and 
bribing the internal staff. 
It is the research emphasis to prevent the tenants’ privacy 
data leakage in cloud data security. There have been some 
mature solutions to preserving privacy such as data 
encryption [3, 4], anonymity [5, 6, 7] and data fragment [8, 
9], etc. Data encryption can effectively prevent the leakage 
of privacy data, but the efficiency of the ciphertext 
processing is low; Anonymity protects privacy data through 
generalization. The generalization has acceptable processing 
efficiency, but it may result in data loss. Data fragment 
separates attributes which would leak tenants’ privacy 
together into distinct table and hide the relation among the 
tables. Data fragment doesn’t loss data, whose executing 
efficiency is better than data encryption, but it is not 
applicable for the structure of document.  
Considering the traditional methods can’t protect tenants’ 
privacy data while guaranteeing efficiency, we present a 
document-oriented database-based privacy data protection 
architecture which protects tenants’ privacy through split 
value and confused key. To prevent the attacker recombining 
the split value, we provide the theory of matching degree, 
and give related definitionu and algorithm to decrease the 
possibility of exposing tenants’ privacy data. Our 
architecture can protect tenant’s data from internal leakage 
and external leakage and maintain the properties as scheme-
 free and nested document of document-oriented database. 
Finally we test and verify our architecture is practical. 
In section ?we present the basic method to protect 
privacy data. In section ? we discuss how to oppose the 
attacker. In section ? we introduce our document-oriented 
database privacy data protection architecture. Finally the 
experiment testifies the architecture is high-efficiency.  
II. BASIC METHOD 
A. Split Value and Confused Key 
Firstly we definite basic methods for protecting private 
data as split value and confused key. 
2013 10th Web Information System and Application Conference
 978-0-7695-5134-0/13 $26.00 © 2013 IEEE
 DOI 10.1109/WISA.2013.12
 19978-1-4799-3219-1/13 $31.00 © 2013 IEE
Definition 1. Split Value and Confused Key, split value 
means segmenting the value of the attribute which needs 
protect. V? {Vr?Vr … . Vr}. Confused key is concurrent 
with split value, then we would rename every key of split 
value and out of order of the keys, K? {Kr?Kr … . Kr}. 
We can insure accuracy of every key-value pair and existing 
constraints  Kr ? Vr , while the order of confused key 
{Kr?Kr … Kr}  is the privacy protecting method. 
Scheme-free is a feature of document-oriented database, 
which means the order of the keys and the length of values 
are not fixed. We assume the attributes which need protect 
have a maximum length and a minimum length. We would 
determine the number of confused key by the maximum 
length when we achieve the privacy protecting method, 
while the large data is not considered in this paper. 
We need know split granularity when we split value and 
confuse key. The split granularity would determine the level 
of the privacy protection. We named this split granularity as 
split factor. The bigger of the split factor, the lower of the 
privacy protection level. If the split factor is 1, then we can 
regard our method as a special encryption algorithm. We 
would verify the efficiency of our architecture with different 
split factor. 
B. 3.2 Nested Document 
Nested Document is regarding a document as a value of 
another document. Nested document structure is a feature of 
document-oriented database, which makes the data organize 
more naturally and more accurately. We must consider how 
to protect the data in nested document carefully when we 
protect the privacy data in document-oriented database. 
To protect the data in nested document, we need grasp 
the structure information of the full-document. Therefore, we 
generate document-tree. The root of the document-tree is the 
record, while we build hierarchical relationship of the tree as 
the document structure’s hierarchical relationship. The 
document which contains value would become leaf node; 
there is a leaf node as successor for every leaf node. And we 
don’t care the orders of the key in document, in other words 
our document-tree supports scheme-free. There contains 
three extra-properties for every leaf node, the type of the 
value (0: numerical value, 1: string value), the maximum 
length and the minimum length. Attribute age is a numerical 
value and the min length is 1 and the max length is 3. The 
type of value and min length are used in compute matching 
degree which are mentioned in next section, and the max 
attribute is used to determine the number of renamed key in 
confused key.  
We can obtain the path of the document through 
document-tree.Privacy method would hold the path when we 
split an attribute. 
III. MATCHING DEGREE 
 We have defined the basic privacy data protection 
method for document-oriented database. The attacker can’t 
obtain tenants’ privacy data directly after split value and 
confused key, but they still could get tenants’ privacy 
information through piece together and specialized 
knowledge. For example, although it has split attribute SSN, 
if the attacker has already known the value of the first two 
field, they only need try two possible way that must contains 
tenants’ privacy data. The specialized knowledge reduces the 
level of tenants’ privacy data protection very much. 
Therefore, we present the definition of matching degree.  
A. The Knowledge of Attacker 
We give the definition of the knowledge of attacker: 
Definition 2, Awareness Expression(AE), express the 
knowledge of the attacker for a certain attribute, 
AE = (Vr	 ? Vr	 ?  ? Vr	) ? (Vr	? ? Vr	? 
 ? Vr?)     (0 ≤ j < k ≤ n ? 1) 
, where item Vr	  represents the segmentation that attacker 
knows the location of it that we denominate as known 
segmentation; item Vr?  represents the location of a 
segmentation that attacker cannot ensure that we denominate 
as suspicious segmentation. The knowledge of the attacker is 
the combination of all the known segmentation and a certain 
suspicious segmentation. 
Take the phone number as an example, The top numbers 
usually signify the regions; it is easy to distinguish through 
the yellow pages. The attacker could position the order of the 
early segmentations by the knowledge of phone number and 
these segmentations are known as segmentation. The 
segmentations which other attackers can’t make sure their 
order are suspicious segmentation. 
After defining the knowledge of the attacker we can 
define privacy leakage exponent. Privacy leakage exponent 
is the indicator to measure the level of the privacy protection 
of our architecture. 
Definition 3, Privacy Leakage Exponent (PLE), 
PLE =
 ∑|Vr	| + 1
 ∑|Vr	| + ∑|Vr?| ? 100 
, the lower the PLE is, the harder for attacker to achieve 
tenants’ privacy data. 
B. The Definition of Matching Degree 
Definition 4, Match Degree (MD), expresses the 
closeness degree of two attribute. For matching attribute ? 
and matched attribute ?, 
MD = (T ? T)
 l
 l
 
 , ? is privacy attribute of tenant, T expresses the type of the 
attribute, then we assume only two types of the attributes 
which are number and string; ?  expresses the minimum 
length of the attribute. Attributes can only match with the 
same type and the MD of attributes with different types are 
20
zero. The lengthier the matching attribute than the matched 
attribute, the higher MD. E.g. the MD of attributes SSN and 
firstname is 0. 
Definition 5, Matching Split Policy, for the attribute ? of 
tenant, find attribute ?  with max MD, and split ?  and ? 
together, get n and m segmentations were the matching split 
policy. 
The matching split policy can ensure the PLE less than 
()
 (	)  if the attacker only have the knowledge of one 
attribute. 
Prove, assume attacker has specialized knowledge of an 
attribute of tenants, if we split this attribute to n 
segmentations, and split the matching attribute to m 
segmentations, then according to the definition of AE, the 
attacker could mostly certain n-2 known segmentations, in 
other words, there are less than m+2 suspicious 
segmentations. According to the definition of MD, the max 
PLE of tenant is ()
 	
 . As m = MD  n, so the PLE of 
tenant is less than ()(	) . 
There are two method of split value, split fixed length 
and split fixed segmentation number. Split fixed length 
means the segmentations length were same for a certain 
attribute. Split fixed segmentation number means the 
segmentations number were same for all the attributes. We 
adopt fixed length split in our architecture because it can 
produce the best possible results within matching degree. 
C. Matching Policy Algorithm 
We have present matching degree and matching spilt 
policy which can reduce the possibility of the leakage of 
tenants’ data. We present algorithm about achieve matching 
policy. This algorithm can get the optimum matching 
attribute of the protected attribute. 
We compute the matching degree of attributes through 
document tree. For the attribute that need achieve matching 
attribute, the algorithm traverse all leaf node from it and 
compute the matching degree with it. The attribute with max 
matching degree will be found and we will hide the name of 
the two attributes and send their path in matching policy. The 
algorithm would traverse the document tree twice and the 
time complexity is O(n). 
TABLE I.  MATCHING POLICY ALGORITHM 
Algorithm 
input: Document Tree(DT)?privacy attribute A 
output: privacy policy 
1.  find privacy attribute A in DT 
2.  IF can’t find A THEN 
3.     RETURN 
4.  END IF 
5.  FOR EACH node in DT 
6.     compute Matching Degree with A 
7.  END FOR 
8.  find maximum Matching Degree attribute B 
9.  IF B has hided THEN 
10.
     
KANsplitValue(A); 
11.    save A’s fullname in KA 
12.    anonymity A’name in DT 
13.    RETURN KA 
14. ELSE  
15.   KANsplitValue(A);KBNsplitValue(B); 
16.  
  
save A and B’s fullname in KA and KB 
17.   anonymity A and B’name in DT 
18.   RETURN KA and KB 
19.END IF 
The attribute is anonymous when it is split in the 
algorithm because the document tree is public, but the 
location and name of the protected attributes are private. We 
don’t hide other properties of attribute when an attribute is 
anonymous. 
It is possible that the protected attribute is the matching 
attribute of other attribute, or the found matching attribute 
has been becoming matching attribute of other attributes. We 
call these scenarios as multi-matching and the algorithm only 
needs split the attribute not anonymous. 
IV. PRIVACY PROTECT ARCHITECTURE 
The early chapters describe the method to achieve 
privacy protection policy, and the policy itself also becomes 
a sensitive data. Especially it has fatalness of leakage when 
the privacy policy and the protected data are saved together. 
We present document-oriented database privacy protection 
architecture to prevent that. 
The architecture has two types of servers: P-server and S-
 servers. S-servers store protected data only, whereas P-server 
stores tenants’ policy, receives incoming operations, and 
verifies the tenant’s identity and translates the operation 
according to the policy. P-server can only receive and 
translate tenants’ operation request, and cannot send 
operation request itself. 
R/Ugtxgt
 Translate 
Module
 Policy Store 
Module
 U/Ugtxgt
 Identity Verify 
Module 
Vgpcpvu
 Fcvcdcugu
  
Figure 1.  Privacy Protect Architecture 
Tenants only interact with P-server and the encrypted 
policy of tenants is stored in P-server. Tenants own the secret 
key and would send the secret key at the request of the 
operation. P-server deciphers tenant’s policy through the 
secret key. All of these are in memory and are not persistent. 
When tenants want to insert data, they will send the 
request which contains tenant’s identity information ID(T), 
tenant’s secret key PK and the saved operation request 
21
op(< K, V >< K, V >< K, V >) . The P-server 
verifies tenant’s identity, then gets tenant’s policy 
K[K!, K!  ], K[K!, K!  ]  through deciphering 
function D("#,#) , and translates module split the data to 
op(< K!, V! > < K!, V! >  , < K!, V! ><
 K!, V! >  , < K, V >)  and sends it to S-server. S-
 servers receive the operation request and save the data. 
V. EXPERIMENT 
A. Experiment Environment 
The experiment compares the efficiency of CRUD 
operation when using architecture with not using it. Besides, 
it verifies the query efficiency with different split factor. We 
use mongoDB 2.2[10] as the test database and deploy it on 
three servers with two 1.80GHz quad-core CPU, 8GB 
memory and 1TB storage space. The operation system is Red 
Hat Enterprise Linux6.2. The scale of the test dataset is 100w. 
It is possible that the protected attribute is the matching 
attribute of other attribute, or the found matching attribute 
has been becoming matching attribute of other attributes. We 
call these scenarios as multi-matching and the algorithm only 
needs split the attribute not anonymous. 
B. Efficiency of CRUD Operation 
The experiment has built three database. Database A 
stores raw data; database B protects attribute data_date and 
the coll_time becomes matching attribute; database C 
protects attributes data_date and coll_time and coll_time 
becomes the multi-matching attribute. All the operation of 
the three databases is same in the experiment. The results are 
shown as figure 2. 
 
Figure 2.  CRUD Operation (ms) 
For the insert operation, we insert same 100w records 
into the database respectively and we could observe that no 
more than 5% is affected by our architecture. For the query 
operation, the three database return same result set, but the 
efficiency of operation would go lower along with the 
number of protected attribute. The operation time of database 
C has almost increased 20% compared with the time of 
database A. While for the update and delete operation, the 
architecture almost does not affect their effiency. 
C. Split Factor 
The experiment has verified the query efficiency with 
different split factor and has built three databases. Database 
A stores the raw data; database B and D protect attribute 
data_date and the coll_time becomes matching attribute. 
Database B split the attribute with 4 bytes a key or rather 
split factor is 4 and database D’s split factor is 8. All the 
operation of the three databases is same in the experiment. 
The results are shown as figure 3. 
 
Figure 3.  Efficiency of Split Factor?ms? 
We can see from the result of experiment that the split 
factor has affected on insert and query operation. Especially 
for the select operation, the operation time of database D has 
almost increased 25% compared with the time of database A, 
while for the insert operation the effect is less than 10%. We 
need consider the executing efficiency and the protection 
level in product environment. 
ACKNOWLEDGMENT 
This research was supported by the National Natural 
Science Foundation of China under Grant No. 61272241, the 
Natural Science Foundation of Shandong Province of China 
under Grant No. ZR2010FQ026, Independent Innovation 
Foundation of Shandong University under Grant 
No.2012TS074. The National Key Technologies R&D 
Program(2012BAH54F04), Shandong Province Independent 
Innovation Major Special Project(2013CXC30201) 
REFERENCES 
 
[1] Fay Chang, Jeffrey Dean, Sanjay Ghemawat, Wilson C. Hsieh, 
Deborah A. Wallach, Mike Burrows, Tushar Chandra, Andrew Fikes , 
and Robert E. Gruber. Bigtable: a distributed storage system for 
structured data. In OSDI ’06: Proceedings of the 7th symposium on 
Operating systems design and implementation, pages 205–218, 
Berkeley, CA, USA, 2006. USENIX  Association. 
[2] http://en.wikipedia.org/wiki/Document-oriented_database Document-
 oriented database. 
[3] Q. Liu, G. Wang, and J. Wu, “An Efficient Privacy Preserving 
Keyword Search Scheme in Cloud Computing,” in Proceedings of the 
2009 International Conference on Computational Science and 
Engineering - Volume 02, 2009, pp. 715-720. 
[4] S. Kamara and K. Lauter, “Cryptographic cloud storage,” in 
Proceedings of the 14th international conference on Financial 
cryptograpy and data security, 2010, pp. 136-149. 
[5] V. Muntés-Mulero and J. Nin, “Privacy and anonymization for very 
large datasets,” in Proceedings of the 18th ACM conference on 
Information and knowledge management, 2009, pp. 2117-2118. 
[6] Z. ShuiKang, L. Feng, T. Yufei and X. Xiaokui,, “The summarize 
Facing database application in privacy protectio,” Chinese Journal of 
Computers, vol. 32, no. 5, pp. 847-863, 2009. 
[7] V. Ciriani, S. D. C. di Vimercati, S. Foresti, S. Jajodia, S. Paraboschi, 
and P. Samarati, “Fragmentation and Encryption to Enforce Privacy 
in Data Storage.,” in ESORICS, 2007, vol. 4734, pp. 171-186. 
[8] G. Aggrawal, M. bawa, P. ganesan, H. Garcia-Molina, K. Kenthapadi, 
R. Motwani, U. Srivastava, D. Thomas and Y. Xu. Two can keep a 
secret: A distributed architecture for secure database services. In 
Conference on Innovative Data Systems Research, 2005. 
[9] K. Zhang, Q.Z. Li and Y.L. Shi. Research on Data Combination 
Privacy Preservation Mechanism for SaaS. Chinese Journal of 
Computers, 2009. 
[10] http://www.mongodb.org/  MongoDB 
22
