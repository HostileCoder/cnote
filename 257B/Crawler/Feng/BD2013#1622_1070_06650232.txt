Using of Cloud Computing, Clustering and 
Document-oriented Database for Enterprise Content 
Management 
 
Juris Rats 
Rix Technologies 
Riga, Latvia 
Gints Ernestsons 
Clusterpoint 
Riga, Latvia 
 
 
Abstract—The paper deals with NoSQL Document-oriented 
database technology and its implementation in Enterprise 
Content Management area. The results of performance tests of 
the SQL and NoSQL solutions and suggestions on the conceptual 
architecture of the ECM system based on NoSQL Document-
 oriented database are provided. Using of cloud computing, 
clustering, data ranking and other Big Data related technologies 
is discussed. 
Keywords— Big Content, Big Data, cloud computing, 
clustering, data ranking, document-oriented databases, ECM, 
NoSQL 
I.  INTRODUCTION 
As stated in the recent report of the U.S. Chamber of 
Commerce [1] the Big Data market is expected to grow to 
$16.9 billion in 2015. IBM’s statement [2] „Every day, we 
create 2.5 quintillion bytes of data — so much that 90% of the 
data in the world today has been created in the last two years 
alone” might be questioned by the skeptics. Still there is no 
doubt that the Big Data is already an integral part of the global 
economy, which could not function without it anymore. This 
extremely rapid growth of the data amount and complexity has 
introduced new dimensions in data processing that are out of 
the comfort level for the old one-size-fits-all database products 
and that has led to the introduction of new ones – dedicated for 
use in separate areas – transaction processing, data warehouses, 
stream procession, data aggregation  etc. Our area of interest is 
Enterprise Content Management (ECM) and, in particular, 
Document Management, that is influenced heavily by the rapid 
growth of data amount as well. Currently we run ERDF 
(European Regional Development Fund) funded research 
project to evaluate and compare the performance on large 
document databases of our in-house ECM system Namejs and 
the NoSQL database system Clusterpoint, and design the 
architecture of the new NoSQL based ECM system. 
Chapter II examines the state of the art of the Big Data 
related development in ECM area. 
Chapter III and chapter IV briefly describes the two 
platforms used for performance tests - SQL based Namejs and 
NoSQL Document-oriented Clusterpoint. 
Chapter V discusses the important differences between 
SQL and NoSQL platform. 
Chapter VI summarizes  the results of performance tests 
and advantages of NoSQL for ECM. 
 Chapter VII details the concepts of the proposed ECM 
architecture. 
Conclusion outlines the results and suggests the direction 
for the future work. 
II. ECM AND BIG DATA 
Enterprise content management (ECM) is “the 
technologies, tools, and methods used to capture, manage, 
store, preserve, and deliver content across an enterprise” [3].  
ECM covers a wide area of functionality [4][5][6]. Fig. 1 
[7] depicts the traditional application areas: 
• DM or Document Management; 
• Collab (Collaboration of supporting systems, group-
 ware); 
• WCM or Web Content Management (including portals); 
• RM or Records Management (archive and filing 
management systems); 
• Workflow/BPM or Business Process Management. 
Traditionally ECM systems use SQL databases for 
persistence. Lately this has started to change and some players 
in ECM market (e.g. Alfresco [8]) are already looking in 
direction of NoSQL databases. Recently (July 24, 2013) Aegif 
Corporation announced the release of CouchDB based ECM 
The project is funded by the European Regional Development Fund.
  
Fig. 1. Enterprise Content Management 
ISBN: 978-1-4673-5256-7/13/$31.00 ©2013 IEEE                                                                                            72
server NemakiWare [9]. 
Big Data is both an issue and an opportunity for ECM 
because using large sets of data and sophisticated methods of 
analysis can lead to enhancement of the existing products and 
services. Still Big Data means a lot of change – “you cannot 
add earthquake to your line of employee relocation options and 
tools. No doubt an earthquake will move people but it probably 
will not relocate them as you planned” [10]. Researchers talk 
about significant changes to the architecture of ECM systems. 
To stress the importance of these changes Gartner introduced 
the new term – Big Content [11] that marries Enterprise 
content with Big Data. Big Content means that an enterprise 
content should be augmented with public information [11] and 
that it gets new qualities, like being human (speaks with a 
conversational voice), simple, visual, conversational (supports 
comments, reviews, ratings etc.) and organic (published fast, 
often in response to unpredictable moments) [12]. 
III. NAMEJS 
Namejs [13] is a MS SQL based ECM system fit both for 
public bodies (like municipalities) and privately owned 
companies.  The system provides document registration and 
management within one or several organizations, maintenance 
of different types of documents, files and related information 
existing in the organization, as well as business process 
automation. 
Namejs is implemented in more than 30 municipalities in 
Latvia as well as in number of other organizations. We are not 
confident though that the system is able to cope with really 
large data amounts. We had to develop from scratch a separate 
Namejs-like ECM system for the Latvian Ministry of 
Agriculture, for example, because Namejs did not qualify to 
the customer’s requirements, in particular, for the data volume 
to be processed. The system for Ministry of Agriculture is 
based on MS SQL as well but uses a replicated Clusterpoint 
database to provide an acceptable response times for full-text 
search. 
We consider that the platform shift might be necessary for 
our ECM system and Clusterpoint is one of the candidates for 
the new platform. Our research project should help us to learn 
if the Clusterpoint fits as the technology platform for our ECM 
product and to develop the main architectural concepts for the 
system in question. 
IV. CLUSTERPOINT 
Clusterpoint DBMS (DataBase Management System, see 
Fig. 2) [14][15] is a document-oriented shared nothing NoSQL 
database that uses sharding (database horizontal partitioning 
across multiple instances of the database schema) to split the 
data volume and computational load over potentially multiple 
servers. 
A database (or store as it is called by the authors of 
Clusterpoint) can be sharded by document id or using a hashing 
algorithm. Shards are distributed across nodes on either 
physical servers or virtual machines in a shared-nothing 
architecture. The same Clusterpoint software image is installed 
on each node so the cluster operates in multi-master mode i.e. 
all nodes are equal and can handle all the operations [14]. 
A Clusterpoint database comprises one or more stores. 
Each store contains a repository and its associated index. The 
repository contains all data objects and is written back to disk. 
The index contains information for all of the fields that the user 
has asked to be indexed (regardless of data type). The index is 
written to disk for persistency but is partially cached in 
memory for performance [14]. 
Each Clusterpoint store is a collection of XML documents. 
The XML structure can be defined by user when creating the 
data store and can contain as subparts the document as well as 
metadata (Title, Author, Release Date, Rate etc.) fields. Data is 
stored and retrieved through an API which supports a full range 
of CRUD (Create, Read, Update and Delete) operations and 
provides both Google-like search and SQL-like query [14]. 
V. NOSQL VERSUS SQL 
ECM mainly stores unstructured information (almost 85% 
of all the data in 2011 was of this type according to [16]) like 
e-mails, word processing documents, digital images and PDF 
files. SQL databases are not well suited for management of 
such kind of data, traditionally it “exists outside the confines of  
databases or systems with fixed routines and pathways, such as 
enterprise resource planning systems and workflow 
applications“ [3]. The content management (document and 
workflow management in particular) in case of SQL database 
is based on extracting (or manually appending) to the 
document of some metadata (e.g. author, document type, 
keywords etc.) and using that metadata for the management 
purposes. The rest of the content is stored in a content 
repository so that its semantic is not available for the database 
system and cannot be used for e.g. workflow management. 
SQL database systems need metadata in particular to 
facilitate search functionality. The search is based on the 
metadata. If user needs more – he may get a full text search but 
this does not work particularly well in case of traditional SQL 
databases [17]. 
The NoSQL world provides another option – Document-
 oriented databases that store the document as a whole (e.g. as 
xml). Examples are MongoDB [18], CouchBase [16], [19] and 
Clusterpoint DBMS[14].  
Unlocking the potential of Big Data may bring the 
following benefits for ECM and Document Management in 
particular: 
 
Fig. 2. Architecture of the DBMS Clusterpoint 
ISBN: 978-1-4673-5256-7/13/$31.00 ©2013 IEEE                                                                                            73
• Usage of new data sets like voice messages, text 
messages, videos, e-mails, social networks, etc. may 
result in improved business processes and more 
efficient way of content management, assuring that 
more information is available to make reasonable 
decisions about what workflow path to follow and what 
user to assign for the next action on the given 
document; 
• ECM systems may profit from benefits of cloud 
computing; this would allow to move from a paradigm 
of separate ECM databases of the organizations 
(interchanging the documents via e-mail, for example) 
to the cloud based merged databases; 
• usage of clustered cloud based platform addresses the 
scalability issues allowing to seamlessly add new nodes 
to the infrastructure in case of rapid growth of data to be 
processed; 
• clustered infrastructure may be used to host several 
replicas of the data and therefore insure acceptable level 
of data availability and uninterrupted functioning of the 
system in case of hardware or software crash; 
• ranked search may be used to provide acceptable 
response times when millions of documents must be 
processed to find the relevant ones for the customer 
request. 
VI. PERFORMANCE TESTS 
Series of performance tests were executed inside our 
project comparing the response times of Clusterpoint DBMS 
versus SQL based Namejs database. The performance of 
document loading into database, document indexing and search 
was measured for both platforms. The performance was 
measured on identical hardware configuration for both 
platforms for the main data corpus of 13 million documents 
(copy of Wikipedia english version [20]). SQL platform was 
tested in addition on 1 million, 100 000 and 10 000 document 
databases, while NoSQL database – on 1 million document 
database. 
A. Database scaling 
The results of tests show that performance of the NoSQL 
solution does not degrade with the increase of the database 
amount. The same concerns performance tests for document 
loading and indexing in case of SQL platform – the 
performance does not degrade significantly.  
The different story is about the search. We learned that the 
performance of the SQL database on the main data corpus is 
unacceptable for the majority of the tests. The response time of 
full text ad-hoc search against randomly selected words 
degraded to as much as 40 minutes and more. The response 
time of the same search requests was less than a second in case 
of NoSQL database. The degradation of the performance of the 
SQL based solution (in comparison to the NoSQL) starts to 
show up as soon as the database reaches amount of about 
100 000 documents. 
B. Document loading 
The loading times (Fig. 3) of the NoSQL database are 
better because it stores a document as a whole while SQL 
application has to split the data in several (5-10 for a typical 
case) data and index tables which results in more disk access 
operations. 
C. Document indexing 
According to the performance tests document indexing on 
NoSQL is about 8 times faster than on SQL. SQL reindexes 
about 66MB of documents per second while NoSQL – 550MB. 
D. Document search 
Fig. 4 shows the average search time of the word “tree”. 
The search time of the SQL solution for the 13 million 
document database is not shown - it is more than 40 minutes. It 
has to be stressed that we are talking about search of relatively 
small set (10-20) of highly relevant data. We are not 
considering there the search of large volumes of data (e.g. for 
report processing). 
 
Fig. 3. Average document loading time (millisec) 
 
Fig. 4. Average search time (millisec) for word “tree” 
 
ISBN: 978-1-4673-5256-7/13/$31.00 ©2013 IEEE                                                                                            74
VII. ARCHITECTURAL CONCEPTS 
We propose four level architecture of the ECM system. 
• User interface layer (client software on PC, smartphone, 
tablet). 
• Business function or middleware layer (ECM business 
functionality). 
• NoSQL Document-oriented DBMS layer (implements 
data clustering, replication, indexing, search, retrieval). 
• Infrastructure layer (operating system, visualization, 
network and data transfer, event journaling, e-mail, file 
and FTP services, utilities). 
The DBMS layer in our architecture is the one that 
seamlessly implements clustering and parallel processing 
allowing developers of the business layer to concentrate on 
design and implementation of the business process 
functionality. The DBMS should implement the following 
important for Document management architectural concepts. 
• Shared nothing architecture, this allows database to be 
split into shards and add new nodes to a cluster 
effortlessly. 
• Several replicas of the database may be created and 
maintained. This ensures the data availability – if one of 
the replicas goes down the other replica(s) may be used.  
• Inverted index and ranking is used to determine 
document’s relevance against the search request. The 
rankings can be configured flexibly, particularly by 
editing the ranking policies in a data store ranking 
policy file. 
Maximum flexibility should be supported for location of 
the shards and replicas on the cluster nodes. This is supported 
by Clusterpoint DBMS as illustrated in the Fig. 5 – shards of 
Articles are located on nodes x and y, shards of the replica of 
Articles – on nodes y and z [14]. If node y goes down we still 
have all the data available. 
A. Search in a shared nothing data store 
The search request is forwarded for parallel execution to all 
shards of the data store (if some of the primary shards are 
down, a replica is involved instead). Results of the search are 
transferred back to the originating shard which joins them and 
presents to the user. In the case of the ECM system that means 
that with the increase in data amount new shards may be added 
to the database to avoid the performance degradation. This 
means as well that the business layer of the application must 
not be concerned about how to split the documents between 
shards, which shard to address in a search request or how to 
merge the results – DBMS is providing means to configure this 
and takes responsibility of the process. 
B. Document ranking and search 
There are three basic information ranking mechanisms in 
the Clusterpoint DBMS [15]: 
• By value of document’s metadata field <rate>, assigned 
to each document before storing it; 
• By value ranges assigned to the document’s metadata 
fields (controls the relevant importance of one metadata 
field against another –  hence document that has the 
searched term in, for example, “title” field is considered 
to be more relevant that one with the searched term in 
“comment” field); 
• By frequency and position of search terms within 
textual content of the document or metadata fields – 
higher ranks may receive, for example, document 
containing more occurrences of the searched term; 
document with search term occurrence closer to the 
start of document or closer to other searched terms.  
The ranking policy is defined when creating the data 
storage. It influences the sort order of the returned result set. 
This means that when creating the ECM for a particular 
domain the ranking policy may be defined to assure the most 
relevant results are returned in the first page. 
C. Adding new documents 
A new document is added instantly to one replica of one of 
the shards. The DBMS decides what shard must take care of 
the current document; later on it replicates the document to 
other replicas. In case of ECM this means that the new 
document will be stored in database even if some of the 
replicas are not available. Replicas may be out of sync for short 
periods of time but the DBMS makes sure they are in sync 
again.  
D. Indexing 
Indexing is performed when the new document is added to 
the database or the document is updated. In relation to ECM we 
should consider two kinds of functionality – creating of an 
index record and creating of metadata. Both are used when 
searching for relevant data. A structure of the metadata must be 
decided upon creation of the database structure. The metadata 
of the document must be provided to DBMS from the business 
function layer (extracted from the document automatically or 
with assistance of the user). The index data is extracted from 
the document by DBMS. To ensure acceptable performance the 
items that are searched must be indexed. In case of ECM the  
Fig. 5. Sharding and replication 
ISBN: 978-1-4673-5256-7/13/$31.00 ©2013 IEEE                                                                                            75
searchable items are words hence the index consists of words 
that are supplemented with links to documents containing that 
word. 
E. Clustering 
Obvious advantage of the shared-nothing document-
 oriented database (like Clusterpoint DBMS) is that it scales 
easily and is convenient for clustered computing. The reason is 
that every data item (e.g. document) here is stored as a whole 
(which makes the easy task to add new cluster nodes to the 
system and split the items through the nodes), in contrary to 
SQL database where the item data is split in several tables. 
Thus the normalization of data which is the very fundament of 
relational databases turns out to make the platform not suited 
for the clustering. 
VIII. CONCLUSION 
NoSQL document-oriented ready for clustering DBMS 
(like Clusterpoint) seems a reasonable platform for ECM in the 
Big Data world. Our performance tests show that starting from 
the 100 000 document database the selected NoSQL platform 
outperforms the SQL platform for the tasks typical for 
Document management. With the increase of amount the 
performance of SQL solution degrades quickly and the system 
definitely cannot cope with a 13 million document database. 
The performance of NoSQL solution, in contrary, stays at the 
reasonable level even without the use of clustering.  
For the further increase of data amount Document-oriented 
storage and shared nothing architecture provides easy scaling 
through adding of new cluster nodes. The clustered processing, 
usage of inverted indexes and ranked search ensures that the 
response times stay at an acceptable level even for very large 
amounts of data. 
The main direction of the future work is the further 
elaboration of the ECM architecture discussed in this paper. 
REFERENCES 
[1] Leslie Bradshaw. “Big Data and What it Means. Issue #7.” Internet: 
http://emerging.uschamber.com/library/2013/05/big-data-and-what-it-
 means, May 28, 2013 [July 9, 2013]. 
[2] “Big Data at the Speed of Business. What is Big data?” Internet: 
http://www-01.ibm.com/software/data/bigdata/, [July 10, 2013]. 
[3] Barclay T. Blair. “An Enterprise Content Management Primer.” 
Information Management Journal, 38(5), pp. 64-66, September/October 
2004. 
[4] Philip C. Bantin. “Enterprise Document Management and Content 
Management Systems” in Understanding data and information systems 
for recordkeeping. New York, NY: Neal-Schuman Publishers, 2008, 
pp. 129-148. 
[5] Oda Rønholt Nilsen. “Enterprise Content Management in Practice.” 
Master thesis. University of Agder, Kristiansand, Norway, 2012. 
[6] Joachim Korb, Stephan Strodl. “Digital preservation for enterprise 
content: a gap-analysis between ECM and OAIS.” 7th International 
Conference on Preservation of Digital Objects (iPRES2010), September 
2010, Vienna, Austria, pp. 221-228. 
[7] U. Kampffmeyer. “Enterprise Content Management ECM. White Paper, 
Project Consult Unternehmensberatung GmbH, Hamburg, 2006. 
[8] D. Caruana, J. Newton, M. Uzquiano, M. Farman, K. Roast. 
Professional Alfresco: Practical Solutions for Enterprise Content 
Management. Wrox professional guides. Wiley, 2010, 514 pp. 
[9] “Aegif Releases Scalable ECM Server NemakiWare.” Internet: 
http://finance.yahoo.com/news/aegif-releases-scalable-ecm-server-
 113000807.html, July 24, 2013 [July 31, 2013]. 
[10] Pam Baker. “iNSIDER Perspective | Big Data: Boon or Bust for ECM?“ 
Internet: http://www.idatix.com/insider-perspective-big-data-boon-or-
 bust-for-ecm, [July 24, 2013.] 
[11] Darin Stewart. “Big Content: The Unstructured Side of Big Data.” 
Internet: http://blogs.gartner.com/darin-stewart/2013/05/01/big-content-
 the-unstructured-side-of-big-data/, May 1, 2013 [July 22,2013]. 
[12] Jake Sorofman. “Forget Big Data—Here Comes Big Content.” Internet: 
http://blogs.gartner.com/jake-sorofman/forget-big-data-here-comes-big-
 content/ , April 12, 2013 [July 22, 2013]. 
[13] “Namejs, Document Management Solution. The chaos replaced by order 
(in Latvian).” Internet: http://www.namejs.lv/, [April 19, 2013]. 
[14] “Clusterpoint. Architecture.” Internet: 
http://www.clusterpoint.com/Product/nosql-database-architecture/, [May 
9, 2013]. 
[15] “Clusteproint. Indexing.” Internet: 
http://www.clusterpoint.com/Product/index-ranking/, [May 9, 2013]. 
[16]  “Couchbase. Why NoSQL?” Internet: http://www.couchbase.com/why-
 nosql/nosql-database, [June 11, 2013]. 
[17] Andrew C. Oliver. “10 things never to do with a relational database.” 
Internet: http://www.infoworld.com/d/application-development/10-
 things-never-do-relational-database-206944, November 15, 2012 [July 
11, 2013]. 
[18] “Introduction to MongoDB.” Internet: 
http://www.mongodb.org/about/introduction/, [July 12, 2013]. 
[19] “Couchbase Server Under the Hood. An Architectural Overview.” 
Internet: 
http://www.couchbase.com/sites/default/files/uploads/all/whitepapers/C
 ouchbase_Server_Architecture_Review.pdf, [June 11, 2013]. 
[20] “English Wikipedia dumps.” Internet:  
http://download.wikimedia.org/enwiki/latest/enwiki-latest-pages-
 articles.xml.bz2, April 4, 2013 [April 26, 2013].  
 
 
ISBN: 978-1-4673-5256-7/13/$31.00 ©2013 IEEE                                                                                            76
