Scalable and Trustworthy Cross-Enterprise WfMSs by Cloud Collaboration 
Gwan-Hwan Hwang, Yi-Chan Kao, and Yu-Cheng Hsiao 
Department of Computer Science and Information Engineering  
National Taiwan Normal University 
Taipei, Taiwan 
ghhwang@csie.ntnu.edu.tw 
Abstract—Establishing scalable and cross-enterprise workflow 
management systems (WfMSs) in the cloud requires the 
adaptation and extension of existing concepts for process 
management. This paper proposes a scalable and cross-
 enterprise WfMS with a multitenancy architecture. Especially, 
it can activate enactment of workflow processes by cloud 
collaboration. We do not employ the traditional engine-based 
WfMSs. The key idea is to have the workflow process instance 
to be self-protected and does not need a workflow engine to 
secure the data therein. Thus, the process instance discovery 
and activity execution can be fully independently and 
distributed. As a result, we can employ the data storage system, 
BigTable, to store the process instances, which may form a big 
data. The applying of element-wise encryption and chained 
digital signature makes it satisfy major security requirements 
of authentication, confidentiality, data integrity, and 
nonrepudiation.  
Keywords- Cloud, Multitenancy, WfMS 
I. INTRODUCTION
 Workflow management systems (WfMSs) are software 
systems that support coordination and cooperation among 
members of an organization whilst they perform complex 
business tasks [1], [2], [3]. Business tasks are modeled as 
workflow processes that are automated by the WfMS. The 
workflow model (also referred to as the workflow process 
definition) is the computerized representation of the business 
process that defines the starting and stopping conditions of 
the process, the activities in the process, and control and data 
flows among these activities. An activity is a logic step 
within a workflow. The activities in a process are usually 
organized into a directed graph that defines the order of their 
execution, where nodes and edges in the graph represent 
activities and control flow, respectively. A workflow process 
instance represents a state of execution of a workflow 
process definition by the WfMS, and is usually controlled by 
the workflow engine. 
A popular way to construct WfMSs in the cloud is to 
deploy workflow engines in the cloud computing 
infrastructure; examples of this approach include 
RunMyProcess [4], Visual Workflow [5], Aneka [6], Azure 
Services Platform [7], and Google App Engine [8].
 Centralized WfMSs focus on executing workflow processes 
within a single organization at one location in a single 
                                                          

  The corresponding author is Gwan-Hwan Hwang (e-mail: 
ghhwang@csie.ntnu.edu.tw) 
workflow engine (see Figure 1A). A workflow process is 
executed by a single workflow engine that communicates 
with all of the participants in the activity.  
To fit with the rapidly changing business environment 
and with the highly varying load of e-business applications, 
WfMSs should be scalable and should provide the required 
flexibility to cope with peaks in the system load and 
distributed environment. Consider the working model of the 
engine-based distributed WfMS shown in Figure 1B [9], [10],
 [11], [12]. The workflow process has six activities 
(numbered A1–A6) that are designed to be executed in three 
workflow engines deployed at three locations. Establishing 
multiple workflow engines provides the abilities to (1) 
balance the load among the workflow engines as the number 
of users increases [13] and (2) reduce the communication 
time between the participants in the activity and the 
workflow engines since the latter are close to the user (in 
terms of the network transmission). 
A1
 A2 A3
 A6A4 A5
 Workflow engine 2
 Workflow engine 3
 Workflow 
engine 1
 Start of 
workflow
 End of 
workflow
 Activity Flow control
 edge
 Participant
 Workflow
 engine
 Public 
network
 Public 
network
 Public 
network
 Process instance
 migration
 User 
communication
 A1
 A2 A3
 A6A4 A5
 (A)
 (B)
 Workflow engine
 Figure 1. Working models of the centralized WfMS and the ordinary 
engine-based distributed WfMS. 
The engine-based distributed WfMS can be used to build 
up the cross-enterprise WfMS that controls the execution of 
cross-enterprise workflow processes. The participants of 
activities in a cross-enterprise workflow process belong to 
different companies or organizations. These participants 
usually connect to the workflow engines in their own 
companies or organizations due to authentication 
requirements. The engine-based distributed WfMS suffers 
2013 IEEE International Congress on Big Data
 978-0-7695-5006-0/13 $26.00 © 2013 IEEE
 DOI 10.1109/BigData.Congress.2013.19
 70
from serious security problems because the workflow 
process instances might be transmitted on a public network 
such as the Internet. Therefore, the execution results of 
activities might be eavesdropped or malicious users might 
intercept the process instances and then alter their contents 
before passing them on to the next workflow engine. 
Although the above two problems can easily be solved by 
applying common methods used to secure electronic 
transactions with secure sockets, such as the SSL (Secure 
Sockets Layer) protocol [14], such methods still cannot 
guarantee the nonrepudiation requirement. That is, it is 
difficult for the system to prevent a participant from being 
able to deny what he/she had done in an activity.  
One of the features of the engine-based WfMSs (either 
centralized or distributed) is that the workflow engines must 
be managed by administrators in this model, since the 
workflow process instances are usually stored in them or 
database servers close to them [4], [5], [6], [7], [8]. The user 
communicates with the administrated workflow engines to 
participate in the execution of the WfMS via the network. 
The security of a process instance is assured by the server 
rather than by the process instance itself. The workflow 
engines in cross-enterprise WfMSs may be administrated by 
different companies or organizations in a distributed network 
environment, and the overall security is insufficient if the 
security mechanism is broken in any one of the servers that 
may access or store the process instance. The question then 
arises about how to design a trust model for workflow 
engines in cross-enterprise (or cross-organization) WfMSs. 
Multitenancy refers to a principle in software architecture 
where a single instance of the software runs on a server, 
serving multiple client organizations (tenants) [15]. The 
shared infrastructure changes the underlying economics of 
enterprise applications, letting the vendor maintain a single 
application instance for thousands of customers. In a 
multitenancy cloud environment, multiple vendors, using the 
same infrastructure, can access and share the same resource. 
The multitenancy enables economic pay-as-you-go services 
in nature [16]. There are a number of different methods for 
achieving multitenancy including virtualization or database 
sharing. Virtualization is simply another technology for 
achieving multitenancy, especially for infrastructure as a 
service (IaaS): multiple virtual machines in a single physical 
machine for serving multiple tenancies can be treated as the 
simplest applying of multitenancy. Some cloud systems can 
support more advanced multitenancy architectures such as 
sharing of a database or even sharing of tables in a database 
[17], [18]. With a multitenant architecture, a software 
application is designed to virtually partition its data and 
configuration, and each client organization works with a 
customized virtual application instance. One of the major 
reasons to adopt a multitenancy architecture for cloud 
applications is to achieve high cost efficiencies and can 
deliver low costs. True cloud services all use some mode of 
multitenancy which supports the ability for multiple client 
organizations to share the same applications, data, and/or 
compute resources. The multitenancy architecture fits the 
data sharing requirement for cross-enterprise WfMSs in 
which a single process instance may be accessed by different 
organizations. However, developing a multitenancy WfMS is 
not only for deliver low costs but also for the cross-enterprise 
requirement. Since people from different organizations may 
need to communicate or exchange data to participant in a 
single workflow process in a cross-enterprise WfMS, a 
cross-enterprise WfMS requires more than just multitenancy. 
Cloud collaboration for documents is a newly emerging 
way of sharing and co-authoring documents through the use 
of cloud computing, whereby documents or objects are 
uploaded to a central cloud, where they can then be accessed 
by others, e.g. Google document and Google Calendar  [19],
 [20]. In addition to the characteristics of multitenancy, a 
participant can execute its own task without the interference 
by other participant and can also share data with other 
participant when needs. The execution of a cross-enterprise 
workflow process requires participants from different 
organization to work together and share data according to the 
workflow definition. It motivates us to study how to design a 
cross-enterprise WfMS which can provide workflow 
enactment service by cloud collaboration. 
Applying the engine-based WfMS in a multitenancy 
cloud computing environment increases the security 
problems because the workflow engines are usually installed 
on servers that are not administrated by the company or 
organization that uses them. The issues of trusted execution 
in untrusted cloud infrastructure received much attention 
when cloud computing provided concrete use cases [21]. For 
instance, there are a lot of solutions for untrusted server in 
the cloud storage including replication [22], [23], [24], [25], 
detection of violation [26], [27], and auditing [28], [29]. For 
constructing WfMSs in untrusted cloud infrastructure, in 
addition to the nonrepudiation requirement, the client 
organization may need the system to support secured process 
instance migration and replication in which it can control the 
migration and replication of process instances on its own. In 
this situation, the process instance cannot be bound to a 
specific workflow engine. The security requirements of 
authentication, confidentiality, data integrity, and 
nonrepudiation should still be maintained after process 
instance migration and replication. 
In this paper we propose a secured, scalable, and 
multitenancy WfMS in which it supports workflow 
enactment by cloud collaboration. First, we have to solve 
these security problems in engine-based WfMSs for 
supporting cross-enterprise WfMSs. Second, we assume that 
it is possible that participants of a single workflow process 
come from any organizations and these participants are 
decided dynamically during the life time of the workflow 
process. Therefore, we have to house multiple tenants in the 
same database. The execution of a workflow process is 
actually a kind of cloud collaboration. Third, the large 
number of process instances stored in the system could form 
a big data1
  as the system should serve a huge number of 
client organizations. 
We invented an architecture that we have called the 
Document Routing Architecture for WfMS (DRA4WfMS 
1
  Big data is a collection of data sets so large and complex that it becomes 
difficult to process using on-hand database management tools [30]. 
71
[31]). The DRA4WfMS is called a document-routine system 
because the execution of a workflow process can be fulfilled 
by routing secured process instances among activities 
participants. It is not only a distributed WfMS but also a 
totally engine-less WfMS – the activity execution is not 
controlled by any workflow engine, instead being carried out 
by a software agent in the local computer of the participant. 
The software agent can be located anywhere or be any type 
of computer device. We employ the element-wise encryption 
that is commonly used in XML security [32], [33] and 
propose a way to chain embedded digital signatures for the 
routed documents. This method enables a DRA4WfMS 
document to be secured without requiring an access-control 
server.  
This paper is organized as follows. In Section II we 
present the basic and advanced operational model of the 
DRA4WfMS. The way to apply the DRA4WfMS in the 
cloud computing environment is presented in Section III.
 The way which we apply the big table in DRA4WfMS is 
presented in Section IV. Section V discusses how to 
construct trustworthy DRA4WfMS in untrusted cloud 
infrastructures. Experimental results are given in Section VI.
 Related work and conclusions are drawn in Sections VII and 
VIII, respectively. 
II. OPERATIONAL MODEL OF DRA4WFMS 
The DRA4WfMS is a document-routing-based and an 
engine-less WfMS. Before we explain how the DRA4WfMS 
can be constructed by applying the big table, we first 
introduce why the execution of a workflow process can be 
fulfilled by routing secured process instances among 
activities participants. The DRA4WfMS documents will be 
routed to participants of activities in different locations. 
During the routing, the execution result of each activity will 
be appended to it. Thus, a DRA4WfMS document contains 
static and dynamic information within it. 
AEA AEA 
Start
 Workflow definition Digital signature
 embedded by the 
workflow designer
 A1 A2
 AEA 
A3
 Execution result
 of the activity
 …
 Digital signature
 embedded by a
 workflow participant
 X?A2
 X?A0
 X?A3
 The secured initial
 document 
X?A1
 Figure 2. The basic operational model of DRA4WfMS.  
The static information is actually the initial document. It 
contains the workflow definition as well as a digital 
signature embedded by the workflow designer. This digital 
signature signs the workflow definition in the initial 
document, which is necessary for the participants of the 
activities to verify whether it is a legal workflow process.  
Actually, different portions in the workflow process instance 
may need to be encrypted using different keys since each 
activity may be executed by different participants. It requires 
so-called element-wise encryption [32] ,[33]. An obvious 
way to encrypt an XML document is to employ existing 
cryptography to encrypt an XML document as a whole. The 
receiver of an encrypted XML document then decrypts it 
with the appropriate key and algorithm. However, some 
researchers considered encrypting a whole XML document 
without dividing it up as cumbersome, and consequently 
proposed element-wise encryption that the encryption is held 
at the element level. 
The execution result of each activity is part of the 
dynamic information in a DRA4WfMS document. To fulfill 
security requirements of authentication, confidentiality, data 
integrity, and nonrepudiation, execution results should be 
element-wisely encrypted and digital signatures which sign 
these execution results are embedded.  When the monitoring 
of workflow processes is necessary, some timestamps should 
also be embedded in the DRA4WfMS document. All the 
data items which are appended or embedded into the 
DRA4WfMS document during the execution of the 
workflow process are considered as dynamic information. In 
the follows, we first present the basic operation model and 
then the advanced operational model of DRA4WfMS. 
We show the basic operational model of DRA4WfMS as 
shown in Figure 2. Before the execution of an activity A,
 DRA4WfMS document X is sent to the participant of the 
activity A who employs a software tool called the activity 
execution agent (AEA) to activate the execution of activities. 
First, the AEA parses X  and verifies all the embedded 
digital signatures therein so as to ensure that the workflow 
definition in X is legal and all the stored execution results 
of previously executed activities are valid. Second, the AEA 
checks if the participant is the correct executor of this 
activity. Third, the AEA looks at the requests and responses 
of this activity and shows them to the participant in a 
graphical user interface in which the participant can perform 
the execution of this activity. Fourth, the AEA appends the 
execution result (i.e., response) of the participant to X (the 
resulting document is X
  ). Fifth, the AEA embeds a digital 
signature that signs the execution result of the participant and 
some of the digital signatures embedded in previous 
activities (the resulting document is X ). The encrypted 
execution result and the digital signature consists of the 
characteristic execution result (CER) of activity A. Finally, 
the AEA checks the control flow information defined in the 
workflow definition and forwards X
 
   to the participant (or 
AEA) of the next activity (or activities). 
AEA 
Start
 A1 …
 AEA TFC Server
 A2
 Time stamp
 embedded by the 
timestamp server
 TFC Server
 XitA1
 X?A1 XitA2
 Figure 3. The advanced operational model of DRA4WfMS.  
The advanced operational model shown in Figure 3 is
 actually an improvement of that in Figure 2. The 
DRA4WfMS document processed by an AEA, X
 
 , which 
contains a CER embedded by AEA, is first sent to a 
72
timestamp and flow control server (TFC server), which is 
analogous to a notary public and has legal authority to 
witness the finish time of the activity. Note that a TFC server 
is not a workflow engine as it only embeds timestamps to 
DRA4WfMS documents and helps with their forwarding. 
When the TFC server receives X
 
 , it first checks the digital 
signatures, embeds a timestamp of the time when the TFC 
server processed this document, and embeds a digital 
signature which chains the timestamp to X
 
 . 
In DRA4WfMS, the confidentiality is maintained by the 
element-wise encryption which is specified in the secured 
initial document X
 
 . The execution result embedded in a 
CER must be signed. Illegal alteration of elements in a 
DRA4WfMS document will cause errors when we verify
 digital signatures which sign them. Thus, we can achieve the 
requirement of integrity. A DRA4WfMS document contains 
a lot of CERs. Each CER  has its own nonreputiation scope.
 A nonreputiation scope of  is consisted of a set of CERs 
which are CERs chained by the digital signature within . If 
a CER  is with a nonreputiation scope , then the 
participant which generated the CER  cannot deny having 
received a DRA4WfMS document containing CERs in  and 
accordingly generates . 
AEA A1
 AEA 
A2
 (1) (2)
 (3)
 (4) (5)
 DRA4WfMS documents pool
 DRA4WfMS
 Cloud
 system 
Portal servers
 ……
 (6)
 X?A0
 X?A1 X?A2
 X?A1X
 it
 A1
 XitA2
 Figure 4. Applying the DRA4WfMS in the cloud computing 
environment. 
III. APPLYING THE DRA4WFMS IN THE CLOUD 
COMPUTING ENVIRONMENT
 Figure 4 shows how to apply the DRA4WfMS in the 
cloud computing environment using the advanced 
operational model presented in Section II. A user connects to 
one of the portal servers to access the DRA4WfMS cloud 
system, and that server checks what activities are going to be 
executed by the user. Since the workflow process instances 
are stored as DRA4WfMS documents, the portal server just 
simply sends a copy of the DRA4WfMS document, X
 
 , to 
the participant. The participant employs an AEA to execute 
the activity and generate a DRA4WfMS document, X	

 
 , by 
embedding a CER, and then sends it back to the portal server.
 When an AEA sends the resulting document (X	
 ) to the 
portal server, the portal server verifies it and embeds a 
timestamp into the resulting document and stores X	

 
  in 
the DRA4WfMS documents pool. By checking this 
document, the DRA4WfMS cloud system can inform the 
subsequent participant(s) that s/he(they) is(are) the 
participant(s) of the next activity. 
To start a workflow process, the participant has to 
download a secured initial DRA4WfMS document from the 
DRA4WfMS cloud system. The secured initial DRA4WfMS 
documents can be prepared by the system or uploaded to the 
system by the user. The DRA4WfMS cloud system should 
provide interfaces for users to search and manage 
DRA4WfMS documents. 
An AEA connects to one of the portal servers in the 
DRA4WfMS cloud system. The portal server authenticates 
the ID of the user and then performs the following operations: 
— Search DRA4WfMS documents: The user can 
obtain a list of links of DRA4WfMS documents where s/he 
is one of the participants of the subsequent activities. A very 
similar procedure is used to obtain the TO-DO list in a 
WfMS.  
— Retrieve a DRA4WfMS document: According to 
the search result, the user can retrieve a DRA4WfMS 
document and then execute the activity in an AEA.  
— Store a DRA4WfMS document: The resulting 
DRA4WfMS document produced by an AEA should be 
stored in the pool of DRA4WfMS documents. 
— Notify the subsequent participants: After a 
resulting DRA4WfMS document is stored, the portal server 
should inform the participants of the next activities.  
— Perform workflow monitoring or statistical 
analyses: The user can display information about the activity 
status of a workflow process.  
IV. APPLYING BIGTABLE TO CONSTRUCT DRA4WFMS
 DOCUMENTS POOL
 Bigtable is a distributed storage system for managing 
structured data that is designed to scale to a very large size: 
petabytes of data across thousands of commodity servers 
[34]. It is one of the solutions to store structured big data in a 
table-like architecture. We can activate MapReduce 
computation for efficient searching in it. The scalability 
nature of it makes it suitable for multitenancy systems. We 
employed the Apache Hadoop [35] to implement the pool of 
DRA4WfMS documents, which was constructed by the 
HBase database. HBase is an open-source implementation of 
the BigTable architecture and a distributed column-oriented 
database built on top of HDFS (the distributed file system of 
Hadoop). It is the optimal Hadoop application to use when 
real-time read/write random accesses to very large datasets 
are required. A DRA4WfMS document is stored as a cell in 
a row of an HBase table.
 73
IV.1 TABLE SCHEMA
 A Bigtable is a sparse, distributed, persistent 
multidimensional sorted map. The map is indexed by a row 
key, column key, and a timestamp; each value in the map is 
an uninterpreted array of bytes. A column key is named 
using the following syntax: “column family”: “qualifier”.
 Figure 5 shows the table schema for a DRA4WfMS 
document pool. 
Row DraDoc:XML Activity: NextActivities
 Activity: 
UpdateTime
 Figure 5. Schema of the table in DRA4WfMS documents pool.  
Start of 
workflow
 End of 
workflow
 Activity Connection
 edge
 Condition
 TFC Server
 A
 B1
 B2
 C D
 Accept
 Attachment is 
insufficient.
 And-
 split
 And-
 join
 Initial
 document
 Figure 6. A workflow process 
When a participant finishes the execution of an activity 
A , s/he sends a DRA4WfMS X
 
  to a portal server. The 
portal server creates a new row to store X
 
  which is stored 
in “DraDoc:XML”. The “Row” is the row key which is 
consisted of “Company name”, “Workflow ID”, “Process 
ID”, “Activity ID”, and “Index 2 ”, e.g., “tw.edu.ntnu_ 
WF3456_P1029890_A1_0001”. “Activity: UpdateTime”
 stores the timestamp which shows when the upload is 
completed. Although this timestamp is also embedded in the 
DRA4WfMS document stored in “DraDoc:XML”, we store 
it in a separate cell for efficient lookup. The portal server 
should derive the subsequent activity/activities and the 
corresponding participants and store it in 
“Activity:NextActivities”. Figure 7 shows the rows which 
were created when the workflow process shown in Figure 6
 was executed. “A_0 (A_Agency)” in the first row means that 
the subsequent activity and its participant is “A_0” and 
“A_Agency”, respectively. Note that “A” is the ID of an 
activity and “0” is the index of it; “A_Agency” could be an 
ID of a participant or a role. It is obvious that the form 
allows multiple participants for a single activity, e.g. “A_0 
(John, Mary, TA_Agency)”. 
Row DraDoc:XML Activity: NextActivities
 Attribute: 
UpdateTime
 tw.edu.ntnu_WF3456_P1029890_Init A DRA4WfMS document
 A_0 
(A_Agency) (Timestamp)
 tw.edu.ntnu_WF3456_P1029890_A_0 A DRA4WfMS document
 B1_0 
(B1_COM1)
 B2_0 
(B2_COM2)
 (Timestamp)
 tw.edu.ntnu_WF3456_P1029890_B1_0 A DRA4WfMS document
 C_0 
(C_Agency) (Timestamp)
                                                           
2 An activity can be executed multiple times as a workflow may contain 
loop. This is the index number of the execution and starts from one.
 tw.edu.ntnu_WF3456_P1029890_B2_0 A DRA4WfMS document
 C_0 
(C_Agency) (Timestamp)
 tw.edu.ntnu_WF3456_P1029890_C_0 A DRA4WfMS document
 D_0 
(D_Agency) (Timestamp)
 tw.edu.ntnu_WF3456_P1029890_D_0 A DRA4WfMS document t End (Timestamp)
 Figure 7. Some rows in a DRA4WfMS document pool table.  
Row DraDoc:XML Activity: NextActivities
 Attribute: 
UpdateTime
 tw.edu.ntnu_WF3456_P1029890_Init A DRA4WfMS document
 A_0 
(A_Agency) (Timestamp)
 tw.edu.ntnu_WF3456_P1029890_A_0 A DRA4WfMS document
 B1_0 
(B1_COM1)
 B2_0 
(B2_COM2)
 (Timestamp)
 tw.edu.ntnu_WF3456_P1029890_B1_0 A DRA4WfMS document
 C_0 
(C_Agency) (Timestamp)
 Figure 8. Some rows in a DRA4WfMS document pool table.  
It is very common for a WfMS to support the notification 
function in which a participant is informed immediately 
when an activity is ready to be executed by him/her. 
However, the information contained in this table is 
insufficient for the portal server to decide if it should notify 
the participant of the subsequent activities. For example, 
referring to Figure 8. The execution of two activities “A_0”
 and “B1_0” are completed for the workflow process shown 
in Figure 6. When activity “B1” is finished, it creates the 
third row and derives the subsequent activity and its 
participant is “C_0” and “C_Agency”, respectively. 
However, “C_Agency” should not be informed to execute 
“C_0” because there is an “and-join” of activities “B_1” and 
“B_2” before “C_0”. It means that activity “C_0” can be 
activated only if both activities “B_1” and “B_2” are 
finished. We suggest to construct a notification table for each 
workflow as shown in Figure 9 which is based on the 
workflow definition shown in Figure 6. Referring to the 
fourth row in this table. According to workflow definition 
with ID WF3456, activity “C_i” can be activated when 
“B1_i” and “B2_i” are finished, where “i” is the index of the 
activity. The first row means that “A_0” should be activated 
when workflow process starts and “A_i” can be activated 
when “D_i-1” is finished. 
Row Activity:Notification
 tw.edu.ntnu_WF3456_A_i START (i=0) | Finished[D_(i-1)]
 tw.edu.ntnu_WF3456_B1_i Finished[A_(i)]
 tw.edu.ntnu_WF3456_B2_i Finished[A_(i)]
 tw.edu.ntnu_WF3456_C_i Finished[B1_(i)] & Finished[B2_(i)]
 tw.edu.ntnu_WF3456_D_i Finished[C_(i)]
 Figure 9. Some rows in a DRA4WfMS notification table.  
Generally speaking, it is no need to use the MapReduce 
computation when we need to retrieve and store a
 DRA4WfMS document. When a participant receives a 
notification, which contains the workflow definition ID, 
workflow process ID, activity ID and index, to ask him/her 
to execute an activity, it uses these information to request a 
retrieval for the necessary DRA4WfMS documents. After 
the execution is finished, he/she can upload a DRA4WfMS 
document according to the notification information. 
74
The notification information can be sent to the participant 
via E-mail or any other kind of communication system. 
When a participant receives the notification information, it 
usually stores it and then processing the execution of activity 
accordingly. However, the notification information may get 
lost. Intuitively, one of the solutions is that the system 
maintains a TO-DO list for all the participants. However, the 
TO-DO list of a participant may change dynamically as the 
role of a participant may change. When the notification 
information of a participant is lost or we change the role of a 
participant, we have to search the DRA4WfMS document 
pool table to derive the TO-DO list for that participant. 
Because we support multitenancy architecture, we must offer 
an efficient way to search the table. Fortunately, Hadoop 
supports MapReduce computation for parallel processing of 
rows in HBase table. To derive the TO-DO list for a 
participant, we activate the MapReduce computation in 
DRA4WfMS document pool table. Each row is processed in 
parallel. The cell “Activity:NextActivities” is checked to find 
if it contains the ID of the participant. Then, we employ the 
DRA4WfMS notification table to decide if the activity is 
ready to start. 
V. CONSTRUCTING DRA4WFMS IN UNTRUSTED CLOUD 
INFRASTRUCTURE
 The DRA4WfMS documents stored in a DRA4WfMS 
cloud system usually contain important data. Storing 
important data in cloud storage is associated with serious 
security risks. The service provider can leak confidential data, 
modify the data, or return inconsistent data to users. Any of 
these problems may occur due to bugs, crashes, operator 
errors, or misconfigurations. Furthermore, malicious security 
attacks can be much harder to defend against and also be 
more damaging than accidental ones: external adversaries 
may illegally access the servers operated by the cloud 
storage provider, or employees of the service provider may 
commit insider attacks. Such security breaches are possible 
even if a cloud storage provider implements strong security 
practices. 
None of today’s cloud storage services provide security 
guarantees in their service-level agreements (SLAs). For 
example, the SLAs of S3 [36] and Azure [37] only guarantee 
availability: if availability falls below 99.9%, clients are 
reimbursed a contractual sum of money. The applying 
element-wise encryption and chaining characteristic 
execution results make DRA4WfMS fulfill the security 
features of authentication, confidentiality, data integrity, and 
nonrepudiation. Even though the servers which store the 
process instances are not controlled by a company, this 
company does not have to worry about the security problems 
for workflow processes. However, the client still cannot 
ensure that his/her data in DRA4WfMS documents pool will 
not be lost. The basic idea to face this problem is to treat 
servers in a cloud system as untrusted in advance and apply 
replication to important data [22], [23], [24], [25]. From a 
market perspective, it is unlikely that server providers will 
agree on an easy and standardized way to access services, as 
this would give clients total freedom in changing providers, 
leading to increased open and direct competition with other 
providers. We think it is reluctant for a company to place its 
WfMS in the cloud unless the company can migrate and 
replicate the process instances on his own without the need 
for the supporting of the cloud provider. 
First, if the company is not satisfied with the service 
given by the service provider, it should have the full control 
to switch to another service provider on his own. For the 
switching, the company usually has to migrate the process 
instances for running processes and finished processes 
because it has to continue unfinished processes and finished 
processes contain important data. Second, even if the service 
provider offers some kind of SLAs such as availability. The 
customer may still feel that the loss of any process instances 
for executing and finished processes is not acceptable at any 
situation. Given the architecture shown in Figure 4, a 
participant can make backup copies of DRA4WfMS 
documents in some commodity cloud storage servers on his 
own as AEA can obtain these DRA4WfMS documents 
during activity execution. The duplication of process 
instances is easy and can be made without the assistance of 
the original service provider. Since we have backup for all 
the DRA4WfMS documents, we can easily migrate to 
another service provider. 
VI. IMPLEMENTATION AND EXPERIMENTAL RESULTS
 In this section we present the experimental results. We 
implement the DRA4WfMS documents pool and portal 
server according to Figure 4. The DRA4WfMS documents 
pool is implemented in Hadoop. The portal server is an 
Apache server which communicates with AEA via HTTP 
protocol. We build a Hadoop clusters to implement the 
DRA4WfMS documents pool which consists of five PCs, 
five nodes, each with 3.0GHz Intel Core 2 Quad processor, 2 
GB of RAM, 500 GB of hard disk, Ubuntu 10.04 LTS 
operating system, and Java Development Kit 6.  
We perform experiments to evaluate the concurrent 
capability of processing transactions from a large number of 
participants. When a participant wants to do their task, it 
needs to connect to one of the portal servers. However, we 
only have a single DRA4WfMS documents pool as all the 
process instances are stored in a big table for the cross-
 enterprise and multitenancy requirement. Therefore, it is 
very likely that the DRA4WfMS documents pool may have 
to process many concurrent transactions from participants. 
We measure the response time with different amount of 
participants and different amount of documents. We have the 
AEA, portal servers, and DRA4WfMS documents pool 
locate in the same network segment. We set the number of 
documents in the pool to be 10, 100, 1000, 10000, and 
100000. When there is only one participant, the response 
time for processing a single transaction, which is either 
“Read” or “Write” randomly, is less than 350 ms in all the 
situations. The worst case is that we have 1000 participants 
to access a DRA4WfMS documents pools with 10,000 
process instances, where the minimal, average, and maximal 
response time is 919 ms, 11413 ms, and 21907 ms, 
respectively. 
75
TABLE 1: THE RESPONSE TIME OF CONCURRENT ACCESS ON DIFFERENT 
NUMBER OF DOCUMENTS STORED IN DOCUMENTS POOL
 (A) 10 documents in the DRAWfMS documents pool 
: Number of concurrent participants 
 Minimal (ms) Maximal (ms) Average (ms)
 1 310 310 310
 10 512 580 546
 (B) 100 documents in the DRAWfMS documents pool 
 Minimal (ms) Maximal (ms) Average (ms)
 1 271 271 271
 10 487 543 515
 100 778 2673 1725.5
 (C) 1000 documents in the DRAWfMS documents pool 
 Minimal (ms) Maximal (ms) Average (ms)
 1 300 300 300
 10 503 579 541
 100 733 2657 7695
 1000 863 21369 11116
 (D) 10000 documents in the DRAWfMS documents pool 
 Minimal (ms) Maximal (ms) Average (ms)
 1 298 298 298
 10 499 532 515.5
 100 720 2717 1718.5
 1000 919 21907 11413
 (E) 100000 documents in the DRAWfMS documents pool 
 Minimal (ms) Maximal (ms) Average (ms)
 1 306 306 306
 10 474 551 512.5
 100 759 2767 1763
 1000 840 21452 11146
 VII. RELATED WORK
 Recently, many researchers tried to propose novel 
architecture for cloud-based WfMSs. Pathirage et al. 
proposed a Multi-tenant Architecture for BPEL [16]. They 
motivated the importance of multitenancy WfMSs. It uses 
Apache ODE [38] as its BPEL execution run-time. The 
proposed multi-tenant architecture leverages the multi-tenant 
support of the Carbon architecture [39]. Anstett et al. 
addressed the issue of execution BPEL processes in the 
cloud [40]. Muthusamy and Jacobsen addressed the issue of 
scalability for cloud WfMS [41]. In their architecture, 
centralized engine can be replicated and the process 
instances balanced among the replicas whereby even 
individual process instances are executed in a distributed 
manner. Mao et al. considered the features of distributed 
heterogeneous environment on the cloud for deploying 
cloud-oriented WfMSs [42]. They proposed a new dynamic 
cloud scheduling algorithm which takes consideration of the 
characteristics of cloud workflow and cloud resources. Lins 
and Stephenson et al. presents an environment to 
collaboratively model business processes considering 
security requirements and to automatically deploy them in 
the Cloud with security requirements enforcement [43]. In 
their framework, the client company must trust the service 
provider as security is enforced by the engine servers in the 
cloud. Liu et al. pointed the current workflow systems have 
two critical issues: resource scalability and decentralized 
management [44]. They proposed a peer-to-peer based Cloud 
workflow system for managing large scale workflow 
applications. However, their framework cannot support 
nonrepudiation for execution of activities and untrusted 
cloud environment.  
The research work for constructing application on 
untrusted servers mainly concentrates on the application of 
cloud storage. One way to recover from a malicious server 
corrupting the persistent store is to replicate the data on 
several servers [22], [23], [24], [25]. Replication on multiple 
servers can ensure preservation of data even when many of 
the servers are malicious. With client-side process instance 
migration and replication and the security mechanism of 
DRA4WfMS, the client can employ untrusted server to 
constructs trustworthy WfMSs in the cloud. 
VIII. CONCLUSION
 In this paper, we propose a novel architecture for Cloud-
 based WfMSs. First of all, combining element-wise 
encryption and embedding chained digital signatures in 
process instances, our system satisfies major security 
requirements of authentication, confidentiality, data integrity, 
and nonrepudiation. Second, the proposed system supports 
multitenancy. All the process instances can be placed in a 
single pool with data security and isolation being fulfilled by 
it security mechanism. For execution isolation, the 
executions of activities are performed in the AEA of client 
side so that the tenant execution is independent from the 
others’. Third, in addition to multitenancy, the controlled 
data sharing makes it suitable to be a cross-enterprise WfMS 
which can provide workflow enactment service in cloud 
collaboration by exchanging data between users. Fourth, a 
multitenant system will inevitably accept a large number of 
requests and therefore has to be scalable. We study how to 
employ the BigTable to store the process instances and 
implement the required operations for workflow execution in 
BigTable. Our system is scalable as it can operate even when 
the process instances from participants of multitenancy 
organizations form a big data. Finally, as the best of our 
knowledge, our system is the first one which addresses 
problems of the untrusted server in the cloud-based WfMSs. 
The client-side controlled process instance migration and 
replication together with the security mechanism in our 
system make it possible for client organizations to utilize 
untrusted cloud infrastructures to implement cross-enterprise 
WfMSs by cloud collaboration. The implementation and 
experiments demonstrate the feasibilities of the proposed 
system. 
REFERENCES
 [1] D. Georgakopoulos, M. Hornick, and A. Shet, “Overview of 
Workflow Management: From Process Modeling to Workflow 
Automation Infrastructure,” Distributed and Parallel Databases, Vol. 
3, No. 2, 1995, Pages 119–153. 
[2] Shi Meilin, Yang Guangxin, Xiang Yong, and Wu Shangguang,  
“Workflow Management Systems: A Survey,” International 
Conference on Communication Technology, 1998. 
[3] Workflow Management Coalition, “Workflow: An Introduction,”
 Workflow Handbook, 2002. 
[4] “Workflow Software via Cloud Computing Service –
 RunMyProcess,”  http://www.runmyprocess.com/. 
[5] “Visual Workflow: experience the speed of visual app development,”  
http://www.salesforce.com/platform/cloud-platform/workflow.jsp. 
76
[6] “Aneka: Enabling .NET-based Enterprise Grid and Cloud 
Computing,”  http://www.manjrasoft.com/products.html. 
[7] “Azure Services Platform,” http://en.wikipedia.org/wiki 
/Microsoft_Azure#Azure_Platform_Components. 
[8] “Implementing Workflows on Google App Engine with Fantasm,”
 http://code.google.com/intl/zh-TW/appengine/articles/fantasm.html. 
[9] S. Ceri, P. Grefen, and G. Sánchez, “WIDE ? A Distributed 
Architecture for Workflow Management,” The 7th Int. Workshop on 
Research Issues in Data Engineering, Birmingham, 1997. 
[10] P. Muth, D. Wodtke, J. Weißenfels, A. Kotz-Dittrich, and G. 
Weikum, “From Centralized Workflow Specification to Distributed 
Workflow Execution,” Journal of Intelligent Information Systems, 
10(2):159-184, 1998. 
[11] H. Schuster, J. Neeb, and R. Schamburger, “A Configuration 
Management Approach for Large Workflow Management Systems,”
 Proc. Joint Conf. on Work Activities Coordination and Collaboration, 
San Francisco, 1999. 
[12] T. Bauer and P. Dadam, “Efficient Distributed Workflow 
Management Based on Variable Server Assignments,” B. Wangler, L. 
Bergman (Eds.): CAiSE 2000, LNCS 1789, pp. 94-109, 2000.  
[13] Li-jie Jin, Fabio Casati, Mehmet Sayal, and Ming-Chien Shan, “Load 
balancing in distributed workflow management system,”  
Proceedings of the 2001 ACM symposium on Applied computing. 
[14] George Coulouris, Jean Dollimore, and Tim Kindberg “Distributed 
Systems: Concepts and Design (3rd Edition),” Addison Wesley, 2000. 
[15] Irena Bojanova, Jia Zhang and Liang-Jie Zhang, “Enforcing 
Multitenancy for Cloud Computing Environments,” IT Professional, 
Volume 14, Issue 1, 2012. 
[16] Milinda Pathirage, Srinath Perera, Indika Kumara, and Sanjiva 
Weerawarana, “A Multi-tenant Architecture for Business Process 
Executions,” Proceedings of the 2011 IEEE International Conference 
on Web Services, pp. 121-128. 
[17] Chun-Feng Liao, Kung Chen, and Jiu-Jye Chen, “Toward a Tenant-
 aware Query Rewriting Engine for Universal Table Schema-
 Mapping,” International Workshop on SaaS (Software-as-a-Service) 
Architecture and Engineering, Taipei, Taiwan, 2012. 
[18] C. D. Weissman and S. Bobrowski, “The design of the Froce.com 
multitenant internet application development platform,” Proc. ACM 
SIGMOD International Conference on Management of Data, 2009. 
[19] “Google docs,” http://docs.google.com.
 [20] “Google calendar,” http://www.google.com/calendar.
 [21] Ariel J. Feldman, William P. Zeller, Michael J. Freedman, and 
Edward W. Felten, “SPORC: Group Collaboration using Untrusted 
Cloud Resources,” The 9TH USENIX Symposium on Operating 
Systems Design and Implementation, 2010.  
[22] A. Adya, W. Bolosky, M. Castro, G. Cermak, R. Chaiken, J. Douceur, 
J. Howell, J. Lorch, M. Theimer, and R. Wattenhofer, “FARSITE: 
Federated, Available, and Eliable Storage for an Incompletely 
Trusted Environment,” Operating Systems Design and 
Implementation, pages 1–14, December 2002. 
[23] J. Kubiatowicz, D. Bindel, Y. Chen, S. Czerwinski, P. Eaton, D. 
Geels, R. Gummadi, S. Rhea, H. Weatherspoon, W. Weimer, C. 
Wells, and B. Zhao, “Oceanstore: An Architecture for Global-scale 
Persistent Storage,” International Conference on Architectural 
Support for Programming Languages and Operating Systems,
 December 2000. 
[24] G. Ganger, P. Khosla, M. Bakkaloglu, M. Bigrigg, G. Goodson, S. 
Oguz, V. Pandurangan, C. Soules, J. Strunk, and J. Wylie,  
“Survivable storage systems,” DARPA Information Survivability 
Conference and Exposition,  volume 2, pages 184–195, June 2001. 
[25] P. Druschel and A. Rowstron, “Storage management and caching in 
PAST, a large-scale, persistent peerto-peer storage utility,” ACM 
Symposium on Operating Systems Principles, 2001. 
[26] Eu-Jin Goh, Hovav Shacham, Nagendra Modadugu, and Dan Boneh, 
“Sirius: Securing Remote Unstrusted Storage,” proceedings of the 
Internet Society Network and Distributed Systems Security  
Symposium 2003, pp. 131-145. 
[27] M. Kallahalla, E. Riedel, R. Swaminathan, Q. Wang, and K. Fu, 
“Plutus: Scalable Secure File Sharing on Untrusted Storage,”
 USENIX Conference on File and Storage Technologies, 2003. 
[28] Raluca Ada Popa, Jacob R. Lorch, David Molnar, Helen J. Wang, 
and Li Zhuang, “Enabling Security in Cloud Storage SLAs with 
CloudProof,” in USENIX Annual Technical Conference, June 2011.
 [29] Gwan-Hwan Hwang, Jenn-Zjone Peng, and Wei-Sian Huang, “A
 Mutual Nonrepudiation Protocol for Cloud Storage with 
Interchangeable Accesses of a Single Account from Multiple 
Devices,” IEEE International Conference on Trust, Security and 
Privacy in Computing and Communications, Melbourne, Australia, 
16-18 July, 2013. 
[30] Adam Jacobs, “The Pathologies of Big Data,” ACMQueue 
(http://queue.acm.org/detail.cfm?id=1563874), July 6th, 2009. 
[31] Gwan-Hwan Hwang and Yu-Cheng Hsiao, “A Security Framework 
for Decentralized Workflow Management Systems,” Gwan-Hwan 
Hwang and Yu-Cheng Hsiao. Technical Report, National Taiwan 
Normal University, 2011. http://www.csie.ntnu.edu.tw/~ghhwang/ 
TR/DRA4WfMS_Technical_Report_2011_12_01.pdf. 
[32] Gwan-Hwan Hwang and Tao-Ku Chang, “An Operational Model and 
Language Support for Securing XML Documents,” Computers & 
Security, Volume 23, Issue 6, pp. 498-529, 2004. 
[33] Gwan-Hwan Hwang and Tao-Ku Chang, “Towards Attribute 
Encryption and a Generalized Encryption Model for XML,” The 4th 
International Conference on Internet Computing 2003 (IC'03), Las 
Vegas, Nevada, USA. 
[34] Fay Chang, Jeffrey Dean, Sanjay Ghemawat, Wilson C. Hsieh, 
Deborah A. Wallach, Mike Burrows, Tushar Chandra, Andrew Fikes, 
and Robert E. Gruber, “Bigtable: A Distributed Storage System for 
Structured Data,” The Seventh Symposium on Operating System 
Design and Implementation, Seattle, WA, November, 2006. 
[35] Tom White, “Hadoop: The Definitive Guide,” O'Reilly Media., 
ISBN 978-1-4493-3877-0, May 10th, 2012. 
[36] AMAZON, “Amazon S3 Service Level Agreement,” 
http://aws.amazon.com/s3-sla/. 
[37] MICROSOFT CORPORATION. “Windows Azure Pricing and 
Service Agreement,” http://www.microsoft.com/windowsazure/ 
pricng/. 
[38] Apache Software Foundation, “Apache ODE,” http://ode.apache.org/.
 [39] A. Azeez and S. Perera et al., “Multi-Tenant SOA Middle- ware for 
Cloud Computing,”  IEEE Conference on Cloud Computing, 2010. 
[40] Tobias Anstett, Frank Leymann, Ralph Mietzner, and Steve Strauch, 
“Towards BPEL in the Cloud: Exploiting Different Delivery Models 
for the Execution of Business Processes,” World Conference on 
Services – I, pp. 670-677, 2009 
[41] Vinod Muthusamy and Hans-Arno Jacobsen, “BPM in Cloud 
Architectures: Business Process Management with SLAs and Events,” 
Business Process Management 2010, Hoboken, NJ, USA, pp. 5-10. 
[42] Lei Mao, Yongguo Yang, and Hui Xu, “Design and Optimization of 
Cloud-Oriented Workflow System,” Journal of Software, Volume, 
8(1): 251-258 (2013). 
[43] Fernando Antônio, Aires Lins, Robson W. A. Medeiros, Bruno L. B. 
Silva, Andre R. R. Souza, David Aragão, Julio C. Damasceno, Paulo 
Romero Martins Maciel, Nelson Souto Rosa, Bryan Stephenson, and 
J. Li, “SSC4Cloud Tooling: An Integrated Environment for the 
Development of Business Processes with Security Requirements in 
the Cloud,” SERVICES 2011,pp. 53-60. 
[44] X. Liu, D. Yuan, G. Zhang, J. Chen, and Y. Yang, “SwinDeW-C: a 
Peer-to-peer Based Cloud Workflow System for Managing Instance 
Intensive Applications,” Handbook of Cloud Computing, Springer, 
2010, pp. 309–332. 
77
