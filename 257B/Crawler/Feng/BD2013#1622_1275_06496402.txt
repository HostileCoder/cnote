An Adaptive Channel Number Tuning Mechanism on 
Parallel Transfer with UDT  
 
 
 
 
 
 
 
 
 
 
Abstract— Utilizing available bandwidth is a big challenge with 
advance of high bandwidth network infrastructures and devices. 
Especially, parallel protocol which creates multi-connections 
aims to maximize data transfer rate in a HBDP(High Bandwidth 
Delay Product) network. It is a critical issue to decide the number 
of optimum channels according to network environment 
variations. In this paper, we deal with an adaptive channel 
number tuning mechanism to decide the number of optimum 
channels on parallel transfer with UDT(UDP based Data 
Transfer protocol). Data transfer distance and network 
congestion are prominent network variants. They can be 
generally represented into RTT(Round Trip Time). We firstly 
conduct a theoretical analysis to investigate the impact of data 
transfer distance on the number of parallel channels, and present 
it as an equation. Then, we discuss about an adaptive channel 
number tuning algorithm to decide the number of optimal 
channels which may reflect the network status. The experimental 
results show our proposed method really rigorous in HBDP 
network.  
Keywords— bandwidth; parallel transfer; HBDP network; 
network environment variation; UDT; 
I.  INTRODUCTION 
High speed networks providing multi-Gbps link capacity 
have been dramatically developing and wide spreading 
between the end users to support data intensive applications. 
But, for most applications, data transfer rate are restricted to 
few of Mbps. This is caused by using TCP which has been 
widely deployed data transfer protocol. It was designed to 
support the reliability of data transfer. It has been proved to be 
remarkably successful in the Internet. However, it is not 
suitable in HBDP network environment because of its 
AIMD(Additive Increase Multiplicative Decrease) congestion 
control mechanism which is inherently not able to effectively 
utilize a given available bandwidth[1][2].   
Several UDP-based researches have been tried to overcome 
TCP transfer rate limitation in HBDP network environment. 
These protocols include SAUBL(Simple Available Bandwidth 
Utilization Library)[3], RBUDP(Reliable Blast UDP)[4], 
Thusnami, PAUDP(Performance Adaptive UDP)[5], UDT 
(UDP based Data Transfer)[6]. UDP-based protocols make use 
of UDP protocol and add a supportive congestion control 
algorithm in application layer functioning such as TCP’ s 
reliable data transfer. In addition, these use a rate congestion 
control which updates the packet-sending period every constant 
interval; if the packets are transmitted to a receiver without any 
packet loss, then one ACK is delivered from the receiver. 
These UDP-based protocols show significantly outstanding 
performance than that of TCP, and are generally considered as 
an alternative data transfer means for HBDP network 
environment.  
On the other hand, the specifications of host system have 
been also developing to maximize the data transfer rate. Above 
all, the advance of microprocessor plays a big role to process 
the work. In [7], authors proposed a new transport method 
which utilizes multiple parallel UDP connections to take 
advantage of the full power of multicore processors. With this, 
it is possible to process incoming packets more efficiently, so it 
is resulting in a good performance. However, most of parallel-
 based approaches including the above work simply presented a 
theoretical model in the restricted network environments. As a 
result, the efforts to find out the number of optimum parallel 
channels is based on empirical simulation results. In order to 
utilize UDP-based parallel data transfer more efficiently, it 
needs a more sophisticate mechanism to control the number of 
channels according to its network status. In other words, the 
sender which finally decides the number of optimum channels 
should be considered with network environment parameters 
including network congestion, data transfer distance and host 
system specifications.   
In this paper, we propose an adaptive channel number 
tuning algorithm which effectively reflects network status. We 
implemented a parallel transfer protocol based on UDT library 
which is the most commonly used UDP-based data transfer 
protocol. The main function is to implement a management 
module of multi-thread which transmits packets simultaneously. 
Then, a supportive function is provided to tune these multi-
 connections with the network status, that is, RTT. RTT can be 
mainly classified into two folders. One is based on the data 
transfer distance, which it is proportionally increased as far as 
the distance from sender and the receiver. The other is to 
reflect the network congestion which is more comprehensive 
because it is influenced by numerous network parameters. To 
do this, we firstly conduct a theoretical analysis to investigate 
the impact of data transfer distance on the number of parallel 
channels, and present an equation. Then, we suggest an 
Jongseon Park, Dosik An, and Gihwan Cho† 
Div. of Computer Science and Engineering,  
Chonbuk National University,  
Jeonju, S. Korea 
Email: {jschris25, rokmcads, ghcho}@jbnu.ac.kr 
 
†?
 The corresponding author 
346978??673?74?5?3?3?00?????? ?????
adaptive tuning algorithm to finally decide the optimum 
number of channels which effectively the network status.    
The rest of the document is organized as follow. Chapter II 
describes the parallel UDT transfer protocol. In chapter III, we 
propose an adaptive tuning mechanism to decide the optimum 
number of parallel data channels. Chapter IV  presents the 
simulation results and chapter V  concludes the study. 
II. PARALLEL UDT PROTOCOL 
UDT is originally planned to make up the poor 
performance of TCP. The most primary lure of this is that users 
are able to implement additional functions to facilitate data 
transfer rate. Also, the congestion control algorithm can be 
easily adjusted with considering its network environments[10] .  
It is well-known that parallel transfer improves data transfer 
rate by transmitting a data aggressively using multi-channels. 
As a result, it makes the a data transfer tool to utilize maximum 
available network link capacity given by a high speed 
network[8][9] .  
 
In this paper, we consider a parallel UDT which 
implements the parallel transfer technique to make its data 
transfer rate more outstanding. In the case of using single 
channel, the sender has to wait for ACK to transmit next packet. 
On the other hand, with multi-channels, it can have a more 
better chance to transmit packets continuously to different 
channels. As a result, the amount of packets to be transmitted 
will be increased for a given time than that of single channel. 
Fig. 1 s hows a conceptual architecture of proposed parallel 
UDT. 
As shown in Fig. 1 , data is transmitted from the sender to 
the receiver. In addition, control channel and data channel are 
differentiated respectively to stability of data transfer. Data 
moves from the sender to the receiver along the solid line, and 
control information is handed from the receiver to the sender 
along the doted line. UDT only takes charge of transmitting 
packets through each channel. So, we additively implement a 
supportive function to manage multiple control information 
through the TCP. File block manager functions to control data 
blocks to be transmitted from disk and verifies the sequence 
number of blocks. In the sender, it loads data blocks from disk 
into the send buffer, and the loaded blocks are transmitted from 
the sender to the receiver through each connections. In receiver, 
data blocks incoming through each channels arrives and moves 
into the receive buffer. Then, file block manager checks the 
sequence number of incoming blocks and verifies it. If there 
are no data losses, the data blocks are forwarded into the disk 
and control information is handed to a sender. Among these 
control information, the auto tuner extracts RTT and utilizes it 
to decide the optimum number of parallel channels.  In chapter 
III, we discuss it in more detail in term of adaptive channel 
number tuning mechanism.        
III. ADAPTIVE CHANNEL NUMBER TUNING MECHANISM 
In implementing the parallel data transfer protocol, the 
most important thing is to decide optimum number of channels. 
It basically needs to be presented with suitable theoretical 
models. If appropriate parallel connections are created, the 
performance will be proportionally increased alongside the 
number of channels, so it results in efficiently utilizing 
available bandwidth. However, in the case of congested 
network environment, it may lead to consecutive data losses 
resulting in a poor performance. RTT is the most significant 
network environment parameter to estimate network status, 
which can be summarized as follow.    
? Data transfer distance: The RTT can range from a few 
milliseconds(thousandths of a second) under ideal 
conditions between closely spaced points to several 
seconds under adverse conditions between points 
separated by a large distance. 
? Network congestion: When network status is congested 
with many packets in a bottleneck link, the data rate of 
a flow is limited in delay. So, in this case, measured 
RTT value will be larger than that of normal.      
? Host system specification: The system specification is 
another key component to delay data transfer. With a 
good host specification, packets incoming into a 
receive buffer are processed more efficiently.   
When the sender decides the number of optimum channels, 
it can consider RTT from the receiver which is influenced with 
the above network environment parameters. Our work starts to 
firstly conduct a theoretical analysis to investigate the impact 
of data transfer distance.  
A. Theoritical Channel Prediction Model  
HBDP is commonly known as a long fat network, it is more 
useful to utilize the parallel technique. BDP refers to the 
product of a data link capacity(bandwidth) and its 
delay(RTT/2) , which is presented as the below equation.  
DelayBandwidthBDP ??  
As a result, an amount of packets to be transmitted is 
equivalent to the maximum amount of data on the network link 
at any given time. So, parallel-based transfer in HBDP can be 
really helpful to maximize its transfer rate.  
To theoretical analysis according to the RTT, we organize a 
real network environment as shown in Fig. 2. Data is 
transmitted from host1 to host 2 ~ host  4, and all hosts are 
connected to each other with 1Gbps network link capacity. 
Network emulator(WANem)[11] locates between host1 
 
 
Figure 1. Concetual architecture of the parallel UDT  
 
347
and switch to intentionally modify of RTT. The 
experimental results are aggregated in a specified RTT 
section from 1.5ms to 400ms.  Along with this, the number 
of channels is changed from 1 to 20 in each RTT section.  
All host systems are equipped with different system 
specifications, which are summarized as shown in Table I. 
For each file transfer, we have done at least 20 times and 
calculated their average throughput.   
 
 
 
 
 
 
 
 
 
TABLE I. HOST SYSTEM SPECIFICATIONS  
 Memory CPU OS 
Host 1 Xeon 2.83  8 GB  Ubuntu 10.04  
Host 2 i5 760  4 GB Ubuntu 10.04  
Host 3 i5 650  4 GB Ubuntu 10.04  
Host 4 i5 2500  8 GB  Ubuntu 10.04  
 
TABLE II presents an optimum channel number which 
shows the highest data transfer rate in each host according to 
RTT respectively. With Table II, we found out that the 
number of parallel channels is increased proportionally as 
RTT is getting bigger. Especially, a great change is shown 
from 1.5ms to 50ms than that of any other RTT sections. 
We can confirm that the parallel technique is more 
effective in this RTT section. In other RTT sections, its 
change is a little bit moderate.  
TABLE II. OPTIMUM CHANNEL NUMBER SHOWING THE HIGHEST TRANSFER 
RATE IN EACH HOST  
RTT(ms) Host 2 Host 3 Host 4 
1.5 6 5 5 
50  11 12 11 
100  12 12 13 
150  133 14 14 
200  14 14 15 
250  15 15 15 
300  16 16 16 
350  17 18  17 
400  17 18  17 
 
Based on the above analysis, we know the number of 
parallel channels increases proportionally with RTT in 
different hosts. With this fact, we propose a theoretical 
channel prediction model to optimum data transfer rate 
according to the RTT change, without considering any 
packet losses and network congestion. Therefore, we 
present a mathematical equation reflecting its correlation 
between the number of parallel channels and RTT. A 
regression analysis is a commonly useful method to 
present a theoretical approach based on the actual testing 
results. Through the results of Table II, we can estimate 
increasing aspect in phase of each RTT sections. For 
example, the increasing amount of channels in each RTT 
sections appears curvilinear for all hosts. In this case, 
logarithmic-based approach to make equation is suitable. 
General logarithmic-based equation is represented as 
below. 
bxay ??? )ln(  
x  represents the independent variable and y the 
dependent variable. And, the coefficients a, b  are 
calculated by using the method of least squares.  Based on 
the measured results of Table II, we can easily extract the 
equations for all hosts respectively as shown below.   
4046.4)ln(9894.1)(2 ?? rttchhost  
3147.4)ln(0326.2)(3 ?? rttchhost  
4046.4)ln(1894.1)(4 ?? rttchhost  
In these equations, the number of channels(host i (ch) ) is 
determined depending on RTT. To get the final equation, 
named OPCN(Optimum Parallel Channel Number), we 
calculate the average of all equations and present it as 
shown below.  
3746.4)ln(0038.2 ?? rttOPCN  
To verification of this equation, we input RTT from 1.5ms to 
400ms in order. Table III shows calculated results by using this 
equation, where all values are a rounding value.   
TABLE III. OPCN CALCULATED  BY THE EQUATION  
RTT(ms) OPCN 
1.5 5 
50  12 
100  13 
150  14 
200  15 
250  15 
300  16 
350  16 
400  16 
 
From the results of  TABLE III, an optimum channel 
number in RTT section from 1.5ms to 50ms is increased 
abruptly comparing with any other RTT sections. In other 
RTT sections, its change is more moderate. This shows 
that the theoretical channel prediction model has an 
equivalent result with comparing the experimental results 
in TABLE II. So, we believe our modeling is valuable 
enough to use it as a theoretical equation. 
B. Adaptive Channel  Tuning Mechanism  
We make use of the equation presented above as a prediction 
model to decide the number of channels according to the RTT. 
This equation should be adaptively tuned further with 
considering the network status.  
 
Figure 2. Network environment to theoretical analysis according to RTT  
348
The optimum number of channels is based solely on RTT. 
So, it is the first stage to measure current RTT before creating a 
channel. In Fig. 1, an auto tuner module provides some 
functions to create new connections and takes over the 
information that is a current RTT measured by the receiver. 
Based on this information, the sender can finally decide the 
optimum parallel data channels.      
 
yes
 no
 no
 yes
 yes
 nono
 CHN cur  ++
 START
 RTT measure
 RTT min <RTT cur
 RTT cur  < RTT pre
 CHN = OPCN (RTT min )
 RTT diff  = |RTT cur – RTT pre |
 confix + 1
 RTT min  = min{RTT t-i , 
… , R TTt}
 confix = 0
 confix = 0
 RTT min  = RTT cur
 END
 RTT pre  = RTT cur
 CHN cur  < CHN +thre
 RTT diff  < ?
 CHN cur  > CHN - thre
 CHN cur  --
 confix ≥ ?
 yes
 no
 yes
 no
 yes
 yes yes
 yes
  
Figure 3. The adaptive channel number tuning mechanism  
Fig 3 shows the adaptive channel number tuning mechanism 
with considering distance and network congestion. It can be 
explained as follow.  
1) Upon arrival of control packet including current RTT    
measured by the receiver, the sender compares it with 
minimum RTT which is a originally user-defined value. 
In the first stage, current RTT is decided as a mimimum 
RTT. It goes directly to the OPCN( RTTmin ) stage and 
decides the number of channels and substitutes RTTpre  
with RTTcur, otherwise goes to step 2. 
2) If RTT min  < RT Tcur , calculates RTT diff  which is an 
absolute value as RTT cur – RTT pre . We consider that the 
network status is sometimes very irregular, and make use 
of a threshold ? to compare it with RTT diff . If RTT diff  
value is bigger than ?, network congestion is considered 
to be temporal. Otherwise, network congestion last for a 
long time and fixed. If RTT diff  < ?, the confix that stands 
consgestion fix increaments count is increased by 1 and 
goes to step 3, otherwise sets the confix value with 0 and 
goes step 4.  
3) Compares the confix value with ?. If it exceeds the ?, 
extracts a new minimum RTT among previous RTTs, 
otherwise goes to step 4. Then, goes to OPCN( RTT min ) 
and decides an optimum channel number. 
4) Compares current RTT with previous RTT. According to 
this result, whether the number of channels increases or 
not is decided. If RTT cur  < RTT pre , the number of current 
channels is increased because it means that the current 
network status more favorable than previous. Otherwise 
goes to step 5. It is needed to regulate the number of 
channels to be increased. If it is exceeded the threshold, 
maintains the previous channel number. 
5) This situation means that current network status is more 
congested than previous, which decreases the number of 
current channels. 
We summarized this channel number tuning mechanism as a 
simple pseudo code as follow. 
Pseudocode1 : auto tuner?
 1:?
 2:?
 3:?
 4:?
 5:?
 6:?
 7: 
8: ?
 9:  
10: ?
 11:?
 12:?
 13:?
 14:?
 15:?
 16:?
 17:?
 18: ?
 19: ?
 20: ?
 21:?
 22:?
 23:?
 24:?
 25:?
 26:?
 27:?
 28: ?
 29: ?
 30: ?
 31:?
 Parameter auto tuner( )?
 RTT cur  = RTT measure( ); ?
 If RTT min  is smaller than RTT cur ?
 RTT diff  = absolute( RTT cur  - RTT pre ); ?
 If RTT diff  is smaller than ??
 confix += 1;?
 If confix is larger than ??
 RTT min  = minimum{ RTT t- 1 , …, RTT t}; 
CHN  = OPCN ( RTT min );?
 confix  = 0; ?
 Otherwise, ?
 If RTT cur  is smaller than RTT pre  ?
 If CHN cur  is smaller than CHN maxinc ?
 CHN  = channel is  increase( ); ?
 Otherwise, ?
 If CHN cur  is larger than CHN maxinc ?
 CHN  = channel is decrease( ); ?
 Otherwise, ?
 confix = 0; ?
 If RTT cur  is smaller than RTT pre  ?
 If CHN cur  is smaller than CHN maxinc ?
 CHN  = channel is increase( ); ?
 Otherwise, ?
 If CHN cur  is larger than CHN maxinc ?
 CHN  = channel is decrease( ); ?
 Otherwise, ?
 RTT min  = RTT cur ; ?
 CHN  = OPCN ( RTT min );?
 confix  = 0; ?
 RTT pre  = RTT cur ;?
 Return CHN ;?
  
349
IV.  PERFORMANCE  EVALUATION  
F or validating the proposed method, we make use of the 
real network environment shown in Fig. 2. The proposed 
method is compared with the UDT(version 4.7) and parallel 
TCP over a local link. The proposed method is tested in two 
cases; one is a parallel UDT based on OPCN and the other is 
an adaptive channel number tuning of parallel UDT(ACT 
parallel UDT). Two host systems is identically equipped with l 
Gigabit NIC, i5 760 processor, 4  GByte of RAM and Ubuntu 
10.04  operating system. WANem is used to intentionally 
modify RTT, which is changed from 1ms to 400ms . The file 
size used is 4 Gbyte and all experiments are performed 20 
times to get average throughputs.  
 
 
Figure 4. Throughput comparison with jitter 20%  
 
Figure 5. Throughput comparison with jitter 40%  
Fig. 4 presents an experimental result measured in 
each RTT section, which jitter is used to intentionally 
modify RTT much like as a real network environment. In 
this experiment, jitter is set with 20 % of original RTT. 
For example, it will be randomly changed from 100ms to 
120ms in the case of 100ms RTT section. All protocols 
show high transfer rate in low RTT section. In TCP, the 
data transfer rate is dramatically decreased as RTT is 
increased. It is well known that this is caused by AIMD 
congestion control algorithm of TCP. Single UDT is more 
rigorous than that of TCP in each RTT section. Most of 
UDP-based data transfer protocols including UDT show 
high transfer rate in HBDP with benefit of its rate based 
congestion control. The Parallel UDT shows higher data 
transfer rate as RTT increases. This confirms that parallel-
 based data transfer is really helpful in HBDP network. 
The ACT Parallel UDT which includes an adaptive channel 
number tuning shows the highest data transfer rate than 
that of the other protocols, but a little bit higher than that 
of the Parallel UDT.          
 Fig. 5 is a experimental results measured in same 
environment, but the jitter is changed to 40 %. The result 
shows nearly the same, but there are some differences 
between Parallel UDT and ACT Parallel UDT. As RTT 
increases, ACT parallel UDT shows high performance 
than that of Parallel UDT. With this, we can confirm that 
ACT Parallel UDT shows 644%, 135%, 7% improvement 
than that of TCP, single UDT and parallel UDT 
respectively.  
V.  CONCLUSION 
Utilizing multiple connections in HBDP network is really 
helpful to efficiently utilize available bandwidth. But, it is a 
critical issue to decide the number of optimum channels 
according to network environment variation. Most existing 
researches on parallel-based data transfer analyzed it depending 
on empirical methods. In this paper, we proposed an adaptive 
channel number tuning mechanism. To do this, we firstly 
conducted a theoretical analysis to investigate the impact of 
data transfer distance on the number of parallel channels and 
formalized the result into an equation. Based on this result, an 
adaptive channel number tuning mechanism is proposed. The 
performance superiority of proposed method was verified by 
the experimental results measured in a real network 
environment. For the future work, we are going to keep 
elaborating the proposed  method with taking account of local 
host system.     
REFERENCES  
[1] J. Edmonds, “ On the competitiveness of AIMD-TCP within a general 
network,” Theoretical Computer Science , Vol. 462, pp. 12 -22, 2012. 
[2] P. Yang, W. Luo, L. Xu, J. Deogun, and Y. Lu, “TCP congestion 
avoidance algorithm identification,”  in Proc. ICDCS 2011 , pp. 310 -321, 
Jun. 2011.  
[3] Y. Gu, X. Hong, M. Mazzucco, and R. L. Grossman, SABUL: a high 
performance data transfer protocol, submitted to IEEE Communication 
Letters, 2002.  
[4] E. He, J. Leigh, O. Yu, and T.A. DeFanti, “ Reliable blast UDP: 
predictable high performance bulk data transfer,” in Proc. IEEE Cluster 
Computing , 2002.  
[5] B. Eckart, X. He, and Q. Wu, “ Performance adaptive UDP for high-
 speed bulk data transfer over dedicated links,”  in Proc. IPDPS 2008 , pp. 
1-10, Apr. 2008.    
[6] Y. Gu and R. L. Grossman, “UDT: UDP -based data transfer for high-
 speed wide area networks,” Computer Networks , vol. 51, no, 7, pp. 
1777-1799, May 2007.  
[7] X. Lu, N. S. V. Rao, and Z. Wang, “ On parallel UDP-based transport 
control over dedicated,”   in Proc. G L OBECOM 2010 , pp. 1-5, Dec. 2010.  
[8]  E. Yildirim, D. Yin, and T. Kosar, “Prediction of optimal parallelism 
level in wide area data transfers,”  IEEE Transactions on Parallel and 
Distributed System , vol. 22, no, 12, pp. 2033 -2045, Dec. 2011.  
[9]  H. Park, S. Lee, and Y. Shin, “High -speed transmission and control plan 
on high-definition video file using parallel TCP,” in Proc. ICACT'12 , pp. 
1205 -1208, 2012.   
[10]  D. An, J. Park, G. Wang, and G. Cho, “An adaptive UDT congestion 
control method with reflecting of the network status,”   in Proc.  ICOIN 
2012 , pp. 492 -496, Feb. 2012.  
[11] The Wide Area Network emulator, http://wanem.sourceforge.net/  
350
