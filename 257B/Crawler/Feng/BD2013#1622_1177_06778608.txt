Triple Code: An Efficient Labeling Scheme for Query 
Answering in XML Data *  
Lizhen Fu
 School of Information
 Renmin University of China
 Beijing, China
 flz@ruc.edu.cn
 Xiaofeng Meng
 School of Information 
Renmin University of China
 Beijing, China
 xfmeng@ruc.edu.cn
 Abstract—Labeling schemes play crucial roles in the processing 
of XML queries. Designing labeling scheme that can support 
various common structural relationship queries (such as PC, AD, 
SR, DO, and LCA) among nodes, has received much research 
attention. Although there have existed a variety of labeling 
schemes such as prefix-based labeling, interval-based labeling and 
integer-based labeling and as well as their variants, these labeling 
schemes show weakness in one aspect or another. Interval-based 
labeling schemes can answer AD, PC and DO queries efficiently 
and can be created fast, but they can’t process SR and LCA.
 Prefix-based labeling and integer-based labeling can process all of 
common structural relationship queries, but they are far less 
efficient than interval-based labeling for AD and DO queries. In 
this paper, we propose a new interval-based labeling scheme, 
called Triple code, which has a good performance on construction 
time, storage cost and query cost. In addition, to optimize the 
performance of LCA computation in XML data with big depth, 
we propose iTriple code (Triple code with information of
 ancestor). Experiment results demonstrate the benefits of our 
proposed labeling schemes over the previous approaches.
 Keywords—Labeling scheme; structural relationship queries;
 styling; XML Database
 I. INTRODUCTION
 The rise of XML as a de facto standard for data exchange 
and representation has generated a lot of interests on querying 
XML documents modeled as an ordered tree. Query languages 
such as XPath and XQuery have been designed to process
 XML data, which include queries of structural relationships 
among nodes, such as Parent/Child (PC), Ancestor/Descendant 
(AD), Sibling Relationship (SR) and Document Order (DO). 
Moreover, to facilitate users to search XML Data, lots of 
algorithms for XML keyword search have been proposed, in 
which computing Lowest Common Ancestor (LCA) is the core 
operator. To speed up processing of these common structural 
relationships queries, a lot of labeling schemes have been 
proposed. Hence, a good labeling scheme should have the
 following characteristics:  
 Compact: it must be enough compact and fit in the main 
memory.
  Flexible: it can support all kinds of structural 
relationship queries including AD, PC, SP, DO and 
LCA. 
 Efficient: the structural relationships can be computed 
fast using the labeling and it can be created efficiently.
 Existing labeling scheme can be classified into three major 
classes: interval-based labeling [1?4], prefix-based labeling [5, 
6] and integer-based labeling [7, 8]. These labeling schemes 
show weakness in one aspect or another.
 Interval-based labeling schemes are efficient and compact, 
which have been a huge success in XML twig pattern matching. 
Another significant advantage of them is that this type of 
labeling is independent of the structure of the tree, like depth of 
a tree. However, this kind of scheme is not flexible, which 
can’t support the determination of SR and the computation of 
LCA. Prefix-based labeling schemes are flexible, which have 
been widely adopted in XML keyword search processing. 
Dewey labeling scheme [5] is the representative of this kind of
 schemes, which has an outstanding performance in computing 
LCA. However, compared with interval-based labeling, this 
kind of labeling isn’t compact and isn’t efficient for AD, PC, 
and DO. Moreover, because they are influenced by depth and 
fan-out of nodes, this kind of schemes doesn’t work well for 
deep and complex trees. Integer-based labeling schemes are 
flexible and more compact than prefix-based labeling schemes. 
But, this kind of labeling has the longest construction time in 
the three kinds of labeling. In addition, because, in testing the 
structural relationship of nodes, they will use arithmetic 
operations among big integers, such as mod and subtraction, 
they are less efficient than interval based labeling. The state-of-
 the-art labeling scheme, Branch code [7] belongs to this kind of 
labeling.  
Finally, in Table 1, we summarize these typical labeling 
schemes as well as our two new labeling schemes in term of 
their storage cost and query time based on worst-case analysis. 
Here, N is the number of nodes and d is the depth of the tree.
 From Table 1, we can see that interval-based labeling [4] 
has satisfied two characteristics (Efficient and Compact) of a 
good labeling. In fact, we find that interval-based labeling 
scheme has the most query performance for AD and DO in 
three kinds of labeling schemes. Moreover, the effect of size 
and structure of XML documents on construction time and 
query cost of this kind labeling is very small. Can we design a 
labeling scheme which not only can inherit the advantages of 
interval-based labeling, but also can overcome the shortcoming
 that interval-based labeling can’t support SR and LCA queries? 
Inspired by this, we propose a new labeling, Triple code, which 
2013 10th Web Information System and Application Conference
 978-0-7695-5134-0/13 $26.00 © 2013 IEEE
 DOI 10.1109/WISA.2013.17
 42978-1-4799-3219-1/13 $31.00 © 2013 IEE
assigns each node a triple (start, end, parentid). For XML tree 
with big depth, Triple code can’t support LCA efficiently. So, 
we propose another novel labeling, called iTriple code with 
information of ancestors.
 TABLE I. COMPARISONS OF LABELING SCHEMES
 Labeling Storage AD PC SR LCA DO
 Interval O(N) O(1) O(1) N/A N/A O(1)
 Dewey O(dN) O(d) O(d) O(d) O(d) O(d)
 Branch O(NlogN) O(1) O(1) O(1) O(d) O(d)
 Triple O(N) O(1) O(1) O(1) O(d) O(1)
 iTriple O(N) O(1) O(1) O(1) O(logd) O(1)
 In this paper, we focus on static XML data. In summary, 
this paper makes the following contributions:
  First, we propose a new interval-based labeling scheme, 
Triple code, which satisfies the tree conditions of a good 
labeling scheme. As shown in experiment section, Triple 
Code has excellent performances on construction time, 
storage cost and query cost. The influence of tree size and 
depth on it is very little. Moreover, it is easy to be 
extended to support updates of leaf nodes and interval 
nodes.
  To further optimize performance of LCA query of Triple 
Code, we propose another labeling scheme, iTriple Code. 
For XML data with big depth, the effect of tree depth on 
construction time and query performances of it is very
 small and it has good query performances.
  We implement Dewey code, Branch code and our two new 
labeling schemes and conduct extensive experiments on 
both real data and synthetic data, on three benchmarks: 
construction time, storage cost and query time.
 The rest of the paper is organized as follows. Section 2 
reviews Background and related work. We present our new 
labeling scheme Triple code in Section 3. Section 4 describes 
another new labeling scheme we proposed, iTriple code.
 Section 5 discusses how to extend our labeling schemes for 
dynamic XML trees. Section 6 gives the experiments result. 
We conclude in Section 7.
 II. BACKGROUND AND RELATED WORK
 A. Structural Relationship Query among Nodes
 Parent/Child (PC), Ancestor/Descendant (AD), Sibling
 Relationship (SR) and Document Order (DO) and Lowest 
Common Ancestor (LCA) are five classes" of common 
structural relationship queries among nodes, which have got 
lots of"intentions from researchers. The First Four are the core 
operators of XPath and"XQuery recommended by W3C. The 
last is the core operator of XML keyword"search. In XPath and 
XQuery, there are 13 kinds of axes and most of them"are 
related with the structure of XML document. In them, self axe 
is easy to"process. Ancestor, ancestor-or-self, descendant and 
descendant-or-self axes can"be transformed into AD queries to 
process. Parent, child and attribute axes can"be transformed 
into PC queries to process. Following and preceding axes can 
be transformed into DO queries to process. Following-sibling 
and Preceding-sibling"can be transformed into DO and SR 
queries to process. In addition, Predicates" of XPath and 
XQuery have structural queries related with the position of 
nodes."This kind of queries also can be transformed into SR 
and DO to process. For example,"/bookstore/book[position()"
 =3], this query selects the third book element"that are children 
of the bookstore element. For this query, we first use PC query"
 to find all of book nodes with a bookstore parent. Then find all 
book nodes sets"with sibling relationship query in got results,
 through SR. At last, find the final"results in those book nodes 
sets, through DO query. In XML keyword search,"the core 
operation is to find the lowest element node which can includes 
all of"keywords. Obviously, this is a LCA query.
 B. Related Work
 Existing labeling schemes can be classified into three major 
classes: interval/based" labeling" [1/4], prefix-based labeling
 [5, 6] and integer-based labeling [7, 8].""
 The first Interval-based labeling is proposed by Santoro, et 
al[3]. To label" the XML tree based on the interval-based 
scheme, different tree traversal methods" (e.g. pre-and-post
 order[1] and extended preorder[2]) are used. The labeling"
 proposed by Zhang et al [4] is widely used, in which each node 
is assigned three"values: start, end and level. Utilizing these 
values, we can determinate various" structural relationships 
(except for SR and LCA) between two nodes efficiently."In 
our two labeling schemes, the processing of DO and AD is the 
same as"zhang labeling. But, for PC, our two labeling schemes 
are more efficient than"zhang labeling, because we only need 
compare if the parentid values of two nodes" are equal. 
Moveover, our labelings can process SR and LCA efficiently. 
In"Prefix-based labelings, the label of a node is its parent’s 
label (Prefix-label) concatenated"with its own label (self-label). 
Dewey code [5] is a typical prefix-based" labeling scheme, 
which has been widely adopted in XML keyword search. The"
 label size of each node is influenced by the depth of tree. So, 
the query performance"and storage cost are influenced by the 
depth of trees. Integer-based" labelings use integers to label 
nodes and determinate the structural relationship"of nodes by 
arithmetic operations among integers. Primecode[7] and 
Branch[8]"code belong to this class. Branch code is the state of 
the art of scheme. It has"been proved that Branch code is more 
efficient than Prime code. In most of cases," this kind of 
labeling is more compact than Dewey code, but its construction"
 time is the longest in three kinds of labeling schemes.
 "" In this paper, we propose two new labeling schemes 
Triple Code and iTiple Code, which can support AD, PC, SR, 
DO and LCA efficiently. From experimental results, we can 
see they have better performances on construction time and
 query time than previous labelings. The influence of tree size 
on construction time, storage cost and query performances of 
Triple Code is less than Dewey Code and Branch Code. The 
influence of tree depth on query performances of iTriple Code 
is the least.
 III. TRIPLE CODE
 Definition1 (Triple Code). The Triple Code of a node v in
 an ordered XML tree T, is a triple <start, end, parentid>, where 
start is the first value of an interval, end is the second value of 
43
an interval, and parentid is the node ID of v’s parent. Note that 
these intervals are generated by once depth-first traversal. Any
 two intervals only have two kinds of relationships that one 
interval is contained by another interval or one interval doesn’t 
intersect with another interval. As an example of Triple code, 
we label the XML tree in Fig.1 (a) by Triple code.
 Fig. 1. Example Results in real datasets
 In Triple Code, the determinations of AD and DO are the 
same as interval-based labeling scheme. For any node u and v, 
u is an ancestor of v if and only if u.start < v.start and u.end >
 v.start. u is preceding (following) node of v if and only if 
u.start<v.start (u.start>v.start). Other structural relationship
 determinations will be given in Theorem 1-4.
 Theorem1 (Parent-Child Determination). For any two 
nodes u and v in a XML tree, u is the parent of v if and only if 
v.parentid = u. 
Theorem2 (Sibling Relationship Determination). For any 
two nodes u and v in a XML tree, u is a sibling node of v if and 
only if v.parentid = u.parentid. 
Theorem3 (Lowest Common Ancestor query of two nodes in 
Triple). For two node u and v, let u.start < v.start and P =
 v1v2…vk be the corresponding path from root v1 to vk = v in 
the XML tree. Then the LCA of u and v, lca(u,v) = 
argmax{x.start : x.start <= u.start and x ??P}.
 Proof. First, we can see that lca (u,v) is an ancestor of v. 
Hence, lca (u,v).start < v.start and lca (u,v).end > v.start. Then, 
lca (u,v).end > u.start. By the definition of lca(u,v), lca(u, 
v).start < u.tart. So, lca (u, v) is an ancestor of u too. Suppose 
that lca (u, v) is not the lowest common ancestor of u and v. 
Then it must exist a node vi ??P that is the lowest common 
ancestor. Since vi and lca (u, v) are in the same path, lca (u, v)
 must be an ancestor of vi. So, lca (u, v).start < vi.start, which is 
contradictory to the definition of lca (u, v). So, lca (u, v) must 
be the lowest common ancestor of two nodes.
 Theorem4 (Lowest Common Ancestor query of multiple 
nodes in Triple). For a node set S, let u = argmin{x.start : x ??
 S}, v = argmax{x.start: x?S} and P = v1v2…vk be the 
corresponding path from root v1 to vk = v. Then the LCA of all 
nodes in S, lca(S) = lca(u, v).
 Proof. Since lca(u,v) is the lowest common ancestor of u
 and v, lca(u,v) must be the lowest common ancestor of all 
nodes in S if it is a common ancestor of all nodes in S. Hence, 
we only need to prove that lca(u,v) must be a common ancestor
 of all nodes in S. Suppose that ?w? S is not a descendant of 
lca(u,v). Then, w.start < lca(u,v).start or w.start > lca(u, v).end. 
Since w.start > u.start and w.start < v.start, w.start > lca (u, 
v).start and w.start < lca(u, v).end, which is contradictory to 
the assumption. Therefore, lca (S) is a common ancestor of all 
nodes of S. Then lca (S) is the lowest common ancestor of all 
nodes of S. 
 Exampel1. We take the tree in Fig.1 (a) for example, which 
is labeled by Triple code, to show the correctness of our 
approaches.  
 Ancestor-Descendant Relation Determination. Node v0 is 
an ancestor of Node v5, since v0.start (0) < v5.start (12) 
and v0.end (17) > v5.start (12). Node v3 is not an ancestor 
of Node v5, since v3.end (9) < v5.start (12). 
 Parent-Child Relation Determination. Node v0 is a parent 
of Node v2, since v2.parentid (0) < v0. Node v4 is not a 
parent of Node v6, since v6.parentid (0)?v 4. 
 Sibling Relation Determination. Node v2 is a sibling node 
of Node v4, since v2.parentid (0) < v4.parentid (0). Node 
v4 is not a sibling node of Node v8, since v8.parentid (6)
 v4.parentid (0).
  Document Order Relation Determination. Node v1 is a 
preceding node of Node v2, since v1.start (1) < v2.start (3). 
Node v4 is a following node of Node v2, since v4.start
 (7) > v2.start (3).
  LCA Computation. The LCA of Node v3 and Node v5 is 
Node v0, since v3.start (4) < v5.start (8), v4.start (7) > 
v3.start (4) and v0.start (0) < v3.start (4).
 Complexity analysis: In constructing Triple, we only need 
depth-first traverse once, so its construction cost is O (N). 
Triple Code consists of three integers. In fact, each integer 
must be less than 2N. So the storage cost is O (N). The query 
cost of SR, PC, AD and DO is O (1). For LCA, in the worst-
 case, we need access at most d times labels of nodes. Because 
all of labels reside in memory, each access cost is O (1). So, the 
worst-case query cost of LCA is O (d). Here, N is the size of a 
tree and d is the depth of a tree.
 IV. ITRIPLE CODE
 From example1, we can see that computing LCA needs to 
access ancestors’ labels many times. The processing of LCA is 
deep influenced by tree depth. For deep trees, the LCA query 
will needs much time. To overcome this disadvantage, we 
propose a new labeling scheme, iTriple Code, to optimize the 
LCA query performance from O (d) to O (logd), where d is the 
depth of a tree.
 Instinctively, if we construct an ordered list with the 
information of its ancestors for each node, the LCA query cost 
will be greatly reduced by the binary query. However, that will 
increase label size largely. Then, we find an approach that we 
only need construct ancestor lists for leaf nodes. As shown in 
Fig.1(b), the ancestor list of a leaf node v only stores the start 
value of v?s ancestor from the root to its parent. Here, the list 
must be ordered because the start value of an ancestor must be 
less than the start values of its descendants.
 Definition 2(iTriple Code): The iTriple Code of a node v in
 an ordered XML tree T, is a quaternary < start, end, parentid, 
pt >, where start is the first value of an interval, end is the 
second value of an interval, parentid is the node ID of v’s 
44
parent, and pt refers to the ancestor list of a v’s descendant leaf 
node.
 In constructing the value pt of node u from down to top, we 
let u.pt equal to the pt of its first child. Fig2.(b) shows an 
example of iTiple Code. The determinations of AD, PC, SR 
and DO of iTriple Code are the same as Triple Code.
 Following, we will present how to compute the LCA by iTiple 
Code, shown as Theorem 5(find the LCA of two nodes) and 
Theorem 6(find the LCA of a set of nodes).
 Theorem5(LCA query of two nodes in iTriple). For two 
node u and v, let u.start < v.start. Then the LCA of u and v, 
lca’(u,v) = argmax{x.start : x.start u.start and x.start ??v.pt}.
 Proof. Let p = v1v2… vi…vk be the path corresponding to v.pt, 
where v1 is the root of a XML tree, vi = v and vk is a leaf node. 
First, for any node vj(i + 1 j  k), w must be a descendant of 
v. Then, u.start < w.start. So, lca’(u,v) must be a node vf (1 f 
i?1). From Theorem 3, lca’(u, v) must be the LCA of u and v.
 
 Theorem6 (LCA query of multiple nodes in iTriple). For a 
node set S, let u = argmin{x.start : x?S} and v = argmax
 {x.start : x ??S}. Then the LCA of all nodes in S, lca’(S) = 
lca’(u, v). 
Proof. The proof is the same as Theorem 4. 
 Algorithm1 shows the algorithm to compute the lowest 
common ancestor of two nodes by iTriple code. Lines 3-4
 process the case that one node is an ancestor of the other. In 
this case, the ancestor is just the LCA of the two nodes. Lines 
5-16 process the case that two nodes haven’t AD relationship. 
Lines 7-15 use a binary-search-like approach to find the 
maximal start value less than v1.start in v2.pt. From Theorem 5, 
we know that lca’(u,v) is just the right LCA of u and v. The 
time complexity of this algorithm is O(logd) in the worst case.
 Algorithm1: LCA computation in iTriple
 Input : iTriple code L, u and v
 Output: lca(u,v)  
1 begin
 2 v1 = argmin {x.start : x = u or v};v2 = argmax{x.start : x = u or v}
 3 if v1.start < v2.start < v1.end then
 4      lca(u, v) = v1 
5 else
 6        //find the maximal start value less than v1.start
 7        s = 1 ; t = length(v2.Iid);
 8        while s t do
 9            if v2.pt[mid] > v1.start then //mid = (s + t)=2;
 10                t = mid  1 
11          else
 12                if v2.pt[mid + 1] > v1.start then
 13                      s = mid; break 
14               else
 15                      s = mid + 1
 16      lca(u,v)=v(s)//v(s) is the node corresponding to s
 Complexity analysis: In constructing iTriple code, we only 
need once depth-first traverse. For each leaf node, we need 
copy ancestors in stack to its ancestor list. So, the construction
 cost is O(dN) in the worst case. iTriple Code consists of three 
integers and one pointer(space cost O(N)) and the extra space 
cost for leaf nodes is O(dN) in the worst case. So, the total 
storage cost isO(dN). The query cost of SR, PC, AD and DO is 
O(1). As shown in Algorithm 2, the worst-case query cost of 
LCA is O(logd).
 V. DISCUSSION
 So far, there have existed lots of approaches to process 
updates of labeling schemes, such as Float-point [11], CDBS
 [10], DDE [9], and Branch Code. The first two can be used to 
support updates of interval-based labeling scheme. CDBS and 
DDE can support updates of prefix-based labeling scheme. 
Branch Code uses splay tree to support updates of labels.
 However, they only considered updates of leaf nodes and the 
updates of interval nodes were rarely discussed in the past. 
Actually, the insertion or deletion of an interval will result in 
an error in answering LCA, PC and SR. For prefix-based and 
integer-based labeling schemes, the label of a node depends on 
labels of its parent and its ancestors. So, when inserting or 
deleting an internal node, the labels of its descendants must be 
changed.
 Using the method of CDBS, our labeling schemes are easy 
to be extended to support efficient updates of interval nodes 
and leaf nodes and make sure that our labelings can answer AD, 
PC, SR, DO, and LCA correctly after updating. Here, Like 
CDBS, we use bit string to represent start and end, but parentid 
is still represented with an integer. Then, Triple code can 
process updates of leaf nodes without relabeling existing labels 
and can process updates of internal nodes, only with relabeling 
its children. iTriple code also support updates of leaf nodes
 without relabeling existing labels. In deleting or inserting an 
interval node v, besides relabeling labels of v’s children, 
iTriple code only need update ancestor lists of v’s leaf 
descendants. So, for updates of internal nodes, iTriple code is 
less efficient than Triple code, but still more efficient than 
previous labeling schemes.
 VI. PERFORMANCE STUDY
 In this section, we empirically evaluate the performance of 
Triple code and iTriple Code proposed by us. In particular, we 
are interested in following aspects: 1) the performances of 
Triple Code labeling in three important measures: query time,
 storage code (label size) and construction time, 2) the influence 
of tree size/depth on construction time, storage cost and query 
performance of Triple code, 3) the performances of iTriple 
Code in three important measures in processing deep XML 
data and 4) the influence of tree depth on construction time, 
storage cost and query performance of iTriple code.
 A. Experiment Setup
 Here, we use five real XML datasets [12] including Sigmod
 (Num. of node:11526, avg./max.depth:5.14/6), Univ (Num.of 
node: 66729, avg./max.depth: 3.95/5), TPC (Num.of 
node:20001, avg./max.depth: 2.9/3 ), Mondial (Num.of 
node:22423, avg./max.depth: 3.6/5) and Nasa (Num.of node: 
476646, avg./max.depth: 5.58/8 ), and two kinds of synthetic 
datasets. The depth of one synthetic data set is from 10 to 60 
45
with and each tree has 105 nodes. In constructing them, we 
first generate a tree with 100 leaf nodes with the specified 
depth as a seed, where other nodes except the root have one 
child and the root has 100 children. Then, randomly construct 
the left parts of the tree. The node size of the other set is from 
105 to 106. We randomly select N-1 edges which can generate 
a tree, where N is the number of nodes. To evaluate the 
performance of query, we randomly generate 105 node pairs 
for each XML tree and each kind of query. Here, we only show 
the results of AD, DO and LCA. One reason is that Triple Code 
and iTriple code can answer SR and PC by comparing two 
integers and they are more efficient than other kinds of labeling 
schemes obviously. The other reason is the limitation of space. 
For comparisons, we implement Dewey code (a typical prefix-
 based labeling) and Branch Code (the state of art of labeling, 
an integer-based labeling). We don’t implement typical 
interval-based labeling, because it can’t support SR and LCA.
 We run all experiments on a PC running Ubuntu 11.03 with 
an Intel Quad 2.53GHz CPU and 8GB memory and implement 
four labeling schemes with C++. In them, Triple code and 
iTriple Code are supposed by us.
 B. Performance of Triple Code and iTriple Code
 Construction time. As shown in Fig.2 (a), Fig.3(a), and 
Fig.4(a), the construction time of Triple code in all of data sets 
is the least. For deep XML trees shown in Fig.5 (a), the 
construction time of iTriple code is far less than Dewey code 
and Branch Code and is very close to the time of Triple Code.
 Fig. 2. Results in real datasets
 Storage cost. As shown in Fig.2(b), Fig.3(b) and Fig.4(b), 
except for Univ and Nasa, the storage cost of Triple code is the 
least in all of trees. For deep XML trees shown in Fig.4(b), the 
storage cost of iTriple code is less than Dewey Code while the 
depth is more than 10, and in 60, its storage cost is less than 
Branch Code. Here, the storage code of iTriple code includes 
the cost of ancestor lists of all of leafs. We represent storage 
cost by total bytes/node size, and it is the same in the following 
parts in this paper.
 Query Performance. As shown in Fig.2(c-e) and Fig.3(c-e), 
in all of XML data, Triple Code has the best Query 
Performances including AD, DO and LCA. For deep XML 
trees shown in Fig.4(c-e), Tripe Code and iTriple Code have 
the best query performances including AD, DO and LCA. The 
query performances of AD and DO of iTriple Code are the 
same as Triple Code. The query performance of LCA of iTriple 
Code is better than Triple Code, which verifies our theories.
 C. Inuence of tree size on Triple Code
 Influence of tree size on construction time. As shown in 
Fig.3(a), the construction time of Triple code varies linearly 
with node size of XML trees. The influence of tree size on 
construction time of Triple Code is the least in three labeling
 schemes.
 Fig. 3. Influence of tree size
 Influence of tree size on storage cost. As shown in Fig.3(b), 
the storage costof Triple code has a little change with increase 
of nodes size. The influence of tree size on construction time of 
Triple Code is the least in three labeling schemes.
 Influence of tree size on query performance. As shown in 
Fig.3(c-e), the query time (including AD, DO and LCA) of 
Triple code has a little change with increase of nodes size. The 
influence of tree size on query performances of Triple Code is
 the least in three labeling schemes. 
D. Inuence of tree depth on Triple Code and iTriple Code
 Influence of tree depth on construction time. As shown in 
Fig.4(a), the construction time of Triple code and iTriple Code 
has a little change with increase of depth size. The influence of 
  
  
46
tree depth on construction time of Triple Code is the least in 
four labeling schemes. The influence of tree depth on 
construction time of iTriple Code is more than Branch Code 
and similar with Dewey Code.
 Influence of tree depth on storage cost. As shown in 
Fig.4(b), the influence of tree depth on storage cost of Triple 
Code and ITriple Code is less than Dewey Code and Branch 
Code. The influence of tree depth on storage cost of Triple
 Code is the least.
 Fig. 4. Influence of tree depth
 Influence of tree depth on query performance. As shown in 
Fig.4(c-e), the influence of tree depth on query time of iTriple
 Code is the least in four labeling schemes. For AD and DO, the 
influence of tree depth on query time of Triple Code is less 
than Branch Code and similar with Dewey code. For LCA, the
 influence of tree depth on query performance of Triple Code is 
less than Branch Code and a little more than Dewey code.
 In summary, Triple Code and iTriple Code have the much 
better performances on construction time and query 
performance than Branch Code and Dewey Code. Triple Code 
has the least storage cost in most XML data except for Univ 
and Nasa. For deep XML data, the query performances of 
iTriple Code are the best in four labeling schemes. Although its 
storage cost is high, it is worthy for its best performance on 
query time. The Influence of tree size on construction time, 
storage cost and query performance of Triple Code is less than 
Dewey Code and Branch Code. The Influence of tree depth on 
construction time and storage cost of Triple Code is the least in 
four labeling schemes. The Influence of tree depth on query 
performance of iTriple Code is the least in four labeling 
schemes.
 VII. PERFORMANCE STUDY CONCLUSIONS
 In this paper, we proposed two new labeling schemes,
 Triple Code and ITiple Code, which can support AD, PC, SR, 
DO and LCA efficiently. From experimental results, we can 
see they have better performances on construction time and 
query time than previous labeling schemes. For deep XML data, 
the query performances of iTriple Code are the best in four 
labeling schemes. Moreover, the influence of tree size on 
construction time, storage cost and query performances of 
Triple Code is less than Dewey Code and Branch Code. The 
influence of tree depth on construction time and query 
performances of iTriple Code is the least. Moreover, the two
 labeling schemes proposed by us are easy to be extended to
 support efficient updates of interval nodes and leaf nodes.
 ACKNOWLEDGMENT
 This research was partially supported by the grants from the 
Natural Science Foundation of China (No.61070055, 
91024032, 91124001); National Science and Technology 
Major Projectof the Ministry of Science and Technology of 
China under grant (No.2012AA010701, 2013AA013204) and 
the Research Funds of Renmin University(No.11XNL010); 
REFERENCES
 [1] P.F. Dietz, “ Maintaining order in a linked list,”  In Proc. of the 14th 
Annual ACM Symp. on Thery of Computing, pp.122-127, 1982. 
[2] Q. Li and B. Moon, “ Indexing and Querying XML Data for Regular 
Path Expressions,” In Proc. of The 27th int. Conf. on Very Large Data 
Bases, pp.361-370, 2001. 
[3] N.Santoro and R. Khatib: Labeling and implict routing in net-works. The 
Computer J. vol.28, pp.5-8, 1985. 
[4] C.Zhang, J.F. Naughton, D.J. DeWitt, Q. Luo, and G. Lohman, “On 
Supporting Containment Queries in Relational Database Management,” 
In Proc. Of the ACM SIGMOD’01 conference, pp. 425-436, 2001. 
[5] I. Tatarinov, S. Viglas, K.S. Beyer, et al: Storing and querying ordered 
XML using a relational database system. In: Proc. of the  ACM 
SIGMOD’02 conference, pp. 204-215, 2002. 
[6] P.E. O’ Neil, E.J.O’ Neil, S. Pal, et al, “Ordpath: Insert-friendly xml 
ndoe labels,” In:Proc. of The ACM SIGMOD’ 04 conference, pp. 903-
 908, 2004. 
[7] Yanghua Xiao Jihong, weiwang, et al, “Branch Code: A Labeling 
Scheme for Efficient Query Answering on Trees,” In: Proc. of the IEEE 
ICDE’12 conference, pp. 654-665, 2012. 
[8] X. Wu, M.-L. Lee, and W. Hsu, “A prime number labeling scheme for 
dynamic ordered xml trees,” In: Proc. of The IEEE ICDE’04
 conference, pp. 66-78, 2004. 
[9] Liang Xu, Tok Wang Ling, et.al, “ DDE: From Dewey to a Fully 
Dynamic XML Labeling Scheme,” In: Proc. of The ACM  SIGMOD’09
 conference, pp.719-730, 2009. 
[10] Changqing Li, Tok Wang Ling, Min Hu, “ Efficient updates in dynamic 
XML data:from binary string to quaternary string,” VLDB J,17(3),
 PP.573-601, 2008. 
[11] T. Amagasa, M. Yoshikawa, and S. Uemura, “ QRS: A Robust 
Numbering Scheme for XML Documents,” In: Proc. of The IEEE 
ICDE’03 conference, pp.705-707, 2003. 
[12] XML dataset, Http://www.cs.washingtion.edu/research/xmldatasets/
 47
