The Data Protection of MapReduce Using 
Homomorphic Encryption 
Xu Chen 
Department of Computer and Communication 
University of Science and Technology Beijing 
100083, China 
successcx@gmail.com 
Abstract-MapReduce is a programming model which can handle 
big data efficiently, but the security of intermediate data of 
Map Reduce is not well protected, and the operations on 
ciphertexts were not allowed. To achieve a trustworthy 
Map Reduce, there is a need to both protect the data ,as well 
as to allow specific types of computations to be carried out on 
encrypted intermediate data. Traditional encryption solutions 
can protect the data from being divulged, but they can't be used 
to compute on encrypt data, however a novel encryption scheme, 
called fully homomorphic encryption (FHE), could compute over 
encrypted data without decrypting it. In this paper, we propose a 
modified framework of Map Reduce using homomorphic 
encryption, in order to gain both the confidentiality of data, as 
well as the ability of computing on them. 
Keywords-MapReduce; homomorphic; data security 
I. INTRODUCTION 
MapReduce is a programming model which can process 
large data sets efficiently. Hundreds of MapReduce programs 
have been implemented and upwards of one thousand 
MapReduce jobs are executed on Google's clusters everyday. 
Firstly, MapReduce takes a set of input key/value pairs, and 
produces a set of intermediate key/value pairs. Secondly, 
MapReduce will group together the same key and pass them to 
the Reduce. And then Reduce will merge these values. In this 
process, the data of intermediate files are out of protecting, 
which make the data owner worry about the data 
confidentiality, if we encrypt the data using traditional 
encryption, computation will not be allowed on encrypted data 
and we therefore can't do any operation before Map or Reduce 
function. For e.g., we want to count the number of each word 
in lots of documents, but the word is dirty , before inputing 
Map function , we should do some operations on the source 
data to get valuable information, however the data was 
encrypted , we can't do any computation unless we decrypt it. 
Fortunately, there're some homomorphic schemes to support 
computations on encrypted data[1][2ITS][6]. In these schemes, 
given ciphertexts lfIl,ссс,lfIn that encrypts plaintexts 
7Tp ... ,7T 'f 7Tp ... ,7T h fi n ,l one want to compute over n, e can Irst 
compute over lfIl' ... , lfIn ,and then decrypt the result. If we use 
this encryption scheme to encrypt the intermediate data of 
MapRudece, we can then do functions which include add or 
978-1-4673-5000-6/13/$31.00 й20 13 IEEE 
419 
Qiming Huang 
Department of Computer and Communication 
University o/Science and Technology Beijing 
100083, China 
qmhuangcn@163.com 
multiply on ciphertexts correctly, with no information about 
7Tp ... , 7Tn .This not only protect the data confidentiality, but 
also keep the ability to operate data. In this paper, we propose 
a universal construction framework of MapReduce with key 
works as follows: 
First, the function Reduce need to find the same keys and 
gether them, however the keys are encrypted and the 
ciphertexts are generally not equal even when they encrypt the 
same plaintexts, so we propose a method to find the same key 
on ciphertexts. 
Second, we sketch out a prototype of Map Reduce which can be 
used under homomorphic encryption. This prototype brings in 
a transform module before Reduce function, which can find the 
same key on ciphertexts. 
This paper is organized as follows. We'll describe the 
homomorphic encryption in Section 2,and Section 3 will 
describe MapReduce, and then we will propose our framework 
in Section 4.At last, we conclude our work and tell some other 
related works in Section 5. 
IT. FULLY HOMOMORPHIC ENCRYPTION 
Fully homomorphic encryption was first propose by Gentry 
in 2009[1][3], The scheme include key generation algorithm 
KeyGens encryption algorithm Encrypts ,decryption 
algorithm Decrypts' and computing algorithm Evaluates' 
To make the result of computation on ciphertexts equal to the 
encryption of the same operate on plaintexts, 
Decrypts (sk, Evaluates (pk, C, lfI)) C(7T) .Gentry 
brings in algorithm, called bootstrap, which can recrypt the 
same plaintext using another public key without decryption. 
And then he bootstrap the ciphertexts before every evaluation, 
in order to make the decryption correctly. In 2010, another 
fully homomorphic encryption scheme called Fully 
Homomorphic Encryption over the Integers [2] was proposed. 
This scheme was more concise. The main process of these 
homomorphic encryption schemes are like figure 1. 
Generate key 
Encrypt data 
Bootstrap the ciphertexts to 
get fresh ciphertexts 
* 
decrypt 
Figure 1 
In order to be used in MapReduce, we use the homomorphic 
encryption as follows, which is a public key encryption scheme: 
We choose two big prime numbers A, B, and make P=A*B, 
and then we choose a random positive integer A, A is the 
secret key, and B should also be remain under cover. 
Encryption: 
C = (M + A * Ar) mod P (1) 
Decryption: 
M=CmodA (2) 
We can prove the properties of homomorphic of this scheme 
as follows: 
Given two ciphertexts ci ? (ml + A * Ar,) mod P 
c2?(m2+A*Ar2)modP, we compute the addition 
of ci and c2 ,the multiplication of ci and c2 as follows: 
CI *c2 =(111., *n;. +A*(41 *111., +42 *n;. +A* 41 * 42))mxlP 
Decrypt( CI * c2) = ml * m2 
So, this scheme is satisfied with add homomorphic and 
multiply homomorphic. 
TTT. MAPREDUCE 
MapReduce is a programming model and an associated 
implementation for processing and generating large data sets. 
It includes two modules: Map and Reduce [4]. 
420 
Map takes an input pair and produces a set of intermediate 
key/value pairs. 
Reduce takes the intermediate data which is output by Map 
as input and merge the same key. At last output the result. 
The Execution overview of MapReduce is as figure 2. The 
master assigned work of Map and Reduce to workers, the 
worker who is assigned a map task reads the contents of 
source files. And then output the key/value pairs, at this time, 
the worker which is assigned a reduce task will merge the 
key/value pairs. The output of the Reduce function is 
appended to a fmal output file. 
Figure 2 
IV. USING HOMOMORPHIC ENCRYPTION TN 
MAPREDUCE 
In order to use homomorphic encryption scheme above in 
MapReduce, we should do some change. First of all, we can 
see that the function of Reduce is to find the same keys. 
And then merge them, but as we all known that the keys are 
encrypted, and we can't find the same key just from the 
ciphertexts. So, we do the change as follows: 
Given ciphertext C ? (m + A * Ar) mod P , we get 
C 
* 
from the expression C 
* = C * B * R (R is a random 
positive integer). And then we can campare c
 * 
instead ofc, 
to find the same key. 
Proof: 
Given two ciphertexts ci ? (ml + A * Ar,)modP and 
c2 ? (m2 + A * Ar2) mod P 
And C 
* 
C * B * R c * C * B * R I I '2 2 
.: A* B=P 
:. c2* -C
 *
 I = ((c2 -cl)* B* R)modP 
= (((ml -m2) + A * (Ar' -Ar2)) * B * R)modP 
= (ml -m2)* B* RmodP 
.: P is very large 
:. If cl* = c2*, ml = m2 otherwise ml *- m2. 
Proof end! 
So, before we do the Reduce function, we can add a 
module, called transformation module, which can convert C 
to C * . The new framework of MapReduce is as follows: 
Figure 3 
To test our framework using c++, we do as follows: 
First, we encrypt a plaintext at client, and then deliver the 
ciphertext to sever, the sever map the ciphertext into many 
key/value pairs, and deliver the output of Map function to 
Reduce function. The Reduce function merges the key/value 
pairs, and output, the client decrypt at client at last. 
The encryption /decryption module at client like this: 
_ Encryption e; 
:. vector '.= j', ,:; - c ? 
. c=e.encrypt(m); 
Figure 4 
From the encryption method, we can see the time of 
encryption will mainly depand on the multiplication, as well 
as the length of A and B. We test the times of encryption when 
using different keys, the performance of them are as follows: 
TABLE 1 
Key Jength(A/B) Encryption(ms) Decryption( ms) 
16/16 1.55 1.61 
32/32 4.65 4.33 
128/128 12.45 10.32 
Next, the transform module MapReduce IS hke thIs: 
Figure 5 
421 
We transform the ciphertexts to other intermediate 
numbers and find out the same key using these numbers. The 
whole test result of new framework of MapReduce is like 
this: 
Key value 
8 1 
Key value 
36587 1 
22345 
99684 
11341 
11145 
r 
Key value 
36587 1 
22345 1 
Key value 
f"?"" 154883 
111341 
1 II 1 
Key value 
198675 1 
91341 
154883 
l U " 111341 Key value Key value 99684 1 r"""" 198675 1 22341 1 91341 1 
11145 1 198675 1 
Figure 6 
From the result,we can see that if the keys of source files 
are the same one , the ciphertexts of them usually not equal, 
but the results of transform module are equal, so we can also 
find the same key correctly. 
V. CONCLUDE AND FUTURE WORK 
Tn this paper, we propose a method to use homomorphic 
encryption in MapReduce, which first transform the 
intermediate data to another one, and then find the same key. 
Our future work include: firstly, this method can only find the 
same key but can't find out the bigger one of two words. We 
will do some research on how to sort the words in the near 
future. And then we will try to enhance the efficiency of 
homomorphic encryption . 
REFERENCES 
[I] 
c. Gentry, A fullyhomomorphic encryption scheme,Ph.D.dissertation, 
Stanford University, 2009 
[2] 
MY Dijk, C. Gentry, S. Halevi, and V. Vaikuntanathan,Fully 
Homomorphic Encryption over the Tntegers.;Tn Proceedings of 
EUROCRYPT. 2010, 24-43. 
[
 3
 ] 
C. Gentry, Fully homomorphic encryption using ideal lattices. ; Tn 
Proceedings of STOC. 2009, 169-178. 
[
 4
 ] 
Erik Riedel, Christos Faloutsos, Garth A. Gibson, and David Nagle. 
Active disks for large-scale data processing. IEEE Computer, pages 
68.74, June 200 I. 
[5] 
Z. Brakerski and V. Vaikuntanathan, Etlicient Fully Homomorphic 
Encryption from (Standard) LWE. ;Tn Proceedings of FOCS. 2011, 97-
 106. 
[6] 
C. Gentry, Toward Basing Fully Homomorphic Encryption on Worst-
 Case Hardness.;Tn Proceedings of CRYPTO.2010,116-13 
