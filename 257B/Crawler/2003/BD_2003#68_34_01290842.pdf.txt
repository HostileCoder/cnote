Embedded GNU/Linux - drawing the big-picture 
Nicholas Mc Guire 
OpenTech EDV-Research GmbH 
Mastelbach, AUSTRIA, A-2130 
der.herr@hofr.at, http://www.opentech.at 
Abstract 
Embedded GNU/Linux [l] [2] has become a serious option for industrial applications. It’s virtues 
are performance and stability. But, are stability and performance alone sufficient reasons for man- 
agement to consider it a serious alternative to  proprietary solutions? 
This paper gives an outline of what makes GNU/Linux valuable for industrial applications. Needless 
to say the outline is not complete. I t  would be an easy task to  fill the requested six pages with 
references to  successfully completed industrial projects alone! 
This article will try to create the big-picture of embedded GNU/Linux and embedded real-time 
Linux. The intent is to show that GNU/Linux is more than just a stable operating system. Rather, 
i t  is a rich and complete system of development tools, architecture specific components, debugging 
and testing environments, and, last but not least, source and project management software aswell 
as services. The aggregate sum of these is the strength of GNU/Linux, a fast evolving resource pool 
that is based on the solid foundation of the free software idea. 
1 Introduction 
There are many introductions to GNU/Linux 
and embedded GNU/Linux. Here we wish to  em- 
phasize the integrated picture, the framework of 
the GNU effort, and how embedded Linux builds 
on open-source facilities. 
2 Building the Big-Picture 
The first part of this big-picture is the available 
software pool. In this section we will take a look 
at the facilities available and show how this mesh 
of software, seemingly so chaotic in its develop- 
mental approach, integrates into a complete and 
coherent whole. 
2.1 Linux Kernel 
The Linux Kernel itself is a good, maybe the 
best, example of ”chaotic” development provid- 
ing a highly competitive environment, while, at 
the same time, protecting the rights of the indi- 
vidual developer with a clean license model, the 
GPL [4]. The GPL ensures both the rights of 
the community and the individual 
The GPL license model and the willingness of 
leading figures within the Linux community to 
share responsibility have been, and continues 
to  be, key issues for the ongoing Linux kernel 
project’s success. There have been other open- 
source projects, BSD for example, that have 
failed. These failures have been primarily due 
to dependence on a license that provided the in- 
dividual with little or no incentive to  do very 
much, as there was no ’’return on investment” 
0-7803-7852-0/03/517.00 02003 IEEE 1237 IClT 2003 - Maribor, Slovenia 
connected with the BSD style license. 
The Linux kernel project, was, from the very be- 
ginning, forced to  build on open standards that 
would find wide and enthusiastic acceptance. At 
the same time Linux has to  inter-operate with al- 
most everything to find its way into the existing 
computer and network infrastructure, 
Quite often Linux got its chance when a commer- 
cial component needed to be replaced, and the 
flexibility of the Linux kernel allowed develop 
ers to  do the job quickly and efficiently based on 
the open interfaces the Linux kernel project pro- 
vided. With time this lead to  support for twenty 
different processor families, and innumerable pe- 
ripheral devices. 
an approach that relied on openly available in- 
formation - on software technology. I personally 
believe that software is a science, not a set of 
products. 
Selling software concepts is the same as selling 
mathematical principles and ideas, the same as 
selling number theory or set theory, or the cal- 
culus. Mathematics could never have developed 
in a society in which mathematical theory and 
know-how were not in the public domain. 
The Free Software Foundation's projects are 
good examples of software development that 
manage to  accommodate, and respect, both com- 
mercial and individual interests. Free software 
makes it possible for every individual to  have 
the omortunitv to  build software that exactly . .  
tits thcir needs. Free software accommodates not 
only 'iriainsstrcam' developers, but also minori- 
ties, handicapped users, such as iiiyscilf, artists 
arid scientists, and allows them to use their full  
creative potcmtial, to exercise tlicir creativity un- [[. enciiiribered and unlimited by proprietary, re- 
Linux drivers and integralkm capabilities 
0 oocumented open interlaces 
o phications for writing dnvers 
good support lor many bLs systems 
strictive, or nonexistent software. 
Critics have claimed that freedom of software, 
and more generally the freedom of intellectual 
property, would impede development as there 
2.2 GNU/L' inux 
The Free Software Foundation [3] GNU project 
is probably the fastest growing software facility 
ever launched. At the core of the GNU project 
is the willingness to  provide communications in- 
frastructure, source management utilities, and a 
platform independent set of development tools. 
I t  is no surprise that the GCC project, a free 
compiler to  generate free software, lies at the 
very beginning of the development of GNU. This 
is not an illusionary freedom, it is a competitive 
freedom. It  is the idea of giving equal oppor- 
tunities to  a community of individuals and then 
seeing who produces the best code. 
The GNU concept is an important expansion of 
the traditional approach to  competitive science, 
would no longer be any incentive to  create new 
ideas and solutions. Aside from the simple fact 
that the very existence of GNU/Linux disproves 
this idea, the concept of the freedom of technol- 
ogy is at the root of the success of the industrial- 
ized nations. And those nations with the great- 
est intellectual freedom have been the most suc- 
cessful. Proprietary know-how has not lead, and 
will not lead, t o  technological evolution. Nor has 
the public domain technology eliminated the de- 
mand for specialization, for individual solutions 
for specific problems. 
Viewing software as a service, and not a prod- 
uct, eliminates the 'threat' of know-how being in 
the public domain. Recent discussions on logic 
patents within the EU have shown that there is 
no consensus in our sciety on this essential issue. 
Here is a choice yet to  be made. 
GNURinux Open-source community 
e Conferences that aim at delivering technology not selling brands 
0 Response time on mailing list is oien lower than on commercial "hot-lines' 
o Community interaction is a many-to-many wmmunication process wich results in many people correcting 
e Commercial hot-lines are many-lo-one communication easily resulting in errors staying un-detected 
e Open communication chanels allow wrelation detection 
0 Open source communication allows early detection of future development directions, 
erromous information "peer-review-nature' of open-source communication. 
YOU hardlv can be surprised by the wnlent of a new release in an open-source project 
. .  
.GNU/Llnux services for internet presentation'and project managment . ' 
0 mail ng I.st managrnent and source browsing tools 0 ,Webservers and web editing tools 
e open-source plattorms. sourceforge. osdl. gnu.org 0 database iools . . . . .  
. .  GNU/Linux source managment tools 
0 Platform inaependancy 01 source management syslems (you can even run hem Jnder. Windows!) 
0 data-base interfaces lor loging 
o interlaces lo mail ana web suosyslems 
. .  
e cvs. bk. etc. lor safe source managmont 
0 some browsing fac'lilies 
. .  
e act ve commuiry - talking to real humans : . , . .  
I \ 
\ 1 
I . ., \ 
. .  
GNUlLinux documentation and presentation tools ' , 
Strong lean towards'open stanoaras sirnpl.lies doc. and allows development 01 core comperence that will last. 
0 Core concepts are dgumenled ' : 0 Abundance . .  of documentations and literature. . .  
\ 1 
. . .  . . .  . .  
. .  . .  
. .  
, .  GNUlinux platform . .  abstraction tools . , . . .  . .  
. , 'a Architecture &ppc+ in deieiopment !OOIS,. 
. .  
0 kchilecture hdependancy of utilities and inlecaces . ' 
0 Architectureabstraction - its a Jconligure parameter onlyl . , .  . c . .  0 Cross debug tools . . . .  , 
2.3 Sub-kernel facilities Cutomizable boot-sequence/BIOS [6] 
Hard real-time demands [7] [8] [9] 
soft real-time demands [21 
The itemization above covers a general purpose 
operating system suited for server and desk-top 
systems as well as some embedded applications. 
But what specific demands are there in embed- 
ded industrial applications ? 
The open-source community has developed these 
'sub-kernel features' over the past years to  the 
1239 
point where they are well suited for industrial 
applications. 
but can be viewed conceptually as services below 
the kernel, as these services modify/control the 
kernel proper's behavior directly. 
see industry failing to  clearly understand the im- 
pact on industry's ability to  utilize open-source. 
of oPen-source Projects as we see them. Under- 
standing these and management con- 
cepts and software life cycle models to  fit them 
are vital to  opening this vast resource. 
These subkernel I features are part of the kernel, We introduce the specific communication models 
Kernel preemption 
3.1 The service picture of software 
0 Low latency 0 Fully preemlive kernel 
0 Bod a Linux.kernel as you! BIOS 
0 Provide full low-level coritrd of the harbware 
Especially the availability of soft and hard real- 
time cxtension to the Linux kerncl allow enibed- 
ded GSU/Linus to covrr the entire range of in- 
diistrial applications from cardiac arythniia con- 
trollers to 6OSl\V p l s  generators from SoftPLC 
to IIurnenoid'Robots [5]. 
2.4 GNU/Linux for Industry 
The picturc presen~ed above is nut simply n tuol 
(:haill for industrial applications. I t  is n Iieterog~- 
nous matris of software that  allows the construc- 
tion of subsets that fit individual tleniaritis, de- 
mand spanning embedded low-end systems all 
the way to clusters with thousands of CI'Us pro- 
cessing in parallel. 
G.UU/Linus is a complete software structure. 
'I'his completeness is due to the ability of the 
individual to add to the matrix at points where 
she/he finds pieces missing, thereby expanding 
Traditional development in industrial environ- 
ments is based on a one-to-many (IxM) commu- 
nication model. In recent developments of soft- 
ware life cycle concepts, such as the V-model, 
this has been reduced even further to  a hierar- 
chical one-to-one (1x1) communication system, 
bringing a specific developer to  a specific cus- 
tomer, communicating on the same level in their 
respective hierarchical systems. 
This concept assumes that  the exchange of spec- 
ifications, for the utilization of available technol- 
ogy, is the core issue in a development cycle, and 
that this information is interconnected between 
the individual levels only in a procedural man- 
ner. To overstate the case slightly, the V-model 
assumes that the layers are independent and that 
the procedural demands are communicated with- 
out the different layers needing to  know what is 
going on at the technical level. The program- 
mer knows nothing about management, and the 
manager does not know what POSIX is. 
The open-source model is an all-to-all, or many- 
to-many (MxM) model, that targets know-how 
transference rather than the exchange of spec- 
ifications. The underlying assumption is that 
through the transference of know-how, know- 
how grows on both sides, and multiple views of 
know-how are then applied to  a specific problem. 
this open technology almost daily. 
3.2 
Communication structure Of Traditional software life cycle concepts assume, 
open source: an assumption that I find to  be absurd, that 
technology is simply available. Free software as- 
sumes that technology is generated during its 
application and thus the continual development 
The technology picture of software 
In this second section we cover one specific prop- 
erty of free software development, one where we 
1240 
of technology can only take place if there is a 
know-how transfer in both directions. Unidirec- 
tional know-how transference leads to  technolog- 
ical starvation. 
Software projects are generally designed in the 
context of a company portfolio. This inherently 
limits the integration of such a product into a 
larger context. The integrative view, that is, not 
claiming that every editor and every utility-app 
is part of some master plan, is one of the great 
strengths of GNU/Linux. I t  is the product of an 
evolutionary model based on open standards for 
software technology. 
Industrial software is built upon the analysis of 
demands. However, for obvious reasons, not all 
demands can be satisfied by an individual prod- 
uct. This leads to  a definition of the maximum 
subset that can be provided with a given ef- 
fort, thus excluding some demands, and some 
groups, by design. As an example I would like 
to  note that not only are handicapped people 
often excluded from the ’mainstream’ software, 
but also linguistic minorities. For example, that 
part of the population in Sweden that speaks old- 
Swedish simply can’t get Microsoft products that 
support their language because there are ”only” 
800,000 people affected, and a special release for 
so ’small’ a group would not be profitable. This 
is an inherent result of closed frameworks. Cor- 
porate frameworks are generally closed, whereas 
GNU/Linux has an open framework, and can 
thus allow specialized components to  be inte- 
grated without problems into the mainstream. 
3.3 Software feedback cycles 
Traditional software follows the black box model. 
The customer buys a service in a box, uses 
the service, but is never allowed to  either open, 
or look into, the box. The problem with this 
paradigm is that it only works for simple ser- 
vices. Software is not a simple service, and the 
black box model doesn’t work. Imagine buying 
a car and not being able to  open, or look under, 
the hood. Should something go wrong with your 
car then you send it back to  the factory - or buy 
a new car. 
effective feedback requires informed users 
problem localization requires the ability to  
detect correlations 
the drive for improvements should come 
from the users, not only from the designers 
conceptual problems only are detectable if 
there is conceptual feedback 
1x1 or Mxl communication simply does not sat- 
isfy these demands for an effective feedback cy- 
cle. If it is supported by developers, MxM com- 
munication can, and does, fulfill these require- 
ments. Open-source software, based on the GPL, 
is one framework that provides MxM communi- 
cation, but it is not the only possible one. 
3.4 Hiding errors 
Looking at the development of scientific publi- 
cations since the 1970’s one can notice a strange 
phenomena - science itself seems to change, there 
are fewer and fewer errors. By the 1990s only 
success is deemed worthy of publication. Fail- 
ures are hidden. And to  what effect? 
Industry has reassessed the triangular wheel over 
and over again in the past decades. If one re- 
search group had published their findings on tri- 
angular wheels, simply stating that they don’t 
roll properly and are not usable, then industry 
would have been spared a great deal of develop 
mental work. Reinventing does not push tech- 
nology, reinventing simply wastes time, resources 
and the creative potential of engineers. 
The free software concept is to  publish errors, 
publish mistakes, publish disasters, t o  make fail- 
ures as well known as successes. One very good 
reason for this is that a concept that might lead 
to disaster in one area might very well lead to 
success in a slightly different one. Putting out 
a fire with water is a disaster when trying to 
extinguish an oil fire, but it works quite well 
with burning wood. Publishing this failure can 
be the basis for a new technology. The success 
1241 
of GNU/Linux is that failures are just as trans- ants, are being successfully utilized for factory 
parent as successes. Just look a t  kernel.org and automation, medical, robotics and telecommuni- 
think of what cation applications. Embedded Linux is ready 
might be. It was a 22MB (or 130 MB decom- 
pressed) disaster leading to  a restructuring of a 
number of subsystems in Linux, resulting in a 
lastig improvement of Linux as a whole! 
Industry’s traditional approach is to hide fail- 
ures. Industry has lost much due to this, but 
things still worked as long as the scientific com- 
munity went on publishing errors. At present, 
with the scientific community only publishing 
successes - and on occasion ’producing’ successes 
quite independent of the facts - the creativity of 
technological development is decreasing dramat- 
ically. 
The power of the free software concept is the 
availability of the underlying technology, a tech- 
nology that makes mistakes. A technology that 
is sometimes a chaotic branching set of half done 
ideas, put together in constellations that  have 
the potential for creating the other halves needed 
to make the compound structure work. Develop- 
ment requires knowledge, the know-how of fail- 
ures and successes. 
4 Conclusion 
Healthy open-source competition, in the free 
software community, is driving technology to- 
wards stability and improved performance, pro- 
viding exactly what embedded application de- 
velopers need. Open source CAN work, but it 
is not a systems that works by itseIf. It re- 
quires that the participants play by the rules of 
the free software community. These rules are 
sometimes hard to  get across to management, 
as they strongly contradict management’s tradi- 
tional idea of what a ’product’ is. 
Embedded and desktop Linux systems, includ- 
ing the hard and soft real-time enhanced vari- 
yet ready for the open-source concepts needed to  
make embedded Linux successful for them. This 
will change. 
Open-source projects often fail in industry be- 
cause proprietary software life cycle models are 
applied. To be a success, open-source software 
needs to  build on the integrative concepts of 
free software, and on open standards. The soft- 
ware life cycle must adopt the MxM commu- 
nication model, the community concept, and 
the error/feedback models, outlined above for 
GNU/Linux, in order to  provide the foundation 
for successful open-source projects. 
References 
[l] [GNU not UNIX] http://www.gnu.org 
[2] [Kernel] Linux Kernel developers site, 
http://www. kernel. org 
[3] [FSF] Free Software Foundation, 
http://www. fsf.org 
14) [GPL] GNU General Public License, 
http://www.gnu. org/copyleft/gpl. h tml  
[5] [RTLF] Real Time Linux Foundation Inc. 
http://www. realtimelinuxfoundation. org/event/eve 
[6] [LinuxBIOS] The Linux BIOS Project Home- 
Page, http://www. linuxbios. org 
(71 [RTLinux/GPL] RTLinux main devel- 
opers sites, http://www. rtlinux-gpl. org 
http://www. fsmlabs. corn 
[8] [RTAI] Real Time Application Interface, 
http://www. rtai. org 
[9] [ADEOS] Adaptive Domain En- 
vironment for Operating Systems 
http://www. nongnu. OTg/UdeOS/ 
1242 
