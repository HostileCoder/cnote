Using Active Networking to Thwart Distributed Denial of 
Service Attacks 
Scott Shyne 
AFRL/IFGA 
525 Brooks Rd 
Rome, NY 13441-4505 
shynes@rl.af.mil 
3 15-330-4819 
Abstract-Active Networking is primarily a DARPA- 
funded project focusing on mechanisms, applications, and 
operating systems research to develop a reconfigurable 
network infrastructure. The Active Network (AN) paradigm 
offers the attractive capability of carrying executable 
payloads that can change the characteristic of a given 
platform. 
The Active Network Backbone (ABone) has emerged as a 
testbed for developing AN projects. It is made up of 
government, educational, and commercial groups bound 
together with a common interest in Active Networking. 
This framework will provide a fertile ground for testing a 
new AN mechanism that will repel Distributed Denial of 
Service (DDoS) attacks. 
One such AN project exists at the Air Force Research 
Laboratory (AFRL)/Information Directorate. The focal 
point of our research is to implement a reaction mechanism 
based on AN technology to automatically repel a DDoS 
attack. 
Adam Hovak, Joseph Rio10 
BAJ? SYSTEMS Portal Solutions Inc 
11 1 East Chestnut Street 
Rome, NY 13440 
315-337-3510 
adam.hovak 1 joseph.riolo @esi.baesystems.com 
programmability. Conventional networks process routing 
information within the network and perform computations at 
individual nodes. An AN environment steps away from the 
conventional idea, allowing the network to be hollow and 
flexible [SI through the use of smart packets. These smart 
packets contain executable code that can be run on 
individual nodes as the packet traverses the network. This 
code can provide routing information, network management 
information, or just an Active Application (AA) for a 
foreign host. 
Allowing the execution of foreign code becomes a serious 
security threat as well as a powerful tool in dynamic 
network management. 
This paper will introduce the ABone, Execution 
Environments @E), and AAs. Then we will then delve into 
a description of Denial of Service (DOS) attacks as well as 
the intent of the ongoing research to integrate a DDoS 
mechanism into the AN infrastructure. Following are the 
steps we will take to fulfill our goal as well as a description 
of the problems we may incur. Possible future research 
topics will also be presented. 
TABLE OF CONTENTS 
2. ACTIVE NETWORK BACKBONE (ABoNE) 
1. INTRODUCTION 
2. ACTIVE NETWORK BACKBONE (ABoNE) 
3. ABONE COORDINATION CENTER (ABOCC) 
4. JOININGTHEABONE 
5.  EXECUTION ENVIRONMENT 
6. ACTIVE APPLICATIONS 
7. 
8. 
NODE OPERATING SYSTEM (NODE os) 
DISTRIBUTED ENIAL OF SERVICE (DDOS) 
9. AFRLRESEARCH 
10. CONCLUSION 
1. INTRODUCTION 
The B o n e  is a research testbed, tunneling through the 
Internet, designed for implementing AN technology. This 
fully distributed network interconnects researchers across 
the world and provides them with a functional testbed for 
large-scale experimentation and collaboration. 
The resources of the B o n e  are available to those 
individuals interested in furthering AN technology. In fact 
many nodes on the ABone are provided by AN research 
sites like AFRL, while the remaining nodes are furnished by 
DARPA’s Collaborative Advanced Internet Research 
Network (CAIRN) testbed. CAIRN was primarily designed 
as a testbed for advanced computer network protocols 
research and development [14]. 
AFRLhformation Directorate has begun a project focusing 
on Active Networking designed to promote network 
3. M O N E  COORDINATION CENTER (mocc) 
0-78034599-2/01/$10.00  2001 IEEE 
3-1103 
Creating a research testbed is very difficult without the 
benefit a governing body. The ABOCC is the body that 
monitors and manages the B o n e  nodes. 
Every day the ABOCC queries the status of ABone nodes 
and stores the information within a central database. This 
information includes available EEs, current daemon 
configurations, and node status e.g., whether or not the 
node is functioning properly. 
There are two kinds of nodes that exist on the B o n e ,  a core 
node and an edge node. A core node is a pt:rmanent 
addition to the D o n e  that is publicly available for testing 
purposes [ 5 ] .  It is expected to be available with minimal 
downtime and at least one running EE for application 
testing. The core nodes are managed by the ABOCC. 
An edge node is a private node that may be operational only 
from time to time. These nodes are used as a gateway to the 
D o n e  for both EE and AA developers [5]. Because of 
their unknown availability, edge nodes are not managed by 
. the ABOCC. 
4. JOJNINGTHEABONE 
As previously mentioned, the B o n e  is a testbed for 
developing AN projects, which includes educational 
institutions as well as government and commercial 
components. As a researcher in Active Networking, 
AFRL’s first goal was to become acquainted with the 
ABone. The best way to do this was to add a node to the 
ABone. 
To join the ABone, a node must meet certain requirements. 
First the AN daemon, anetd, must be installed. The primary 
function of anetd is parsing through incoming active packets 
and passing them to the appropriate EEs. Information and 
configuration specifications on anetd can be found at 
http://wmv. isi. eddabonel. 
The second requirement for joining the ABone is to create a 
public and private key pair. Running the makekey program 
(located under the directory anetdclient where the anetd 
package is installed) [13] generates this key pair. This key 
pair is used, for example, for authentication when executing 
load commands. In order for authentication to work, you 
need to register your public key 
The next requirement to becoming a member of the &Bone 
is to register as an ABone user. To do this, you must 
provide a machine running a supported platform of 
FreeBSD/x86, Lindx86, or Solaris/SPARC [ 131. This 
machine must have a continuous connection to the: Internet 
and be reachable through non-standard User Datagram 
Protocol (UDP) ports. The machine must also have minimal 
downtime, be registered in the Domain Name System 
(DNS) and be configured so that the command ‘hostname’ 
returns a correct value [ 131. 
Meeting these criteria alone will not make a system an 
ABone node. An EE must be installed so applications can 
be run. Two EEs are currently running on the B o n e ;  
Active Signaling Protocol (ASP) and Active Node Transfer 
System (ANTS). 
5. EXECUTION ENVIRONMENT 
An EE :is an environment that encapsulates an AA. This 
encapsulLation prohibits the application from performing 
such tasks that would disrupt the functionality of the 
machine on which it is running. Typical restrictions would 
include file system access and memory management [9]. 
An EE is started as a Unix sub-process by the AN daemon 
(anetd). On an ABone node, there are typically seven Unix 
accounts that run anetd: abocc, aneel., anee2, anee3, anee4, 
anee5, and anpub. Each account allows the installation and 
execution of multiple EEs. The level of trust needed by the 
EE chooses the account. The account anpub has the least 
amount of trust, and the account aneel has the most trust 
[2]. Anetd waits on specified active network UDP ports, 
catches the AN packets, reads the t y p e  ID, and passes them 
to the appropriate EE. 
An EE k.eeps malicious code from directly accessing critical 
areas of a computer. EEs do, however, allow the 
manipulation of a pseudo-permanent storage area referred to 
as the node cache. The code is allowed to both write to and 
read from the node cache. Once the alpplication has reached 
the end of its lifetime, the resources it occupied are released. 
There are currently three publicly aivailable EEs for the 
ABone: ASP, ANTS, and a Packet Language for Active 
Networks (PLAN). Currently only ASP and ANTS are 
permanent EEs. 
ANTS is an EE created at Massachusetts Institute of 
Technology by David Wetherall. AI‘JTS is a Java toolkit 
with a protocol programming model that allows users to 
customize the forwarding of their packets [6]. 
Unfortunately, the development of ANTS has diminished in 
the last few months. This makes it very difficult for a 
developer to choose this EE due to lack of support and 
documentation. 
ASP is a Java-based EE. It is suitable for implementing real 
and complex signaling as well as other network control 
protocols [7]. Development is currently underway on the 
ASP EE. 
AFRL has chosen ASP to be its development environment. 
The decision was made for two reasons, first because the 
ASP documentation is far superior to any other EE and 
second because ASP is actively being developed. 
3-1104 
6. ACTIVE APPLICATIONS 
An AA is a piece of executable code that comes in AN 
packets termed smart packets. 
When a smart packet arrives at a node, it is caught by the 
AN daemon (anetd). The code is then loaded into memory. 
Note that the code is executable so it must all be contained 
within one packet; fragmentation is not permitted. 
Once the code has been loaded, it is passed onto a transient 
EE. This EE is a Unix sub-process started by anetd. As we 
discussed earlier, the program is given limited access to the 
node resources. 
7. NODE OPERATING SYSTEM (NODE os) 
The Node OS is the underlying structure of the Active 
Architecture. An active node is under the control of an the 
Node OS [9], which negotiates among the EEs and ensures 
that they are kept separate from each other. Similar to the 
way in which an EiE separates applications, the Node OS 
protects the node by enforcing resource limitations on each 
EE. An example of a node’s architecture is shown in Figure 
1. 
,FIFll -qFl, Applications Active 
I Execution 1 I E,xecution 1 
Environment Environment 
Node OS 
Figure 1 - Node Architecture 
As shown in Figure 1, this Node OS manages multiple EEs 
and each EE may need to manage multiple AAs. 
There are currently three Node OSs available; Java-oriented 
Active Network Operating System (JANOS), Scout and 
AMP. 
Java-oriented Active Network Operating System (JANOS) 
is a Node OS with a primary focus of resource management 
and control and a secondary objective of information 
security and performance [15]. 
Larry Peterson is currently developing Scout at Princeton 
University. 
AMP is a software based platform that allows active code to 
be executed securely and safely with high performance. It 
will enable active nodes to control the EE of imported active 
code. In addition, AMP will defend against DOS attacks by 
enforcing resource usage limitation [ 161. 
8. DISTRI~UTED DENIAL OF SERVICE (DDOS) 
DDoS attacks have been a hot topic of conversation over the 
last few months. In February of 2000 we saw widespread 
attacks against mainstream Internet companies like eBay, 
Yahoo, and Amazon. 
http://whatis.com describes a DOS attack as, “an incident in 
which a user or organization is deprived of the services of a 
resource they would normally expect to have.” 
There are mainly two types of DOS attacks, operating 
system attacks and networking attacks. In an operating 
system attack, besiegers attempt to take advantage of 
security holes in specific operating systems. Upgrading or 
patching the operating system can usually prevent these 
attacks. 
Networking attacks are the most dangerous form of DOS 
attacks. These attacks most commonly target a computer’s 
network bandwidth or connectivity. The worst form of 
networking attack is the DDoS attack, which typically 
occurs when multiple computers attack a single victim. One 
“master” computer usually triggers this type of attack. Prior 
to the attack, the “master” computer exploits many 
machines and installs a trojan horse. This trojan horse waits 
until it receives notification fiom the “master” before 
beginning the attack. 
A problem with DDoS attacks is that they are very hard to 
trace. Since the attack comes from exploited machines, 
innocent people become suspects. This leaves investigators 
the option of tracing an attack to its source one router at a 
time. This tedious task is also only possible during the 
duration of the attack. Once the attack has ceased, it 
becomes difficult to acquire the origin of a DDoS packet. 
An investigator could search the logs of service providers if 
they could obtain the cooperation of the provider; however 
this process is very time consuming. 
When an investigator is tracing a packet, it is necessary to 
have the complete participation of the service provider. In 
many cases, this is difficult, unless they were directly 
affected by the attack. 
9. AFRLRESEARCH 
AFRL in Rome New York has undertaken an AN project 
dealing with DOS attacks. The purpose of this research is to 
automatically repel DOS attacks in an AN testbed. 
Following is a description of current research underway at 
AFRL. 
- .” 3-1105 
AFRL has taken a very broad look at DOS and has seen 
DDoS as most critical. We have explored many different 
types of DDoS attacks in an effort to combine reaction 
mechanisms to produce a DDoS prevention methodology. 
Our prevention methodology will be a conglomeration of 
DDoS prevention techniques as well as AFIU designed 
reaction mechanisms. 
Our research is divided into seven different areas: detection 
mechanisms, reaction mechanisms, distributiodreplication 
mechanisms, cleaning mechanisms, performance issues, and 
overall benefits. Following is an overview of our current 
research endeavors. 
Detection Mechanisms 
There is an abundance of detection mechanisms that can be 
used to identify a DDoS attack. The detection mechanisms 
that AFRL will consider are: 
Anomaly detection - Detects abnormalities in normal data 
flow. 
Packet readingflow analysis - Compares packet input to 
packet output on a router. 
Statistical packet analysis - Looks at packet traffic, based 
on a previous history. 
Rule based analysis - Analyzes data and reacts based on a 
match with defined traffic signatures. 
Once a detection mechanism has detected a DDoS attack, a 
reaction must be initiated. 
In order for this to happen, a coordination mechanism must 
formulate a reaction. 
Coodination Mechanism 
An integral part of AFRL’s DDoS reaction mechanism is its 
coordination mechanism, which is an active node that 
receives data from multiple mechanisms and establishes 
possible reactions. A coordination mechanism is the most 
dif€icult to implement because it needs to posses the ability 
to make decisions, dependant upon outside circunistances. 
This intelligence must be intuitive enough to recognize that 
an attack is occurring, the type of attack, and the appropriate 
reaction to repel the attack. A coordination mechanism has 
multiple reaction mechanisms from which to choose. 
Reaction Mechanisms 
Reaction mechanisms are the focal point of our .research. 
Currently we are looking at five dif€erent types of reaction 
techniques: a dynamic rate limiter, a tentacle detection tool, 
an egress filter, an ingress filter, and an attacker. The basic 
principle of each reaction mechanism is described below. 
Dynamic rate limiter - A reaction mechanism in which the 
router denies packet transmission from certain source 
addresses, thereby limiting the rate of traffic. 
Tentacle detection tool - A tool that follows packets 
backward through the Internet to discover their origin. 
Ingress filter - Prevents unwanted information from entering 
a given network [ 121. 
Egress fi’lter - Prevents unwanted infcrmation from leaving 
a given network. 
Attacker - A reaction mechanism that disables its attacker 
by incapacitating it. Note: This is a very aggressive tactic 
and not generally accepted. 
Once a reaction mechanism is selected, it needs to be 
strategicially placed in the D o n e .  This placement will 
allow a quick and focused reaction to lhe DDoS attack. The 
dispersicin of the reaction is handled by the 
distributiodreplication mechanism. 
Distribution / Replication Mechanism 
Another essential component of AFRL’s DDoS reaction 
mechanism is its distribution / replicalion mechanism. This 
fundamental piece of the architeclure distributes AAs 
throughout the network infrastructure in an attempt to both 
stop the attack and ascertain the identity of the assailant. 
For security purposes, we believe this mechanism should 
reside ori its own server. 
Cleaning Mechanism 
After a DDoS attack has been detected and prevented, the 
activation of a cleaning mechanism is necessary. This 
cleaning mechanism is intended to remove harmful DDoS 
code from any machine acting as a slave and participating in 
a DDoS attack. This is clearly a complex problem 
considering DDoS client code could be propagated through 
the network in a myriad of ways. 
Performance 
Network performance is a significant concern since many of 
our proposed reaction mechanisms require individual packet 
investigation. If our DDoS prevention techniques cause 
serious performance degradation, theireby causing network 
congestion, we would in essence ble causing a form of 
network DOS. The enhancement of the user’s quality of 
service is the point of our research. 
Benefits 
With the implementation of our A N  DDoS prevention 
system we expect to obtain an increased level of bandwidth 
and an automated security environment. Our vision is to 
have an anti-DDoS system which is self-manageable. This 
is important because manpower is getting ever more 
expensive. 
Possible Problems 
AFRL understands that problems may be encountered while 
performing research. We understand that designing a DDoS 
prevention mechanism to end all IDDOS attacks is not 
3-1106 
possible. Our intent is to start a course of research in hopes 
of furthering the current DDoS prevention techniques. The 
following is a list of problems that we may encounter 
throughout the course of our research. 
Performance degradation - As mentioned above, the DDoS 
system needs to be carefully designed so as not to create its 
own DOS. 
Limited DDoS detection - It is very probable that our 
prevention technique will not detect all types of DOS 
attacks. 
Security problems - Active networking is designed to run 
executable code on remote hosts. This is a serious security 
threat we must keep in mind when developing AAs. 
Standard Management problems - Like all projects we may 
run into time constraints, learning curves, or design 
problems. 
Transitional Opportunities 
Fault tolerant networking is the embodiment of active 
networking technology. With ease, the DDoS prevention 
mechanism could be integrated with a fault tolerant 
infkastructure, concentrating on strengthening networks by 
introducing fault tolerance capabilities against possible 
attack [ 171. 
Future Research Directions 
Active Networking has the potential to be the future 
networking environment. With such potential comes the 
need to pursue active networking research. For example, an 
AN could be used to improve Quality of Service (QoS) or as 
an active control channel to improve network bandwidth. 
10. CONCLUSION 
Active Networking is a prime technology candidate for 
developing a DOS prevention mechanism. ANs have the 
potential to ease the job of a DDoS investigator. If an active 
router can execute code based on traffic flow, destination 
and source address, tracing DDoS attacks may become 
easier. Active routers and switches could then report 
anomalous activity to an active node. This active node 
could parse through the reports, weed out the DOS attacks 
and decide upon the appropriate reaction. 
As always in research, ideas beget ideas. AFRL is prepared 
to look into a multitude of topics concerning DOS attacks. If 
a prevention method appears to have a significant advantage 
for preventing DOS attacks, it will be investigated for 
inclusion in our project. 
REFERENCES 
[ 11Internet: Technology Terms. Denial of Service. Online. 
Whatis.com. Internet. 17 Oct. 2000. Available URL: 
htcp:ll~~l~atis.co~~WhatlsDetinitioti_Page/0,4 152.2 I3591 ,O 
O.htm1. 
[2] Berson, Steven; Braden, Bob; Ricciulli, “Introduction to 
the D o n e ”  March 24,2000 
[3] Van, Van C “A defense against address spoofing using 
Active Networks” Massachusetts Institute of Technology, 
May 1997 
[4] Schwartz, Beverly “Smart Packets for Active Networks” 
BBN Technologies 
[5] Braden, Bob. Introduction to the ABone. Online. 
Information Sciences Institute. Internet. 25 Oct 2000. 
Available URL: http://ww.isi .edu/abone/intro.htrni 
[6] Wetherall, David. ANTS - an Active Node Transfer 
System. Online. University of Washington Internet 25 Oct. 
2000. Available URL: 
http ://mvw. cs. washington. eddresearch/networliing/ants/ 
[7] Rogers, Craig. ASP -EE in the ABone. Online. 
Information Sciences Institute. Internet 25 Oct 2000. 
Available URL: http://www.isi.edu/abone/ASP-EE.html 
[SI Maughan, Doug. Active Networks, Online. Defense 
Advanced Research Projects Agency. Intemet 26 Oct 
2000. Available URL: 
http:llvruvM.:darpa.miI/itolresearcll/anets/inde~. htnil 
[9] Braden,Bob; Cerpa, Alberto; Faber, Ted. “Introduction 
to the ASP Execution Environment” USC/lnformation 
Science Institute, August 11,2000 
[lo] ‘‘Denial of Service Attacks” Online. CERT 
Coordination Center / Carnegie Mellon University. Internet. 
26 Oct 2000 Available URL: 
li~:llv\~v.cert.or~ltech~tipsldenial_of_service.html 
[l 13 “ABone status check” Online. Information Sciences 
Institute. Internet 26 Oct 2000 Available URL: 
littp :/lwww.csl.sri.com/activate/abone-status/daily. txt 
[12] “Network Ingress Filtering” Online. Information 
Sciences Institute. Internet 26 Oct 2000 Available 
URL:ftp://ftp.isi.edulin-notes/rfc2267.txt 
[ 131 “ D o n e  Registration” Online. SRI International. 
Internet 26 Oct 2000 Available URL: https://abone- 
tcs. sdl.sri.com/registrationl 
[ 141 “Collaborative advanced Internet Research Network 
(CAIRN)” online. Information Sciences Institute. Internet. 
3 1 Oct 2000 vaailable URL: http:llwww.isi.edulCAIRN 
3-1107 
[15] “The janos Project” Online. University of Utah : programmable radios, intelligent transportation systems and 
School of Computing. Internet. 3 1 Oct 2000. Available adaptive networking. His current research focus includes 
URL: l~ttp:l/~~~~~~.cs.utah.edL~flw;/janos/ the areas of multi-level domain management, network 
intrusiori detection, and active networking. Mr. Shyne has a 
[16] “Security Infrastructure” Online. Network Associates B.S. and an M.S. in Computer Science from the State 
Inc. Internet. 31 Oct 2000 Available URL: University of New York Institute of Technology and is an 
http://~w.pgp.com/research/nailabs/di stributed/annp.asp active member of IEEE and AFCEA. 
[ 171 “Tolerant Networking” Online. Defense Advanced 
Research Projects Agency / Information technology office. 
Internet 2 Nov 2000 Available URL: 
h t t p : / / \ ~ ~ ~ ~ . d a r p a . m i i / i t o / r e s e a r c h / m t i l  
Adam Hovak is a Systems 
Engineer with BAE SYSTEMS 
Portal Solutions Inc. He is 
currently creating a DOS prevention 
mechanism in an AN environment. 
He is also supporting a multi level 
security guard, designed to provide 
a network common operational 
picture of multiple domains. His 
research is done for AFRL in 
Rome, NY. His work has also Ied him to help develop a 
Real Time Network Management program that dynamically 
predicts network traffic. He has a Bachelor of Scieince from 
Syracuse University and is currently working on his Masters 
degree. 
Joseph Riolo is a Principal Systems 
Engineer with BAE SYSTEMS 
Portal Solutions Inc. He has five 
years as a project manager of 
research and development, software 
development, and support-oriented 
contracts. He is highly skilled in 
network design, installation, 
management, security, and 
interoperability. Mr. Riolo also 
possesses extensive knowledge of various platforms and 
associated peripherals. His software capabilities range from 
object-oriented design with Unified Modeling ]Language 
(UML) to network and graphical user interface (GUI) 
programming. He has a Bachelor of Science from the State 
University of New York Institute of Technology and is 
currently working on his Masters degree. . 
Mr. Scott Shyne is a Computer 
Scientist with AFRL’s Information 
Directorate. In his 11 years of 
federal service, he has principally 
worked in the fields of software 
engineering and intelligent 
information processing applied to 
various domains including imagery, 
signal processing, software 
3-1108 
