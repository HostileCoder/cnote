VegaIndexer: A Distributed Composite Index Scheme for Big Spatio-Temporal
 Sensor Data on Cloud
 Yunqin Zhong1 2 ?, Jinyun Fang1, Xiaofang Zhao1
 1Institute of Computing Technology, Chinese Academy of Sciences, Beijing, China
 2Graduate University of Chinese Academy of Sciences, Beijing, China
 ?Corresponding author, Email: zhongyunqin@ict.ac.cn
 Abstract—With the prevalence of data-intensive geospatial
 applications, massive spatio-temporal sensor data are obtained
 and the big data have posed grand challenges on existing
 index methods based on spatial databases due to their intrinsic
 poor scalability and retrieval efficiency. Motivated by the
 deficiencies, in this paper, we propose a distributed composite
 spatio-temporal index scheme called VegaIndexer for efficiently
 answering queries from large collections of space-time sensor
 data. Firstly, we present a distributed spatio-temporal indexing
 architecture based on cloud platform which consists of global
 index and local index. Moreover, we propose Multi-version
 Distributed enhanced R+ (MDR+) tree algorithm for accel-
 erating data retrieval and spatio-temporal query efficiency.
 Furthermore, we design a MapReduce-based parallel process-
 ing approach of batch constructing indices for big spatio-
 temporal sensor data. In addition, we implement VegaIndexer
 middleware on top of the leading cloud platform, i.e., Hadoop
 and associated NoSQL database. The experimental experiments
 show that VegaIndexer outperforms the index methods of
 typical spatial databases.
 Keywords-Spatio-temporal index; big data management; We-
 bGIS; spatial cloud computing; Internet of Things
 I. INTRODUCTION
 In recent years, with the advancement of earth observa-
 tion technologies and prevalence of data-intensive geospa-
 tial applications such as WebGIS and Internet of Things
 (IoT)[1] applications, a large number of sensors have been
 deployed to measure physical properties of the real world,
 which has generated big spatio-temporal sensor data. The
 captured spatio-temporal data are significant for driving
 intelligence analysis and decision support in various appli-
 cation scenarios, such as monitoring temperature, humidity,
 carbon dioxide density and other environmental measure-
 ments to analyse global climate change. Typical spatio-
 temporal sensor data are high-dimensional, which contains
 spatial extent, time series and multiple measurement at-
 tributes. More specifically, the sensor data with space-time
 characteristics could be represented as record structure with
 spatial-temporal information and attributes, i.e., <ID, Spatial
 Location, Timestamp, Attr_1, Attr_2, · · · , Attr_n>.
 Spatio-temporal index method is one of the most sig-
 nificant issues for accelerating data retrieval and query
 efficiency. Both academic and industrial communities have
 presented different index methods for efficiently pruning
 irrelevant data while processing queries. The state-of-the-art
 index methods are based on single-node Spatial Database
 Management System (SDBMS) [2]. They perform well
 while processing small datasets. However, they have been
 posed on grand challenges while answering queries from
 large collections of spatio-temporal sensor data. First of all,
 they are inefficient due to poor scalability and strict transac-
 tional semantics of underlying SDBMS. Furthermore, most
 of them are designed for centralized computing environment
 rather than distributed cluster, with which the retrieval and
 query operations are executed serially. Besides, their limited
 storage and computing capabilities cannot support intensive
 access and query requests from numerous concurrent users.
 Driven by the above deficiencies, in this paper, we propose
 a distributed composite spatio-temporal index scheme called
 VegaIndexer for efficiently processing queries over big
 sensor data. The scheme takes advantage of the emerging
 spatial cloud computing[3] paradigm to provide a promising
 solution for accelerating retrieval and query efficiency. The
 design details of VegaIndexer are presented as follows.
 Firstly, we present a distributed indexing architecture for
 spatio-temporal data on top of cloud platform which consists
 of global index and local index. The global index is used
 to determine data block location, while the local index is
 used to find feature object within a block. Secondly, we
 propose Multi-version Distributed enhanced R+ (MDR+)
 tree algorithm for accelerating spatio-temporal data retrieval
 and query efficiency. MDR+ index could improve random
 access efficiency and support various query types, which
 includes spatial selection, temporal and attribute queries.
 In practical geospatial applications, the MDR+ indices are
 resident in distributed memory cache to avoid disk I/O la-
 tency, which guarantees real-time response to the concurrent
 users. Thirdly, we design a MapReduce-based parallel pro-
 cessing approach of batch construction indices for big spatio-
 temporal sensor data. In addition, we implement VegaIndexer
 middleware on top of the leading Hadoop cloud platfor-
 m [4] and NoSQL database (i.e.,HBase)[5]. We conduct
 comprehensive experiments to evaluate VegaIndexer and its
 SDBMS competitors(i.e., PostGIS and Oracle Spatial) with
 real geospatial application workloads. The results show that
 VegaIndexer outperforms its comparisons, e.g., its average
 index construction efficiency is about 4? 6 times better and
 its selection query performance is about 2.2 ? 4.3 times
 1713978-1-4799-1114-1/13/$31.00 ©2013 IEEE IGARSS 2013
better than that of SDBMS. Moreover, VegaIndexer has
 achieved super linear acceleration, e.g., its average speedup
 efficiency is improved by about 68.5% ? 116.3% while the
 number of cluster nodes increasing from 2 to 8. The rest
 of the paper is organized as follows. Section II presents the
 details of VegaIndexer. Section III describes the performance
 evaluation. Finally, we conclude this paper in Section IV.
 II. METHODOLOGY
 A. Architecture of VegaIndexer
 To meet the intensive accesses and retrieval requirements
 of geospatial applications, we design hierarchical
 architecture for VegaIndexer with multiple layers. Fig.1
 shows the VegaIndexer architecture. The bottom layer is
 Hadoop cloud platform, which is deployed on a scale-out
 cluster composed of commodity servers. Hadoop consists
 of two key components: Hadoop Distributed File System
 [6] and MapReduce [7], both of them are master-slave
 architecture, i.e., one master node controls several slave
 nodes. The HDFS depends on the local file systems (e.g.,
 Linux ext families) and the HDFS block files are stored
 on local disk. The MapReduce daemons are deployed on
 the same physical cluster as HDFS, and the master node
 is assigned as coordinator (JobTracker) and other nodes
 as worker nodes (TaskTracker). The NoSQL database is
 heavily depended on the storage and computing capabilities
 of underlying Hadoop platform. At this layer, we select
 HBase as the representative NoSQL database for its good
 scalability and high availability. HBase is a column-oriented
 key-value store, and each logical table consists of multiple
 column families. The data objects are physically organized
 in Column Family (CF), and each CF usually contains
 several columns. VegaIndexer could conveniently add
 new column family or column into an existing HBase
 table. The raw sensor data files are stored on Hadoop
 Distributed File System (HDFS) for long-term preservation,
 while the extracted data from spatial and temporal fields
 are represented as <KeyID, CF:Spatial, CF:Timestamp,
 CF_attr_v_1, CF_attr_v_2, · · · , CF_attr_v_n> pairs
 on HBase tables and each column family represents a
 property such as temperature, pollutant concentration.
 Real-time spatio-temporal sensor data transfer
 tunnel and collector (vTunnel)
 Spatio-temporal sensor data objects and stream
 Spatio-temporal sensor data buffer manager
 (vCache)
 Online spatio-temporal sensor data index
 Generator and Responsor
 In-memory MDR+ index for real-time data retrieval and
 traversal. The hot spots data are persistent in Cache as well.
 Disk-based MDR+ tree index and keyword B-tree index for
 high throughput access and near real-time data retrieval.
 Extracted data are stored in HBase and the MDR+ index is
 batch built in parallel on cluster nodes with MapReduce.
 NoSQL Database (HBase)
 Hadoop Cloud Platform
 Figure 1. The hierarchical architecture of VegaIndexer.
 The third and fourth layers are the kernel of VegaIndexer.
 The third layer is the online spatio-temporal sensor data
 index Generator and Responsor. The Generator is used to
 create, update and reorganize index periodically, while the
 Responser receives the client requests for index data access.
 We design disk-based MDR+ tree index and keyword B-
 tree index based on HBase for high throughput access and
 near real-time data retrieval. The index operation algorithms
 such as creation, insert, update and delete are embedded
 into Generator and Responsor. The Generator encapsulates
 MapReduce-based bulk-loading operator for batch construc-
 tion of spatio-temporal index. The indices are constructed in
 parallel by cluster nodes with MapReduce after loading the
 sensor data into HBase tables. The Responsor is a daemon
 which used to receive the client request of data retrieval.
 When clients request for data, Responsor firstly parses the
 request parameters and resolves the spatial extent and time
 interval. Then Responsor determines the effective MDR+
 trees that intersect with the MBR and time interval, and
 sends instruction messages to worker nodes that maintain
 the candidate MDR+ trees. These worker nodes execute the
 instructions in parallel and compute respective intermediate
 results. Finally, the master node collects the results from
 TaskTrackers and returns final result to clients.
 According to the access patterns of real applications,
 the index tree will be frequently retrieved for pruning the
 unqualified data objects and obtaining the candidate objects,
 so the index retrieval efficiency is critical for supporting
 concurrent real-time accesses. Moreover, once the data with-
 in a specific region and time interval are requested, the
 geographically adjacent data will probably be accessed in
 the near future. Thus, a distributed buffer manager termed
 vCache is designed for MDR+ index and hot spot sensor
 data to guarantee real-time access. Each node allocates a
 configurable memory pool, and vCache composes a bigger
 distributed caching pool by gathering small pools with
 consistent hashing protocol. E.g., there are 8 nodes and each
 node allocates 1 GB, the vCache capacity is 8 GB in size.
 vCache could configure variable memory size in terms of
 data volume. In the practical applications, all of the index
 data are persistent in vCache, but only parts of the spatio-
 temporal data are pre-fetched into vCache according to
 access frequency. The top layer is vTunnel, which is served
 as the sensor data transfer tunnel and collector. vTunnel
 maintains several real-time fist in first out (FIFO) queues,
 and each queue receives the sensor data stream from sink
 node of sensor network. Assume that the queue capacity is
 Qv and the number of queues is nv , the data stream will be
 flushed into VegaIndexer periodically while the accumulated
 data have reached to threshold size (i.e., nvQv).
 B. Multi-version Distributed enhanced R+
 VegaIndexer could bridges the gap between geospatial
 applications and cloud platform. As mentioned above, since
 1714
the Hadoop platform is master-slave architecture, our index
 scheme includes global index and local index. The global
 index is used to find the data blocks and the sensor data
 objects are determined by traversing local index tree. In
 this paper, the global index and local index are designed
 from scratch. More specifically, we revise the Quadtree
 index which serves as the global index, and Multi-version
 Distributed enhanced R+ tree is designed as the local index.
 The MDR+ designed as two-tiered distributed structure,
 which is inspired from Revised R? tree (RR?)[8] and
 consistent hashing policy. The sensor data objects are split
 by fixed time intervals, and there is a temporal RR? tree for
 respective time intervals. The intermediate node of MDR+
 index tree contains Minimum Bounding Rectangle (MBR)
 of spatial location and time interval of its children nodes.
 The real data objects are stored in the data block, and the
 leaf nodes of MDR+ are pointed to the objects. The sensor
 data objects are evenly distributed across cluster data nodes
 according to their weighted factor $, where $ is computed
 by spatial extent (e.g., MBR area) and consistent hash value
 of object ID, i.e., $ = combine(MBR, HashobjID).
 R
 R2
 R3R1
 R
 R1 R2 R3
 slave
 node 1
 slave
 node 2
 slave
 node 3
 Master
 Figure 2. The schematic of MDR+ tree index.
 As shown in Fig.2, the objects are organized into 3 groups
 at a given time interval [ts, te] in terms of their MBR.
 The root and non-leaf nodes are maintained by the Master
 and resident in vCache, while the leaf nodes are stored
 on 3 slave nodes. With the continuously growth of spatio-
 temporal sensor data, the index data volume will certainly
 increase as well. The spatial and temporal information are
 extracted as <ID, location> and <ID, time_interval> from
 data records respectively. Data objects are grouped and
 evenly distributed across cluster nodes, and each slave node
 maintains data within a specific spatial extent and time
 interval. Besides, the insert, creation, update and delete
 tasks are conducted in parallel by bulk-loading operator with
 Mapper and Reducer daemons.
 C. VegaIndexer Implementation
 We have implemented VegaIndexer middleware on top
 of Hadoop cloud platform. As show in Fig.3, the global
 index tree is maintained by Master Node of Hadoop cluster,
 while the local indices are persistent on Slave Nodes. The
 intermediate nodes of global tree represent the subregions
 of geographical layer, which is partitioned with spatial
 extent measurements. Each intermediate subregion should
 be subdivided into four quadrants, i.e., the non-leaf node
 has four child nodes. The leaf node of global index tree is
 pointed to the root node of local MDR+ index tree. The
 local index items (entries) are loaded into memory cache
 pools of slave nodes with VegaIndexer daemons booting up.
 In addition, the global index tree is preserved as metadata
 image, and the index data are kept in memory of master
 node to improve index traversal and pruning efficiency.
 Master Node
 Block pointer
 Index entry
 Slave Node
 Index Buffer
 Local Index
 Data Block
 Index Buffer
 Local Index
 Data Block
 ;
 Slave Node
 Index Buffer
 Local Index
 Data Block
 Index Buffer
 Local Index
 Data Block
 ; ;;
 Hadoop Distributed File System
 Hadoop MapReduce NoSQL DB (HBase)
 Global Index
 Hadoop Cloud Platform
 Figure 3. Implementation overview of VegaIndexer.
 III. PERFORMANCE EVALUATION
 The experiments are conducted on a cluster composed
 of 8 commodity servers(1 master and 7 slaves), and each
 node has two quad-core Intel CPU 2.13GHZ, 4GB DDR3
 RAM, 15000r/min SAS 300GB hard disk. All nodes have
 identical CentOS 5.5 server edition, JDK-1.6.0_35, PostGIS-
 2.0, Oracle Spatial 11gR2, Hadoop-1.1, HBase-0.94. The
 spatio-temporal sensor dataset size is about 875.3GB. The
 test data are divided into 35 time intervals, and each slave
 node is maintaining 5 intervals.
 The VegaIndexer is compared with PostGIS and Oracle
 Spatial by two experiments. As shown in Fig.4, the VegaIn-
 dexer performs best while batch building index for datasets
 in different size. Its execution time is about 4 ? 6 times
 less than that of comparisons, and obviously it performs
 better with larger dataset. Moreover, we conduct spatio-
 temporal selection query operation to evaluate the three
 schemes. Fig.5 shows the query performance of comparisons
 with different number of concurrent queries, and the query
 efficiency of VegaIndexer is 2.2 ? 4.3 times better than
 that of comparisons while the concurrent requests increased
 from 100 to 600. In addition, we evaluate the speedup of
 VegaIndexer with bulk-loading operations. During this test,
 VegaIndexer batch building indices for different datasets and
 1715
then loading them into vCache for further retrieval. Let % de-
 note the speedup efficiency, and ?, n denote the acceleration
 speedup and number of cluster nodes, where % is computed
 by ?
 n
 , i.e., % = ?
 n
 . As shown in Fig.6, VegaIndexer achieves
 super linear acceleration, and its average speedup efficiency
 is improved by 68.5%?116.3% (i.e., % ? [68.5%?116.3%])
 with n increasing from 2 to 8.
 Figure 4. Index construction performance of comparisons.
 Figure 5. Spatio-temporal selection query results of comparisons with
 different number of concurrent queries.
 IV. CONCLUSION
 We have proposed VegaIndexer, a distributed composite
 index scheme, to meet the requirements of big spatio-
 temporal sensor data. VegaIndexer distinguishes itself from
 existing methods as it combines WebGIS and IoT application
 access patterns and takes sensor data characteristics into
 consideration. Compared with the mature solutions, Veg-
 aIndexer has gained progressively improvement. Therefore,
 Figure 6. The bulk-loading efficiency with number of cluster nodes.
 VegaIndexer provides an efficient, feasible scheme for data-
 intensive geospatial applications.
 ACKNOWLEDGMENT
 This work is supported by National High Technolo-
 gy Research and Development Program (863 Program) of
 China (Grant No.2011AA120300 and No.2011AA120302),
 Knowledge Innovative Program of The Chinese Academy of
 Sciences(Grant No.KGCX2-YW-174), and The CAS Special
 Grant for Postgraduate Research, Innovation and Practice.
 REFERENCES
 [1] D. Miorandi, S. Sicari, and etc, “Internet of things: Vision,
 applications and research challenge,” Ad Hoc Networks, vol.
 10(7), pp. 1497–1516, 2012.
 [2] R. H. Güting, “An introduction to spatial database systems,”
 The VLDB Journal, vol. 3, no. 4, pp. 357–399, Oct. 1994.
 [3] C. Yang, M. Goodchild, and etc, “Spatial cloud computing:
 how can the geospatial sciences use and help shape cloud
 computing?” International Journal of Digital Earth, vol. 4(4),
 pp. 305–329, 2011.
 [4] Hadoop. [Online]. Available: http://hadoop.apache.org/
 [5] HBase. [Online]. Available: http://hbase.apache.org/
 [6] K. Shvachko, H. Kuang, S. Radia, and R. Chansler, “The
 hadoop distributed file system,” in 2010 IEEE 26th Symposium
 on Mass Storage Systems and Technologies (MSST’10), 2010,
 pp. 1–10.
 [7] J. Dean and S. Ghemawat, “Mapreduce: simplified data pro-
 cessing on large clusters,” Commun. ACM, vol. 51, no. 1, pp.
 107–113, Jan. 2008.
 [8] N. Beckmann and B. Seeger, “A revised r*-tree in comparison
 with related index structures,” in Proceedings of the 35th
 SIGMOD international conference on Management of data.
 ACM, 2009, pp. 799–812.
 1716
