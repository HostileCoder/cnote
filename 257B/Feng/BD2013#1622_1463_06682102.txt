Towards an OSGi based Pervasive Cloud Infrastructure
 Weishan Zhang1 Licheng Chen1 Qinghua Lu2 Yuan Rao3 Jiehan Zhou4
 1Department of Software Engineering, China University of Petroleum
 No.66 Changjiang West Road, Qingdao, China. 266580
 2Software Systems Research Group, National ICT Australia (NICTA), Australia
 3College of Software Engineering, Xi’an Jiaotong University, 710049 Xi’an, China
 4Department of Computer Science and Engineering
 University of Oulu, Oulu, Finland
 {zhangws}@upc.edu.cn
 Abstract
 Pervasive computing is converging with cloud comput-
 ing as with the development of smart cities. There arise
 the complexities from this convergence, like unprecedented
 large number of computing devices, flexibilities and adapta-
 tion of services for fitting personalization requirements from
 end users, expectations of powerful computing and storage
 capabilities of handhold devices, and so on. Therefore, a
 supporting infrastructure that can handle big data arisen
 from large number of devices, and can flexibly switch ser-
 vices at run time, is needed. Henceforth, in this paper,
 we propose an OSGi based pervasive cloud (OSGi-PC) in-
 frastructure which can make use both of the cloud comput-
 ing capabilities and component flexibilities from OSGi. We
 have evaluated the OSGi-PC in terms of performance and
 power consumption to show its usability.
 1 Introduction
 There is a growing trend for the convergence of differ-
 ent computing paradigms, such as cloud computing, per-
 vasive and mobile computing, service oriented computing,
 due to the needs of global availability and sharing of infor-
 mation. The applications of large Internet of Things (IoT),
 Internet of Services (IoS), Internet of People (IoP) are gain-
 ing increasing attention. We are confronted with increas-
 ing complexities in the converged computing world. These
 complexities mainly come from: the scale of an applica-
 tion becomes unprecedented large, the management of an
 application is much more difficult due to large number of
 involved devices, events and contexts, due to the hetero-
 geneity of networking, hardware and software, and so on.
 Very often, pervasive devices limited in their processing
 power and storing capability, which in turn requires col-
 laborations/interactions with more powerful nodes from the
 supporting computing infrastructure.
 In the convergence of different computing paradigms,
 there arises a computing paradigm called mobile cloud
 computing (MCC) [5]. The central idea of mobile cloud
 computing is to use backend powerful computing nodes
 from traditional cloud services to enhance capabilities of
 small devices. There are a number of MCC solutions pro-
 posed so far, such as Misco [6] and Hyrax [12]. But none
 of these proposed solutions focus on providing a compo-
 nent based solutions following a component standard, and
 therefore lack capabilities of flexible management of ser-
 vices and components, especially when services come and
 go between different nodes.
 Considering all these challenges and existing solutions,
 in this paper we propose an OSGi based pervasive cloud
 (OSGi-PC) solution which can be deployed to different
 IAASs. OSGi-PC can make use of the component and ser-
 vice management capabilities from OSGi, such as dynamic
 install/uninstall components and services, dynamic updates
 to components and services. We have done some prelimi-
 nary evaluations of the OSGi-PC in terms of its performance
 and latency, and shows the usability of it.
 The rest of the paper is structured as follows: We show
 an overview of the OSGi-PC in Section 2. Section 3 dis-
 cusses the prototype implementation of the OSGi-PC. We
 evaluated the prototype OSGi-PC in Section 4. Related
 work is described in 5. Conclusions and future work end
 the paper.
 2013 IEEE International Conference on Green Computing and Communications and IEEE Internet of Things and IEEE Cyber,
 Physical and Social Computing
 978-0-7695-5046-6/13 $26.00 © 2013 IEEE
 DOI 10.1109/GreenCom-iThings-CPSCom.2013.88
 418
2 Architecture of the OSGi-PC
 2.1 Brief introduction to OSGi and R-
 OSGi
 OSGi (Open Service Gateway Initiative)1 is a defacto
 standard Java module and service platform that implements
 a complete and dynamic component model. Its compo-
 nents( called bundles) can be remotely installed, started,
 stopped, updated, and uninstalled without requiring a re-
 boot which is advantageous for dynamic environment. The
 OSGi service registry allows bundles to detect the joining
 and leaving, and facilitates adaptation accordingly.
 In order to access services remotely from another OSGi
 service registry in a transparent manner, R-OSGi(Remote
 Services for OSGi)2 was proposed which runs as an OSGi
 bundle and facilitates distribution for arbitrary OSGi frame-
 work implementations. A service provider framework only
 needs to register a service for remote access. For every re-
 mote service, a local proxy bundle is generated that registers
 the same service. Local service clients can then access the
 remote services in the same way as local services.
 2.2 overview of OSGi-PC
 The general idea behind OSGi-PC is to promote a stan-
 dard way of building, managing services between different
 nodes in a pervasive cloud environment. In this environ-
 ment, different OSGi service frameworks can be dynami-
 cally added or removed, and services can be dynamically
 deployed and undeployed following the OSGi standard, as
 specified by the Remote Services in the OSGi compendium
 specification in chapter 1223.
 The OSGi-PC infrastructure is constituted by many dis-
 tributed OSGi based frameworks, which can be considered
 as two elements, namely client OSGi cloud service on small
 devices and server OSGi services on powerful cloud nodes.
 All these OSGi services should follow the same OSGi stan-
 dard in order to interoperate with each other, to support dy-
 namic deployment and replacement of OSGi services, and
 to scale well when new services are added. To support the
 dynamics of the OSGi-PC, there is a service discovery com-
 ponent dynamically discover what OSGi frameworks join
 the cloud ecosystem and what OSGi framework is dropped
 and removed from the system. An overview of the OSGi-PC
 is shown in Figure 1. Under the coordination of the discov-
 ery component, remote cloud service frameworks and local
 client service frameworks can be accessed indiscriminately.
 1http://www.osgi.org
 2http://r-osgi.sourceforge.net/index.html
 3http://www.osgi.org/Download/File?url=/download/r4v43/osgi.cmpn-
 4.3.0.pdf
 Figure 1. Overview of the OSGi-PC
 The OSGi-PC works following the Broker architectural
 pattern [1]. When an OSGi Framework (Framework1)
 started, it will set up a communication channel with the
 specified remote Discovery Component. If this is success-
 ful, then this OSGi framework will register itself to the
 discovery component with necessary information. Frame-
 work1 will also find other frameworks registered to the Dis-
 covery Component. At the same time, Framework1 will
 find provided services from those registered frameworks,
 generate local stubs of these remote services, and register
 these services with local OSGi service registry in Frame-
 work1. The process is shown in Figure 2. In this way,
 the accessing of remote services is more or less identical to
 the access of local services in the local OSGi Framework.
 When an OSGi Framework is forced to close because of ab-
 normal situations or network reasons, the Discovery Com-
 ponent can automatically remove it from the registry.
 3 Implementation of the OSGi-PC
 To implement the OSGi-PC infrastructure, we choose
 Apache Felix OSGi framework 4 for the cloud OSGi ser-
 vices because Felix is following OSGi standard to the best
 from our former experiences on EU LinkSmart project
 [18][19]. For small devices, we are using R-OSGi [14] to
 achieve distributed OSGi integration in order to realize a dy-
 namic cloud service infrastructure. R-OSGi is suitable for
 lightweight distributed communication among OSGi com-
 ponents in different Java Virtual Machines (JVMs).
 Considering the requirements on the management of
 OSGi frameworks distributed among different nodes, the
 specific implementation class diagram of OSGi-PC core
 4http://felix.apache.org
 419
Figure 2. Overview of the OSGi-PC
 classes are shown in Figure 3. The OSGiFramework
 interface defines some variables related to an OSGi
 framework and services in the framework, mostly sta-
 tus variables such as TEMPORARY_UNAVAILABLE,
 QUOTA_EXCEEDED, and so on. The Factory method de-
 sign pattern [8] is used to instantiate an OSGi framework in-
 stance, in order to improve flexibility for instantiation. Ser-
 viceProvisioner is designed to realize the dynamic deploy-
 ment of services and OSGi frameworks. When it detects
 new instances of OSGi frameworks, it will check whether it
 is needed to deploy new services to the new coming frame-
 work, and if so, it will then conduct the deployment of bun-
 dles (and services).
 3.1 Implementation of remote OSGi cloud
 framework
 The remote OSGi cloud framework is composed of mul-
 tiple OSGi frameworks running remotely, and coordinated
 by the discovery component, as show in Figure 4. As
 the discovery component is critical for the functioning of
 the OSGi-PC, it is running in a master-slave hot back up
 mode. Whenever something wrong with the primary dis-
 covery component, the back up component can assume duty
 immediately.
 In our implementation, we reuse code from Distributed
 OSGi (DOSGi) 5 , who is using ZooKeeper 6 as the discov-
 ery component, and hence ZooKeeper is used also by the
 5http://cxf.apache.org/distributed-osgi.html
 6http://zookeeper.apache.org/
 Figure 3. Core classes of the OSGi-PC
 Figure 4. remote OSGi cloud framework of
 the OSGi-PC
 420
OSGi-PC. For such a discovery mechanism as specified by
 DOSGi, standard meta-data information of OSGi compo-
 nents and services are used to disclose service information.
 These meta-data are also available to remote ZooKeeper
 Server (discovery component), therefore they can be ac-
 cessed in a standard way by any OSGi frameworks. Fig-
 ure 5 describes a module named Distribution Provider as in
 DOSGi that makes OSGi services available across container
 boundaries, i.e, different OSGi frameworks. It use special
 service properties to mark services that are to be exported
 remotely, following the same meta-data style as in standard
 OSGi components. The Distribution provider will create
 Endpoints for these services that are available outside the
 container. On the consumer side the Distribution Provider
 can create local OSGi services that act as proxies for the re-
 mote services and allow service consumers to use them to
 call the remote service, as in the Broker architecture pattern.
 As we said in Section 2, in order to instantiate an OSGi
 framework managed by the discovery component, it needs
 to implement OSGiFramework interface and then register
 the framework in the discovery component, for example
 this.registry=context.registerService(OSGiFramework.class
 .getName(), fwkImpl, properties), where fwkImpl is the
 actual OSGi framework instance with properties define its
 status and settings. After the registration, ServiceTracker or
 Declarative Services can then be used to manage services,
 as in standard OSGi environment, as shown in the following
 code list.
 Filter filter = context.createFilter(
 "(&(service.exported.interfaces=*)
 (service.exported.configs=
 org.pervasivecloud.configtype.cloud))");
 cloudServiceTracker = new
 ServiceTracker(context, filter, null) {
 @Override
 public Object addingService(
 ServiceReference reference) {
 registerRemotedService(reference);
 return super.addingService(reference);
 }
 @Override
 public void removedService(
 ServiceReference reference,
 Object service) {
 unRegisterRemotedService(reference);
 super.removedService(reference,service);
 }
 };
 3.2 OSGi on small devices
 Due to the popularity of Android devices, we choose
 Android as our starting point to run OSGi on small de-
 vices. R-OSGi [14] is an attempt to resolve the limitation
 of running services across different OSGi frameworks, as
 a lightweight and efficient communication mechanism be-
 tween distributed OSGi frameworks. The principle behind
 R-OSGi is shown in Figure 6.
 Figure 6. Accessing distributed OSGi frame-
 work using R-OSGi
 First, services register themselves to an OSGi container
 through the R-OSGi framework, then R-OSGi will open a
 service port (by default it is 9278) for listening to socket
 connections. The client bundle starts to create a socket con-
 nection to a specific server with designated port, and create
 a proxy bundle for a remote service. This proxy bundle has
 the same signature as the remote service, and is registered
 to the local OSGi container. Therefore, the invocation of
 remote services is the same as local services. This hides the
 complexities of underlying network connections, but what
 is more important is that this makes the accessing and man-
 agement of OSGi services in OSGi-PC handled in a unified
 and consistent way, and it does not matter a service is local
 or remote.
 In our implementation, we choose Felix as the R-OSGi
 container as Felix can run on Android 7. But R-OSGi can
 not run directly on Android as R-OSGi clients will generate
 proxies for remote services at run time 8, and the proxies are
 normal Java byte code instead of the Dalvik virtual machine
 readable byte code.
 At first, R-OSGi uses the ASM library9 for bytecode
 parsing and creating proxy objects. So, in order to R-OSGi-
 enable an Android client, we need to translate ASM to An-
 droid and add a method to convert the created proxy object
 from Java to Dalvik byte code. As the proxy object created
 by ASM is in Java bytecode, an OSGi dexification service is
 needed to transform a class in Java format to Dalvik format.
 The dex.jar contained in the Android SDK can be used with
 a minor modification by adding a dexification class to cre-
 7http://felix.apache.org/site/apache-felix-framework-and-google-
 android.html
 8http://linkality.org/software/remote-osgi-android/
 9http://asm.ow2.org/
 421
Figure 5. service discovery using Zookeeper in the OSGi-PC
 ate DexService. The last step is to integrate the DexService
 into the R-OSGi client creation process. For this purpose,
 we need to patch R-OSGi so it invokes our DexService after
 the client proxy class has been created by ASM, as outlined
 by the following code:
 File f=File.createTempFile("temjar",
 ".jar", new File("//data//local//tmp"));
 f.createNewFile();
 FileOutputStream fos =
 new FileOutputStream(f);
 fos.write(bytesfromjar);
 fos.flush();
 fos.close();
 DexService.class.getName(), null);
 DexService dexService =
 new DexServiceImpl();
 byte[] dexJar = dexService.
 createDexedJarFromFile(
 f.getAbsolutePath());
 File fileout = new
 File("/sdcard/temp.jar");
 if (fileout.exists()) {
 fileout.delete();
 }
 fileout.createNewFile();
 FileOutputStream fos2 = new
 FileOutputStream(fileout);
 fos2.write(dexJar);
 fos2.flush();
 fos2.close();
 return new ByteArrayInputStream(dexJar);
 4 Evaluation of the OSGi-PC
 For the initial evaluation of OSGi-PC, we developed a
 simple cloud based diary application which supports the
 uploading diaries to the backend cloud nodes, download-
 ing from backend cloud nodes, editing and deleting a diary.
 We mainly tested the latency (performance for the listed di-
 ary actions) , and also power consumption while conduct-
 ing these diary actions. For the measurement of power con-
 sumption, we show that for LCD screen and CPU, and Pow-
 erTutor10 is used for this measurement. The measurement
 of power consumption is on Hisense HS-U950. Currently
 the backend deployment of OSGi-PC is on Openshift11. We
 show the time taken for conducting the listed diary actions
 in Table 1.
 From this table, we can see that the average power con-
 sumption (mainly CPU plus LCD screen) while using the
 diary application deployed on OSGi-PC is around 4J, which
 is quite OK. For the time taken to upload a simple diary, it
 takes around 1 second, which is acceptable. For the down-
 loading of a diary, it takes around 3 seconds, much slower
 than the uploading. This is consistent with our experience
 of using Openshift: it is much faster for uploading (e.g. Git
 push) than downloading (e.g. Git clone)12. But this is just
 our superfacial experiences and we need to investigate more
 on this issue to see why it is such a case.
 The usage of OSGi-PC supports seamlessly switching
 of service providing OSGi framework at run time, without
 the need of human intervention. We have tested the per-
 formance of stoping one OSGi framework, and switching
 the diary management service to another framework at run
 10http://ziyang.eecs.umich.edu/projects/powertutor/
 11https://www.openshift.com/
 12Git is a software configuration management tool, see http://git-
 scm.com
 422
Table 1. Performance and power consumption measurement of OSGi-PC
 1 2 3 4 5 6 7 8 9 10 average
 upload
 LCD (J) 4.3 5.9 4.8 5.9 5.3 4.3 4.3 3.2 5.9 3.2 4.71
 CPU (J) 0.2 0.3 0.3 0.5 0.4 0.3 0.4 0.4 0.1 0.5 0.34
 time (ms) 718 820 616 821 3214 824 820 721 1023 1640 1121.7
 download
 LCD (J) 3.7 3.2 4.3 2.6 3.8 2.1 3.2 4.3 2.1 4.3 3.36
 CPU (J) 0.1 0.1 0.2 0.2 0.1 0.2 0.1 0.1 0.2 0.1 0.14
 time (ms) 1901 2491 4073 1442 2839 965 3004 4814 1151 4395 2707.5
 delete
 LCD (J) 4.8 4.7 3.2 2.7 6.9 3.7 2.6 3.2 3.2 3.2 3.82
 CPU (J) 0.1 0.6 0.5 0.1 0.8 0.5 0.5 0.7 0.5 0.4 0.47
 time (ms) 1214 524 411 441 414 440 308 320 1025 412 550.9
 time. These two OSGi frameworks are deployed on two
 different Openshift cloud nodes. Table 2 is a list of figures
 we obtained from the switching of OSGi framworks at the
 backend of OSGi-PC.
 Table 2. Performance of switching OSGi
 frameworks
 stop time start time start-stop (s)
 22:52:05 22:52:24 19
 22:57:29 22:57:42 13
 23:27:13 23:27:32 19
 23:44:08 23:44:24 16
 23:47:00 23:47:13 13
 23:50:42 23:50:54 12
 23:59:03 23:59:16 13
 0:50:17 00:50:38 21
 0:52:47 00:52:57 10
 0:59:12 00:59:27 15
 average 15.1
 As we can see from Table 2, it takes around 15 sec-
 onds to finish the round of stoping an OSGi framework, and
 then start a replacing framework to provide seamless ser-
 vice. This performance is OK. We need to test more on this
 when move the OSGi-PC backend to other cloud platforms.
 5 Related work
 There are quite a few work on mobile cloud computing
 [5] targeting enhancing the capabilities of small devices.
 For example Misco [6], Hyrax [12], which focus on mak-
 ing map-reduce [3] working on smart phones, in order to
 improve the performance of handhold devices. while OSGi-
 PC is an attempt to build a software component based perva-
 sive cloud infrastructure which can be deployed anywhere.
 The OSGi-PC does not exclude such ideas and Map Re-
 duce framework can be added to the OSGi service registry
 if needed.
 eXcloud [10][11] is a MCC middleware that supports
 fine granularity tasks migration. For OSGi-PC, currently
 the services and component dynamics are supported by
 the OSGi standard. We will work on adding a more
 powerful component to OSGi-PC for the management of
 service migration considering various context-awareness
 requirements[18][19] [21].
 CloneCloud [4] can clone the computation and data from
 mobile devices to backend heavy weight cloud nodes, and
 then return the computation results to the small devices
 which offload the tasks. The working of CloneCloud needs
 a modified Java Virtual Machine, which makes it unrealistic
 in practice [23].
 CloudLet [15] is another research on MCC, which makes
 use of virtual machine technology to instantiate services in-
 stances in nearby CloudLet, which can hopefully resolve
 the latency of wide area network, and limitation of network
 bandwidth. To make the CloudLet idea useful and practical,
 it has to have some sort of decision making on how to dis-
 tribute and manage the computation, data among different
 nodes in a flexible manner. Our work on OSGi-PC can pro-
 vide an interesting platform for CloudLet to manage such
 issues.
 Another relevant work on using R-OSGi as the underly-
 ing component technology for mobile clouds is discussed
 in [2], and proposed a service oriented architecture to re-
 solve the missing of Service Registry globally in R-OSGi.
 Similarly, the work on MCC-OSGi [9] uses OSGi Bundles
 as basic mobile Cloud service components, which can be
 transferred and run on different platforms without compat-
 ibility issues. In our work on OSGi-PC, we are targeting
 to follow the OSGi standard as much as possible, therefore
 we are making use of the Remote Service specification for
 achieving the registration of services across different cloud
 nodes.
 In [16], the authors presented a middleware called
 OSGi4C (OSGi for the Cloud), which allows seamless de-
 423
ployment of locally non-existent OSGi bundles and services
 on demand without requiring any changes to the OSGi plat-
 form. Because it is based on JXTA, an open and generic P2P
 platform, so it overcomes the issues of server-based solu-
 tions, and realize remote bundles discovery service. OSGi-
 PC is not only using R-OSGi for small devices but also mak-
 ing use of the Remote Service specification for its heavy
 weight backends. We will also include the P2P feature in
 the future based on the previous work [13].
 As discussed in [7], Mobile cloud computing aims to
 provide users seamless and rich functionality. Mobile cloud
 computing has overlapped with other areas such as peer-to-
 peer computing, application computing and context-aware
 computing, but it has its own challenges when embedded
 computers become more powerful. At that time, the infras-
 tructure, platform or application available as services will
 be of new forms. OSGi-PC is one efforts on addressing the
 infrastructure issue of MCC.
 6 Conclusions and future work
 The convergence of cloud computing, pervasive and mo-
 bile computing can help to enhance capabilities of small de-
 vices, as what is focused on by the research of mobile cloud
 computing and pervasive cloud computing [21]. There are
 emerging research prototypes on middleware and frame-
 works to realize the idea of mobile cloud computing. But
 few of the existing ones are focusing on component based
 cloud infrastructure in order to facilitate interoperability and
 ease the management of services and component migra-
 tions, following certain well-accepted standard. In this pa-
 per, we propose an OSGi based pervasive cloud infrastruc-
 ture (OSGi-PC) based on the OSGi remote service specifi-
 cation, using the Broker pattern as the main software archi-
 tecture style to implement the OSGi-PC. The evaluations
 shows that the OSGi-PC infrastructure has acceptable per-
 formance and power consumption characteristics.
 OSGi-PC infrastructure is currently deployed to Open-
 shift. We are working on moving to other cloud platforms
 such as Hadoop13, Amazon EC214. We will also deploy
 some services on OSGi-PC, for example context manage-
 ment [18], more powerful service and task migrations sup-
 port [5] based on our previous work on goal management
 [20][17][22] to make it really useful to develop applications
 in smart cities.
 Acknowledgements
 The server side of the OSGi-PC is inspired by
 the OSGi Eco-system idea from David Bosschaert
 13http://hadoop.apache.org/
 14http://aws.amazon.com/ec2/
 (http://pervasivecloud.blogspot.com/). For running R-OSGi
 on android, we also refered to Julian Schutte’s blog
 (http://linkality.org/software/remote-osgi-android/). The
 research in this paper is jointly supported by "Start up Funds
 of Top Professors in China University of Petroleum", "2011
 and 2012 the Fundamental Research Funds for the Central
 Universities in China", "2012 National Torch Plan Project in
 China (2012GH571817)", "2012 Shanxi Province Key Sci-
 entific and Technological Project (2012K11-08, 2012K06-
 18)" and "XJTU Post-Graduate Education Reform Project".
 References
 [1] Len Bass, Paul Clements, and Rick Kazman. Soft-
 ware architecture in practice. Addison-Wesley Pro-
 fessional, 2012.
 [2] Hao-Chung Cheng, Wei-Tsong Lee, Xin-Wen Wei,
 and Tian-Wen Sun. A novel service oriented architec-
 ture combined with cloud computing based on r-osgi.
 In Human Centric Technology and Service in Smart
 Space, pages 291–296. Springer, 2012.
 [3] Cheng Chu, Sang Kyun Kim, Yi-An Lin, YuanYuan
 Yu, Gary Bradski, Andrew Y Ng, and Kunle Oluko-
 tun. Map-reduce for machine learning on multicore.
 Advances in neural information processing systems,
 19:281, 2007.
 [4] Byung-Gon Chun, Sunghwan Ihm, Petros Maniatis,
 Mayur Naik, and Ashwin Patti. Clonecloud: elastic
 execution between mobile device and cloud. In Pro-
 ceedings of the sixth conference on Computer systems,
 pages 301–314. ACM, 2011.
 [5] H.T. Dinh, C. Lee, D. Niyato, and P. Wang. A sur-
 vey of mobile cloud computing: architecture, applica-
 tions, and approaches. Wireless Communications and
 Mobile Computing, 2011.
 [6] Adam Dou, Vana Kalogeraki, Dimitrios Gunopulos,
 Taneli Mielikainen, and Ville H Tuulos. Misco:
 a mapreduce framework for mobile systems. In
 Proceedings of the 3rd International Conference on
 PErvasive Technologies Related to Assistive Environ-
 ments, page 32. ACM, 2010.
 [7] Niroshinie Fernando, Seng W Loke, and Wenny Ra-
 hayu. Mobile cloud computing: A survey. Future
 Generation Computer Systems, 2012.
 [8] Erich Gamma, Richard Helm, Ralph Johnson, and
 John Vlissides. Design patterns: Abstraction and
 reuse of object-oriented design. Springer, 2001.
 424
[9] Fatiha Houacine, Samia Bouzefrane, Li Li, and Di-
 jiang Huang. Mcc-osgi: An osgi-based mobile cloud
 service model. In Autonomous Decentralized Systems
 (ISADS), 2013 IEEE Eleventh International Sympo-
 sium on, pages 1–8. IEEE, 2013.
 [10] Ricky KK Ma, King Tin Lam, and Cho-Li Wang. ex-
 cloud: Transparent runtime support for scaling mobile
 applications in cloud. In Cloud and Service Comput-
 ing (CSC), 2011 International Conference on, pages
 103–110. IEEE, 2011.
 [11] Ricky KK Ma and Cho-Li Wang. Lightweight
 application-level task migration for mobile cloud com-
 puting. In Advanced Information Networking and Ap-
 plications (AINA), 2012 IEEE 26th International Con-
 ference on, pages 550–557. IEEE, 2012.
 [12] Eugene E Marinelli. Hyrax: cloud computing on mo-
 bile devices using mapreduce. Technical report, DTIC
 Document, 2009.
 [13] Francisco Milagro, Pablo Antolin, Joao Fernandes,
 Weishan Zhang, Klaus Marius Hansen, and Peeter
 Kool. Deploying pervasive web services over a p2p
 overlay. In Enabling Technologies: Infrastructures for
 Collaborative Enterprises, 2009. WETICE’09. 18th
 IEEE International Workshops on, pages 240–245.
 IEEE, 2009.
 [14] Jan S Rellermeyer, Gustavo Alonso, and Timothy
 Roscoe. R-osgi: distributed applications through
 software modularization. In Proceedings of the
 ACM/IFIP/USENIX 2007 International Conference
 on Middleware, pages 1–20. Springer-Verlag New
 York, Inc., 2007.
 [15] Mahadev Satyanarayanan, Paramvir Bahl, Ramón
 Caceres, and Nigel Davies. The case for vm-based
 cloudlets in mobile computing. Pervasive Computing,
 IEEE, 8(4):14–23, 2009.
 [16] Holger Schmidt, Jan-Patrick Elsholz, Vladimir
 Nikolov, Franz J Hauck, and Rüdiger Kapitza. Osgi
 4c: enabling osgi for the cloud. In Proceedings of
 the Fourth International ICST Conference on Com-
 munication System software and middleware, page 15.
 ACM, 2009.
 [17] W. Zhang and K. Hansen. An Evaluation of the
 NSGA-II and MOCell Genetic Algorithms for Self-
 management Planning in a Pervasive Service Middle-
 ware. In 14th IEEE International Conference on Engi-
 neering Complex Computer Systems (ICECCS 2009).
 IEEE Computer SocietyWashington, DC, USA, 2009.
 192-201.
 [18] W. Zhang and K.M. Hansen. Using context awareness
 for self-management in pervasive service middleware.
 Handbook of Research on Ambient Intelligence and
 Smart Environments: Trends and Perspectives (1 Vol-
 ume), page 248, 2011.
 [19] W. Zhang, K.M. Hansen, J. Fernandes,
 J. Schuï£¡0ï£¡4tte, and F.M. Lardies. Qos-aware
 self-adaptation of communication protocols in a
 pervasive service middleware. In Green Computing
 and Communications (GreenCom), 2010 IEEE/ACM
 Int’l Conference on & Int’l Conference on Cyber,
 Physical and Social Computing (CPSCom), pages
 17–26. IEEE, 2010.
 [20] W. Zhang, K.M. Hansen, J. Fernandes, J. Schutte, and
 F.M. Lardies. Qos-aware self-adaptation of communi-
 cation protocols in a pervasive service middleware. In
 Green Computing and Communications (GreenCom),
 2010 IEEE/ACM Int’l Conference on & Int’l Confer-
 ence on Cyber, Physical and Social Computing (CP-
 SCom), pages 17–26. IEEE, 2010.
 [21] Weishan Zhang, Klaus Marius Hansen, and Paolo
 Bellavista. A research roadmap for context-
 awareness-based self-managed systems. In Service-
 Oriented Computing-ICSOC 2012 Workshops, pages
 275–283. Springer, 2013.
 [22] Weishan Zhang, Klaus Marius Hansen, and Thomas
 Kunz. Enhancing intelligence and dependability of a
 product line enabled pervasive middleware. Pervasive
 and Mobile Computing, 6(2):198–217, 2010.
 [23] Ying Zhang, Gang Huang, Xuanzhe Liu, Wei Zhang,
 Hong Mei, and Shunxiang Yang. Refactoring android
 java code for on-demand computation offloading. In
 Proceedings of the ACM international conference on
 Object oriented programming systems languages and
 applications, pages 233–248. ACM, 2012.
 425
