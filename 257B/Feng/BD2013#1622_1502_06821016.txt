Community Detection using an Optimized 
Label Propagation Algorithm 
Renjie Wan 
School of Communication and Information 
Engineering 
The University of Electronic Science and 
Technology of China 
Chengdu, China 
e-mail:wanpeoplejie@gmail.com 
Jingye Cai 
School of Communication and Information 
Engineering 
The University of Electronic Science and 
Technology of China 
Chengdu, China 
e-mail: jycai@uestc.edu.cn
 Abstract?The aim of social network analysis is to 
search for implicit, previously unknown, and 
potentially useful information. And community 
discovery is an important method to obtain these 
information. Label propagation algorithm can 
provide an efficient way to discover communities in a 
large-scale network .In each iteration, the label for 
each vertex is replaced with the most frequent label 
from its labels. However, this method will lead to 
many fragmentary communities. To modify this 
algorithm, we first select some influential nodes as 
seeds. And then a node will choose its label based on 
the summation of influences of its neighbors. Our 
experiment show that the communities discovered by 
the optimized algorithm is improved. 
Keywords ? label propagation; community 
discovery; label influence; social network 
I. INTRODUCTION
 A social network is the network of 
relationships and interactions among social 
entities such as individuals, groups of individuals, 
and organizations[1].As a hot issue which has 
been discussed by many scholars, community 
detection in a network is the gathering of 
network vertices into groups in such a way that 
nodes in each groups are densely connected 
inside and sparser outside. Generally speaking, 
when the algorithm operates on the network, the 
network will be split into k communities and also 
the number of edges between different 
communities is minimized. In most cases, the 
communities acquired by community detection 
algorithm satisfy the following constraints: 
1.C ? C = ?, ?i ≠ j
 2.? C Spans the node set in N
 In the hierarchical agglomeration 
algorithm[2], to sidestep the shortcomings of the 
hierarchical clustering method, the edge 
betweenness is introduced. And then this 
algorithm partition communities by greedily 
optimizing the modularity. However, one of the 
drawbacks of this method is that it cannot adapt 
to the large-scale networks.  
Inspired by hops in electric circuit, Wu and 
Huberman algorithm[3] divides the networks into 
k communities of approximately equal size. 
However, this algorithm requires some external 
parameter settings including the number and 
sizes of communities. 
Label propagation algorithm[4] is a kind of 
community structure detection algorithm from 
the idea of percolation with superior efficiency. 
When the algorithm begins, every node in the 
social network is initialized with a unique label. 
And then, every node in the social network 
adopts the label that most of its own neighbors 
have. When the labels of all nodes are invariable, 
the algorithm stops. It appears that nodes in a 
2013 International Conference on Cloud Computing and Big Data
 978-1-4799-2829-3/13 $26.00 © 2013 IEEE
 DOI 10.1109/CLOUDCOM-ASIA.2013.50
 360978-1-4799-2830-9/14 $31.00 © 2014 IEE
community are with a high density of internal 
links, whereas links between compartments have 
a comparatively lower density.  
Tibély and Kertész[5] have identified the 
label propagation algorithm as formally 
equivalent to minimizing the Hamiltonian for a 
kinetic Potts model. Baber and Clark[6] present 
label propagation algorithm with the objective 
function and also introduced two optimized 
algorithms to maximize the modularity and the 
bipartite modularity. 
Briefly, the outline of this paper is as 
follows. In Section 2, we introduce label 
propagation algorithm(LPA) and provide the 
improvement method for label propagation 
algorithm. And then we will evaluate 
performance of the algorithm in Section 3.At last, 
we give a conclusion in the last part of this paper. 
II. OPTIMIZATION OF LABEL
 PROPAGATION ALGORITHM 
A. The Introduction of LPA 
 When compared with other community 
discovering algorithms, LPA is a linear time 
algorithm to detect community structures in 
large-scale networks. The basic idea of the 
algorithm is to change the label of node 
according  to the number of its neighbors’ labels, 
and to choose the most labels  that  neighbors  
have as the new label. Firstly, every node in the 
network are all initialized with a unique label. 
And then, in each iteration, every node will select 
the label occurring with the highest frequency 
among its neighbors. Ref[6] provides an 
equivalent mathematical to represent the label 
updating process of LPA. It is as follows: 
	
 =   
(	, 	)         (1)
 
 where 	 is the current label for vertex u, 	
  is 
the new label for vertex v.The adjacency matrix 
 
 are all elements of {0,1}. And by 
construction, as the algorithm converges, nodes 
in a community all have same labels, which 
indicates that each node has more neighbors in its 
own community than in any of other community. 
This algorithm is easily understood and quickly 
implemented. During each iteration, it has a 
computational complexity ,which is O(m),linear 
in the number of edges in the graph. 
 By the way, the iterative process can be 
synchronous or asynchronous. If we update the 
labels synchronously, it will lead to oscillation of 
labels. Therefore, in Ref[4], the author decides to 
update the labels asynchronously. It means the
 label of a node will be decided not only by 
neighbors that have already been updated in the 
current iteration, but also decided by the 
neighbors that are not yet changed temporarily. 
 However, this algorithm has some 
drawbacks that cannot be ignored. For example, 
it returns different solutions (some of them of 
poor quality) in different realizations[7].The 
reason for this phenomenon is that every node in 
the network is initialized with a unique label. 
Though the labels are updated dynamically and 
asynchronously, it still leads to some isolated 
nodes or meaningless communities, which 
sometimes result in the incorrect division of the 
whole network. 
B. The Goodness of Community Division 
  To evaluate the community structure in 
networks, Newman and Girvan introduced  the 
modularity measure(Q value)[11], it makes a 
comparison between the observed density of 
edges within communities and the expected 
density of edges within the same communities 
in randomized networks. The value closer to 1 
indicates stronger community structure. And it
 has been adopted as an efficient approach to 
measure the goodness of community division 
and is expressed as: 
 =  ( ? )
 
                 (2)
 where a represents the fraction of edges that 
connect to vertices in community, and   is 
applied to the observed fraction of edges within 
community i. 
361
C. The Optimization of LPA 
One way to modify this standard algorithm 
is that we initialize the feed set which contains 
the most influential nodes with labels in the 
network instead of labeling all nodes with a 
unique label before the iterations. It will reduce 
the range of possible solutions that the algorithm 
produce. And then instead of considering the 
labels occurring with the highest frequency 
among neighbors, we take the node influence into 
account during the process of label updating. 
The selection of influential nodes in a 
network has been studied by several researchers. 
In this place, we use the method introduced  in 
Ref[8]. It considers the problem of influential 
nodes selection based on the propagation speed 
in social network information diffusion. 
 Then, we use !	"#(") to represent 
the potential influence a node could exert to all 
its neighbors. It is calculated based on the on the 
following equation: 
!	"#(") =  $

 
%()
             (3)
 $
is defined as the influence of an active 
node u exerted on one of its inactive node v[12].
 To calculate this parameter, the concept of 
neighbor graph of a node is adopted. And the 
definition of neighbor graph is as follows: 
&'(v) = '(*, +)            (4)
 * = {-} ? &(-)                    (5)
 + = {(, .)|, ./*, (, .)/+}       (6)
 Hence, according to the above definition, $

 can be acquired: 
$
 =
 0(")
 ∑ 0(8)9?%()           (7)
 As an example, Figure ? will show how to 
calculate the parameter $
. 
"
  Fig. 1. An example of neighbor graph of Node 1 
 In the above picture, degree of node 3 and 
node 2 in NG(v) are both 2. Hence, according to 
the definition, we can get that b< and b are 
all 0.5.   
Therefore, the main idea of our optimized 
algorithm is as follows: 
Input: A graph G 
1) Find influential nodes in the network, 
and set it to D 
2) Initialize the labels at all nodes in D. 
For example, for a given node x, 
Label(x)=x. And set their status to 
“Active” and the status of other nodes 
to inactive. 
3) While True: 
a) For each inactive node x>D, let 
Label(x)=S[Label( ),Label( ),
 …….Label( ? )],  ,  … … ?
 are active neighbors of node x. 
And S here calculates the total 
influence of  a community 
containing , ……?  and 
return the community which has 
the greatest influence 
b) Set the status of node x in a) to 
be active. 
c) If every node is included  by its 
most influential adjacent 
community, then stop the 
algorithm, else go to 3. 
362
III. ANALYSIS OF THE OPTIMIZED    
ALGORITHM
 To evaluate the performance of optimized 
algorithm, we will apply it to different networks 
from several aspects and then make a comparison 
between communities acquired by LPA and 
optimized algorithm.  
Fig. 2. A computer-generated network 
Our first applications are based on 
Zachary’s karate club network[9] and 
American college football network[10] ,both 
real-world networks. And also we will 
examine the performance by using a computer 
generated network. Zachary’s karate club 
network with 34 nodes and 78 edges is divided 
into two fractions due to leadership issues. 
And for the American College football 
network, vertices in the graph represent teams 
and edges stand for regular-season games 
between the two teams they connect. This 
network with 115 nodes and 616 edges is split 
into 12 teams. We have generated a large 
number of graphs with n=136 vertices, 
artificially divided into two communities. In 
Figure ?, we can find that each community has 
a center point.  
TABLE ?. Q VALUES FOR THE IMPROVED AND STANDARD 
ALGORITHM IN DIFFERENT NETWORKS
 Values in table above are calculated by 
running the original and optimized algorithm 
both 20 times on the three networks. As we can 
see, in the first two networks, when compared 
with Q values acquired by using standard Label 
Propagation Algorithm, the average Q values 
obtained through the optimized LPA  increase 
by approximately 1.66% and 2.66% respectively. 
Then if we analyze the result from the 
number of groups, when we apply the standard 
LPA to Zachary’s karate club network , the 
networks are always divided into 3 groups. 
However, only two groups can we get when the 
optimized algorithm is operated on the network 
just as what it is in the real world. 
On the other hand, in College Football 
network, these teams are divided into 12 
conferences and each team plays more games 
within its own conference than inter conference 
in the real world. But the standard LPA always 
split this network into 10 groups. And the result 
for the improved one is 11 teams, which are more 
closed to the actual condition. 
However, in the computer-generated 
network, the optimized algorithm perform poorly. 
The main reason for this phenomenon is that our 
improved algorithm is based on the summation of 
nodes’ influences. As we can see, in Figure ?, the 
center point in the larger community is 
surrounded by most of nodes in the network. And 
this also leads to the larger influence of this 
center node. Hence, when the process of 
community discovery begins, due to the greater 
influence of the larger community, the center 
point in the smaller community will be attracted 
to the larger community. Therefore, the standard 
algorithm can divide the network into two groups 
correctly and the optimized algorithm cannot get 
our desirable results.   
Though the performance of the optimized 
algorithm on the computer-generated is not so 
good, this results still illustrate that the optimized 
algorithm can present a stronger community
 when compared with the standard one. 
Another example, we use statistics collected 
363
from RenRen, a social network site like 
Facebook in China. And these dates are based on 
a users’ real friendship network with 11062 
edges and 420 nodes which stands for a person in 
the real word. It has been shown that 
communities in this network are made up by their 
similar interests. Or if they were schoolmates at 
one time, they are more likely to be included by a 
same community. 
To further evaluate the two algorithms, we 
still study it from the number of groups, group 
sizes and Q values.
 TABLE ?. THE NUMBER OF GROUPS AND AVERAGE GROUP 
SIZE OBTAINED  
Fig. 3. The relationships between the number of groups and 
group size 
From the figure above, we can find that 
label propagation algorithm divides the network 
into more than 26 groups. And 21 isolated nodes 
which do not belong to any groups exist in the 
final division. However, the result acquired 
through the optimized algorithm are split into 7 
groups and no isolated points can be found. On 
the other hand, the Q values we get through the 
two algorithms are as follows: 
TABLE ?. Q VALUE FOR THE RENREN NETWORK
 IV. CONCLUSION
 In this paper, we examined the performance 
of Label Propagation Algorithm on different real 
world networks. And also we introduce a method 
to modify this standard algorithm to optimize the 
Q value. In the comparison we make between the 
two algorithms, we find that the improved 
algorithm provide an useful way to improve the 
modularity Q. And also, the groups divided by 
the optimized algorithm are also stronger than the 
original ones.  
However, the modified algorithm still have 
some poor performances just as what we present 
in Section ?.  When we applied the optimized 
algorithm to the computer-generated network, a 
network divided into two groups each with a 
center point, the network cannot be split correctly. 
Therefore, it is worthy to be analyzed further. 
REFERENCES
 [1]. Masahiro Kimura, Kazumi Saito, Ryohei Nakano.
 Extracting Influential Nodes for Information Diffusion 
on a Social Network, Proceedings:22nd AAAI 
Conference on Artificial Intelligence and the 19th 
Innovative Applications of Artificial Intelligence 
Conference ,pp. 1371-1376,2007 
[2].Aaron Clauset, M.E.J. Newman, Christopher Moore, 
Finding community structure in very large networks, 
Physical Review E70, 06111 (2004) .8-12
 [3].F.Wu, B.A.Huberman. Finding communities in linear 
time:a physics approach. Eur. Phys.J.B 2004:331-338
 [4].Usha Nandini Raghavan, Soundar Kumara. Near linear 
time algorithm to detect community structure in 
large-scale networks,physics.soc-ph.19.Sep 2007.1-9 
[5].G.Tibély, J.Kertész. Physica A: Statistical Mechanics 
and its Applications 387,4982(2008)
 [6].Michael J. Barber, John W. Clark. Detecting network 
communities by propagating labels under constraints. 
Phys. Rev. E 80,026129(2009) 
[7].Jierui Xie, Boleslaw K. Szymanski. Community 
Detection Using A Neighborhood Strength Driven Label 
Propagation Algorithm. 10.1109/NSW.2011.6004645  
[8].Feng Zou, Weili Wu. Latency-Bounded Minimum 
364
Influential Node Selection in Social Networks. WASA 
2009, LNCS 5682,pp. 519-526,2009. 
[9].W.Zachary, An information flow model for conflict and 
fission in small group. Journal of Anthropological 
Research 33,452(1977) 
[10].M.Girvan, M.Newman, Community Structure in social 
and biological networks , Proceedings of National 
Academy of Sciences 99,7821(2002) 
[11].M. E. J. Newman, M. Girvan, Finding and evaluating 
community structure in networks, Physical Review E 
69,026113(2004) 
[12].Yitong Wang, Xiaojun Feng, A Potential-Based Node
 Selection Strategy for Influence Maximization in a Social 
Network, ADMA 2009,LNAI 5678,pp. 350-361,2009 
365
