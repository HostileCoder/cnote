Identifying RESTful Web Services in Service-oriented Software 
Product Line 
 
Jingjing Zhu, Hongming Cai, Fenglin Bu 
School of Software 
Shanghai Jiao Tong University 
Shanghai, China 
{jewel, hmcai}@ sjtu.edu.cn?bu-fl@cs.sjtu.edu.cn 
 
 
Abstract—In cloud computing, SaaS provider provides 
applications as services through the Internet. In order to 
enable SaaS provider to meet the requirements of different 
tenants as much as possible, we used the method for core asset 
development in service-oriented software product line to 
develop the service set provided by SaaS provider. Feature-
 oriented domain analysis (FODA) is a common used method in 
the core asset development, but when it is applied to the 
service-oriented software product line, it has some limitations: 
1) Before developing the core asset, we need to know what 
services are included in the core asset, but FODA is lack of the 
capability to identify what services need to be developed. 2) 
Multiple architecture styles of services in the core asset can 
lead to the result that the target system may use various 
methods to call for services and make the development of the 
target system complex. To solve these problems, firstly, we 
selected RESTful web service as the service type in the core 
asset to enable the target system call for services in a unified 
way. Then we proposed an object-operation-independent 
feature model according to the characteristic of RESTful web 
services. Finally, we designed a method to identify RESTful 
web services from the object-operation-independent feature 
model. Through the verification, the proposed method can 
support the identification of services in the core asset and 
enable the target system call for services in a unified way. 
Keywords-service-oriented software product line; feature 
model; service identification; RESTful web service; SaaS 
I.  INTRODUCTION  
Cloud computing refers to applications delivered as 
services over the Internet[1][2]. Software as a Service (SaaS) 
is a form to provide services. A SaaS provider need to meet 
the requirements of different tenants as much as possible to 
get more benefits. The requirements of the tenants in a 
specific application domain have many commonalities and 
variability. The core asset also reflects the commonalities 
and variability in a specific domain. So the service set 
provided by the SaaS provider is similar to the core asset in 
the software product line. For the similarity between core 
asset and service set provided by SaaS providers, we can use 
the method for core asset development in the service-
 oriented software product line to develop the service set 
provided by SaaS provider in a specific domain. Feature-
 oriented domain analysis (FODA) is a common used method 
in the core asset development phase, but when it is used in 
the service-oriented software product line, some problems 
arise, such as identifying what services need to be developed 
to form the core asset from the feature model, how to unify 
the architecture style of the services to enable the target 
system call for services in a unified way and so on. Among 
these problems, the most important one is identifying what 
services need to be developed to form the core asset, because 
the core asset is the fundamental of product development and 
the most important output in the core asset development 
phase. 
Since identifying what services need to be developed 
from the feature model is the most key point in the core asset 
development, many studies have been taken on it. Guo Ying 
etc.[3] proposed a method to combine service-oriented 
method and domain engineering together, and propose a new 
concept named Domain Service, and give the acquisition 
process and OWL-S based ontology definition of Domain 
Service. Dongsu Kang and Doo-Kweon Baik[4] proposed a 
service identification method that bridges the feature models 
of product lines and the business process models. Paul Istoan 
etc.[5] distinguished between two types of features: atomic 
and composite, this method makes the entire system to be 
ultimately built from atomic features, mapped directly onto a 
set of existing services. Though from a certain extent, these 
methods can solve the problem of service identification, the 
architecture style of services is not taken into consideration, 
and this is likely to lead the result that the target system may 
use various methods to call for services and make the 
development of the target system complex. 
For the above situation, in this paper we propose a 
method to identify what services need to be developed to 
form the core asset. In order to enable the target system call 
for services in a unified way, we choose RESTful web 
services[6][7] as the service type for the core asset. 
Therefore the identified web services need to be easy to 
develop as RESTful web services. According to the 
characteristic that RESTful web services are resources-
 based, we propose an Object-Operation-Independent(OOI) 
feature model that separates the business object and 
operation. And in order to describe OOI feature model 
clearly, we design a meta-model for it. Finally, we propose a 
RESTful web services identification method based on the 
2013 International Conference on Cloud Computing and Big Data
 978-1-4799-2829-3/13 $26.00 © 2013 IEEE
 DOI 10.1109/CLOUDCOM-ASIA.2013.65
 487978-1-4799-2830-9/14 $31.00 © 2014 IEE
OOI feature model to get what services need to be developed 
to form the core asset. 
In general, the main works of this paper are: 
1)  propose using the method for core asset development 
in the service-oriented software product line to develop the 
service set provided by SaaS provider, 
2) propose an Object-Operation-Independent(OOI) 
feature model that separates the business object and 
operation, and design its meta-model,  
3) propose a method to identify service sets from the OOI 
feature model and refine the identified service sets, finally 
acquire the web services need to be developed in the core 
asset, 
4) select RESTful web services as the service type in the 
core asset and verify the works by using an example of 
general cargo transport system domain. 
This method can be used in the core asset development 
phase of service-oriented product line. Before the core asset 
is developed by the SaaS providers, providers need to know 
what web services they need to develop. Then when domain 
experts and molders have modeled the OOI feature model, 
domain engineers can use this method to identify what 
RESTful web services need to be developed, and tell SaaS 
providers to develop. Through the verification, this method 
can identify what RESTful web services need to be 
developed in the core asset development phase. 
The remainder of this paper is organized as follows: 
Section 2 gives the overview of the identification method. 
Section 3 illustrates the meta-model and feature model that 
separates the business object and operation. Section 4 
introduces the approach of identifying services from the OOI 
feature model. Section 5 gives examples by using our 
approach and discussion of the approach. Section 6 is the 
conclusion. 
II. OVERVIEW OF IDENTIFICATION METHOD 
This method is used in the core asset development phase 
in service-oriented product line, and its objective is to 
identify what services need to be developed to form the core 
asset. Fig. 1 gives the overview of the service-oriented 
product line development process. 
       In Fig. 1, the activities surrounded by the dotted box are 
the activities in the identification method. The method is 
used in the core asset development phase of service-oriented 
software product line. According to the application 
requirements of all types of enterprises in a specific domain, 
domain experts and modelers analyze the requirements and 
model the OOI feature model together. OOI feature model 
will be described in detail in the following. When the feature 
model modeled, domain engineers use the OOI feature 
model to identify what RESTful web services need to be 
developed to form the core asset and what resources are 
involved in these services. The identification method 
includes three activities, and what each activity does will be 
introduced in detail in the following. After service 
identification, we will get a list of the RESTful web services 
needed to be developed and SaaS provider will develop 
services according to the list. SaaS provider can develop 
services that meet the requirements of different tenants so far. 
Fig. 1.   Overview of  Service-oriented Product Line Development Process   
In product development phase, when tenant has specific 
requirements, developers analyze the requirements and use 
services directly or develop its own system by using services 
provided by SaaS provider. Developer can subscribe to the 
service and get the services from cloud. 
This section introduces the overview of the identification 
method, and the position it is in the whole service-oriented 
software product line. Next section will introduce the OOI 
feature model. 
III. OOI FEATURE MODEL 
Feature model describes the commonalities and 
variability of all products in a specific domain. It is the 
fundamental for identifying and developing core asset. For 
RESTful web services are selected to be the services type in 
this paper, the traditional feature model cannot support 
service identification well. So we propose an Object-
 Operation-Independent (OOI) feature model that separates 
business object and operation to support the service 
identification. 
A. Meta-model of OOI Feature Model 
Fig. 2 shows the meta-model of the OOI feature model. 
From the meta-model, it can be seen that there are three new 
elements that are proposed by us and not included in the 
traditional feature model. The three elements are the 
subclasses operation feature, object feature and operated-by. 
The class feature represents commonalities or variability 
in a specific domain. The property type has two types of  
488
Fig. 2. Meta-model of OOI Feature Model 
values. Feature has two subclasses operation feature and 
object feature, these two subclasses help separate the 
business object and operation in the domain. Class 
relationship represents the relationship between features, and 
has four subclasses. Operated-by is a new relationship that 
represents object feature needs to be operated by operation 
feature. The class constraint represents some constraints 
between features that cannot be represented by relationship. 
Constraint also have two subclasses. 
B. Formal Expression of OOI Feature Model 
When model the OOI feature model, there are some 
constraints need to pay attention to: 
- the object feature need to be the parent node of the 
related operation feature, 
- the relationship between object feature and related 
operation feature need to be operated-by, 
- in the normal case the secondary node is an object 
feature. 
According to the meta-model, the final feature model can 
be represented as FM. 
Definition 1. OOI feature model is represented as FM = 
(F, R, C). 
OOI feature model is mainly composed of feature set F, 
relationship set R, and constraint set C. 
Definition 2. Feature set is represented as F = (FName, 
FType, Fdescription, FC), FC = (OBF, OPF). 
FName represents the name of the feature. FType 
represents the type of the feature. Namely the feature is 
mandatory or optional. Fdescription represents the 
description of the feature. FC represents which class is the 
feature belonging to, either OBF or OPF. OBF represents 
object feature and OPF represents operation feature.  
Definition 3. Relationship set is represented as R = 
(Rname, RParent, RChild, RC), RC = (Composed-by, 
Implemented-by, Specialization, Operated-by). 
Rname represents the name of the relationship. RParent 
represents the parent node in a relationship. RChild 
represents the child node in a relationship. RC represents 
which class is the relationship belongs to, Composed-by, 
Implemented-by, Specialization or Operated-by. 
Definition 4. Constraint set is represented as C = 
(CName, CFormer, CLatter, CC), CC = (Require, Exclude). 
CName represents the name of the constraint. CFormer 
represents the former feature in the constraint. CLatter 
represents the latter feature in the constraint. For example, in 
the constraint A requires B, CFormer is A and CLatter is B. 
CC represents which class is the relationship belong to, 
Require or Exclude. 
This section introduces the meta-model and the formal 
expression of the OOI feature model, and the next section 
will introduce the identification method of RESTful services 
from the OOI feature model. 
IV. IDENTIFYING RESTFUL WEB SERVICES 
Through the feature modeling activity, we get the OOI 
feature model which shows commonalities and variability 
between products in a specific domain. Then we will identify 
services through analyzing OOI feature model. 
Since we select RESTful web services as the type of 
services, resources become the main focus in the 
identification method. Fig. 3 shows the identification process 
of our method. 
There are three activities in the whole process. Activity 1 
dividing features into groups to form the candidate service 
sets. Activity 2 refining the candidate service sets to get 
service sets. Activity 3 defining RESTful web services from 
the service sets to get the services need to be developed in 
the core asset development phase. The three activities will be 
introduced in detail in the following sections. 
A. Dividing Features into Groups 
 The first activity of the identification method is dividing 
features into groups to form the candidate service set.  
Definition 5. Candidate service set is a subset of the 
feature model,  
 
root
 n
 i i
 FCSFM +=
 =
  1  (1) 
 )( FFFCS ii ?=          (2) 
A candidate service set CS is composed of some features 
in the feature model, and the feature model is the union set of  
Fig. 3. Identification Process of RESTful Web Services 
489
all candidate service sets and the root feature. 
When dividing features into candidate service sets, we do 
as following steps. 
Step 1. Find key feature used to group. Since there is the 
constraint that in the normal case the secondary node is an 
object feature, and the main concern of RESTful web 
services is resources (i.e. business object). The feature 
represented by the secondary node of the feature model is 
selected as the key feature of each candidate service set. 
Step 2. Grouping features according to the key feature. 
When the key feature is selected, then all features in the 
feature model will be divided into groups according to the 
relationships between the key feature and themselves. 
Grouping rules are: 
- in a relationship R, if the RParent is the key feature, 
then RChild is grouped into the key feature’s candidate 
service set. 
- in a relationship R, if the RParent is already in a 
candidate service set, then RChild is grouped into the same 
candidate service set. 
B. Refining Candidate Service Set 
After the activity of dividing features into groups, we 
will get a series candidate service sets. Since the candidate 
service sets are coarse-grained, developing RESTful web 
services according to the candidate service set is not proper. 
The candidate service sets need to be further refined to get 
services set in moderate granularity. 
When refining candidate service set, the object feature is 
also the main focus, and the method is composed of the 
following steps. 
Step1. Deciding whether to refine the candidate service 
set according to the number of object features in the 
candidate service set.  
If the number of object features in the candidate service 
set is only one. Then the candidate service set is not needed 
to be refined. If the number of object features in the 
candidate service set is more than one. Then the candidate 
service set needed to be refined. 
Step 2. Extract new service set from the candidate 
service set needed to be refined.  
If a feature is an object feature in a candidate service set, 
then form a new service set that the key feature is the object 
feature. All features associated with the key feature will be 
added to the new service set. And all operation features 
associated with the key feature’s parent feature will also be 
added into the new service set.  
Step 3. Refining new service sets to form the final 
service sets. After all object features in the candidate service 
set forming new service sets, delete the service sets that the 
key feature has child object feature. 
C. Defining RESTful Web Services 
After the activity of refining candidate service set, we 
will get a series service sets. However, only service sets are 
not enough. Developer cannot develop RESTful services 
according to the services sets that composed of features. So 
we need to define RESTful services that need to be 
developed from the service sets. Then this section will 
introduce the approach to define RESTful web services from 
the service sets. 
For each service set, there is an object feature in the set 
and many operation features. Then analyzing the operation 
features. 
Case 1. if the operation feature is one of the types add, 
delete, get, update, analyze that the resource it operated is the 
object feature itself or a collection of the object features or a 
property in the object feature. Then merge the operation 
features all of this type with the resource it operated group 
by the specific resource to form a RESTful web service; 
Case 2. if the operation feature is not one of the four 
types add, delete, get, update, then analyze what atomic 
operations are included in the operation feature, and whether 
each atomic operation belongs to the four types operations or 
not. If an atomic operation belongs to the four types 
operations, then follow case 1 to get a RESTful web service. 
If an atomic operation does not belong to the four types 
operations (i.e. the operation is a complicated processing 
procedure), then regard a service provided the operation as a 
resource, and then the service resource included a get 
operation as a RESTful web service. 
D. Develop RESTful Web Services 
After the activity of defining RESTful web services, we 
will get a list of the RESTful web services needed to be 
developed in the core asset development phase. Then SaaS 
provider can develop services according to the list. 
This section introduces the identification method of 
RESTful web services that need to be developed from the 
OOI feature model, and the next section will introduce a case 
study using the OOI feature model and the identification 
method. 
V. CASE STUDY 
General cargo transport system domain is chosen to be 
the specific domain used to verify our method. General cargo 
transport system is a system that provides support to manage 
the business process of the enterprises running general cargo 
transport. The SaaS provider needs to provide services for 
enterprises running general cargo transport.  
A. OOI Feature Model of  General Cargo Transport 
System Domain 
Firstly, an OOI feature model of general cargo transport 
system domain will be modeled. During the process of 
modeling, there are some points need to pay attention to 
other than the constraints OOI feature model needed. The 
points are: 
- Completeness. The features need to reflect the whole 
business process, and there is no key point missed. 
- Universality. The features need to be suitable for most 
enterprises, so the enterprises of all kinds of size should be 
taken into consideration to ensure generality. 
According to all the requirements, we refer to the 
business process of relevant enterprises running general 
cargo transport of all kinds of size (e.g., large, medium, 
small), then we choose the critical and practical node and 
490
abstract them into features. Fig. 4 shows a simplified OOI 
feature model of general cargo transport system domain. 
From Fig. 4, we can see that different from traditional 
feature model, the OOI feature model separates business 
object and operation. In the figure, grey rectangle represents 
object feature and white rectangle represents operation 
feature. Dot dash line represents the relationship operated-
 by. 
B. Identifying RESTful Web Services 
When the OOI feature model is modeled, the RESTful 
web services that need to be developed in the core asset 
development phase will be identified. 
Step1: Dividing Features into Groups 
Firstly, features in the feature model will be divided into 
groups to form candidate service sets. According to the steps 
mentioned in the Chapter 3, the candidate service sets are 
acquired. Fig. 5 shows the candidate service sets. From Fig. 
5, we can see that there are four candidate service sets. 
Step2: Refining Candidate Service Set 
When we get candidate service sets, nextly the candidate 
service sets will be refined to get service sets. In the case 
study, CS1 is chosen as the candidate service sets to verify 
the refining method. 
Since there are three object features in the CS1, so the 
candidate service sets need to be refined. Then the analysis 
will be taken against each feature in the three features.  
Firstly, advance order is chosen as the key feature to 
form a new set service set 1, and then transfer has 
relationship with it, so transfer is added into the new set 
service set 1. Secondly, the parent node order of advance  
Fig. 4. A Simplified OOI Feature Model of General Cargo Transport 
System Domain 
Fig. 5. Candidate Service Sets of General Cargo Transport System 
Domain 
order has relationship with enter and audit, so enter and audit 
will be also added into the service set 1. 
In a similar way, service set 2 which key feature is 
consignment note and service set 3 which key feature is 
order will be get. But the key feature order has child features, 
so service set 3 is deleted. 
Finally, we get two refined service sets: 
service set 1 = {advance order, transfer, enter, audit},  
service set 2 = {consignment note, scan, sign for, enter, 
audit}. 
Step3: Defining RESTful Web Services 
Then RESTful web services will be identified from the 
service set. Service set 1 will be chosen as the example. 
Firstly, the three operation features in the service set 1 are 
analyzed. Enter is the add operation on the resource advance 
order, so it is defined as a RESTful web service that operated 
resource is advance order. Audit is the update operation on 
the resource status property of advance order, so it is defined 
as a RESTful web service that operated resource is the status 
property of advance order. Transfer is not one of the four 
types operations add, delete, update, get, so we analyze the 
atomic operations transfer includes, transfer operation 
includes two atomic operations get and transfer. Get is the 
get operation on the resource advance order, so it is also 
defined as the RESTful web service that operated resource is 
advance order. And transfer does not belong to four types 
operations, so treat the service providing the transfer 
function as a resource, then transfer is the get operation of 
the service resource, so it is defined as a RESTful web 
service that operated resource is transferservice. 
Table 1 shows the RESTful web services and the input 
and output parameters of the RESTful web services 
identified from CS1. 
TABLE I.  INPUT AND OUTPUT PARAMETERS OF THE RESTFUL WEB 
SERVICES IDENTIFIED FROM CANDIDATE SERVICE SET 1 
RESTful web 
service Operation 
Input 
parameters 
Output 
parameters 
AdvanceOrder Add 
date, 
consigner, 
address 
advanceOrder
 Number 
AdvanceOrder Get advanceOrderNumber advanceOrder 
AdvanceOrder/stat
 us 
Update 
date, operator, 
advanceOrder
 Number, status 
boolean 
TransferService Get advanceOrder consignmentOrder 
ConsignmentNote Add 
date, operator, 
consigner, 
address, 
consignee 
consignmentN
 oteNumber 
ConsignmentNote/
 status Update 
consignmentN
 oteNumber, 
status 
boolean 
ConsignmentNote/l
 ocation Update 
consignmentN
 oteNumber, 
location 
boolean 
Step4: Develop RESTful Web Services 
      After defining RESTful web services, we have the list of 
RESTful web services needed to be developed by the SaaS 
provider. SaaS provider can develop services according to 
491
the information provided by the list. Fig. 6 shows part of the 
wadl of the RESTful web service AdvanceOrder. 
C. Discussion 
Table 2 shows the contrast between service-oriented 
product line using OOI feature model and traditional service-
 oriented product line. The result shows that OOI feature 
model and the related service identification method can 
support the identification of RESTful web services and rapid 
development of service-oriented systems. 
Fig. 6. Wadl of the RESTful Web Service Advanceorder 
TABLE II.  CONTRAST BETWEEN SERVICE-ORIENTED PRODUCT LINE  
USING OOI FEATURE MODEL AND TRADITIONAL SERVICE-ORIENTED 
PRODUCT LINE  
Aspect 
Development method 
Service-oriented product 
line using OOI feature 
model 
Traditional service-
 oriented product line 
Feature 
model 
In addition to the elements 
traditional feature model 
has, there are new 
elements object feature, 
operation feature, 
operated-by relationship. 
Only the basic elements 
needed to represent the 
features in a specific 
domain. 
Support to 
service 
identificatio
 n 
Can support identification 
of RESTful web services 
efficiently. 
Can identify services, but 
cannot unify the 
architecture styles of 
services. 
The method 
target 
system call 
for services 
Can use a unified method 
to call for services. 
Need to use different 
methods to call for 
different types of 
services. 
 
Maintainabi
 lity 
Easy, when need to 
modify operation ,only 
modify operation feature; 
and if need to modify 
business object, just 
modify the object feature, 
and this change do not 
affect operation feature. 
Hard, especially need to 
modify business object, 
then all operation related 
to the object will need to 
re-implement. 
VI. CONCLUSION 
In this paper, we use the method for core asset 
development in the service-oriented software product line to 
develop the service set provided by SaaS providers in cloud 
computing. We proposed an OOI feature model that 
separates the business object and operation, introduced the 
meta-model and the formal expression of the OOI feature 
model. We chose RESTful web service as the service type 
for the core asset, since it is simpler to implement and use. 
Then we proposed an identification method of RESTful web 
services from the OOI feature model. Finally, we verified the 
OOI feature model and the identification method by using an 
example of general cargo transport system domain. 
The next step of work to do is to manage the RESTful 
web services identified for improving reusability and 
maintainability, and provide computer automation support 
for the identification of RESTful web services. 
ACKNOWLEDGMENT 
This research is supported by the National Natural 
Science Foundation of China under Grant No.71171132, 
61373030. 
REFERENCES 
[1] Dikaiakos M D, Katsaros D, Mehra P, et al. Cloud computing: 
Distributed Internet computing for IT and scientific research[J]. 
Internet Computing, IEEE, 2009, 13(5): 10-13. 
[2] Ghaddar A, Tamzalit D, Assaf A, et al. Variability as a service: 
outsourcing variability management in multi-tenant saas 
applications[C]//Advanced Information Systems Engineering. 
Springer Berlin Heidelberg, 2012: 175-189. 
[3] Ying G, Xiao-yan Z, Jun W, et al. Domain service acquisition and 
domain modeling based on feature model[C]//Computational Science 
and Engineering (CSE), 2011 IEEE 14th International Conference on. 
IEEE, 2011: 26-33. 
[4] Kang D,Baik D K.Bridging software product lines and service-
 oriented architectures for service identification using bpm and 
fm[C].Computer and Information Science (ICIS),2010 IEEE/ACIS 
9th International Conference on.IEEE,2010: 755-759. 
[5] Istoan P,Nain G,Perrouin G,et al.Dynamic software product lines for 
service-based systems[C].Computer and Information 
Technology,2009.CIT'09.Ninth IEEE International Conference 
on.IEEE,2009,2:193-198. 
[6] Jiang W, Lee D, Hu S. Large-Scale Longitudinal Analysis of SOAP-
 Based and RESTful Web Services[C]//Web Services (ICWS), 2012 
IEEE 19th International Conference on. IEEE, 2012: 218-225. 
[7] Belqasmi F, Singh J, Bani Melhem S Y, et al. SOAP-Based vs. 
RESTful Web Services: A Case Study for Multimedia 
Conferencing[J]. Internet Computing, IEEE, 2012, 16(4): 54-63. 
[8] Kang K C, Lee J, Donohoe P. Feature-oriented product line 
engineering[J]. Software, IEEE, 2002, 19(4): 58-65. 
[9] Lee J, Muthig D, Naab M. An approach for developing service 
oriented product lines[C]//Software Product Line Conference, 2008. 
SPLC'08. 12th International. IEEE, 2008: 275-284. 
[10] Lee J, Kotonya G. Combining service-orientation with product line 
engineering[J]. Software, IEEE, 2010, 27(3): 35-41. 
[11] Galster M, Eberlein A. Identifying Potential Core Assets in Service-
 Based Systems to Support the Transition to Service-Oriented Product 
Lines[C]//Engineering of Computer Based Systems (ECBS), 2011 
18th IEEE International Conference and Workshops on. IEEE, 2011: 
179-186. 
[12] Kang D S, Song C, Baik D K. A method of service identification for 
product line[C]//Convergence and Hybrid Information Technology, 
2008. ICCIT'08. Third International Conference on. IEEE, 2008, 2: 
1040-1045. 
 
492
