Integrating RESTful Service into BPEL Business Process 
 on Service Generation System 
Budan Wu+, Rongheng Lin, Junliang Chen 
State Key Laboratory of Networking and Switching Technology 
Beijing University of Posts and Telecommunications 
Beijing, 100876, China 
+ Corresponding author: wubudan@bupt.edu.cn 
Abstract—New value-added business, generated by Web service 
composition in BPEL, provides more powerful and flexible 
features. SOAP-based web services invoked in BPEL are heavy 
with redundant information and lower performance. RESTful 
Web service is brought forward to new value-added business as 
an alternative solution. However, it’s a big challenge to compose 
RESTful Web services with SOAP-based Web Services in SOA 
BPEL business processes. BPEL is not designed to use RESTful 
Web services because these types of services do not use WSDL to
 describe themselves. This paper proposes a novel approach for 
integrating RESTful Web services and SOAP-based Web services 
in business processes described in BPEL. The approach is applied 
to a practical multimedia conference BPEL process, and the 
experimental data show the stability of the new RESTful BPEL
 process with a higher performance.  
Keywords-Business Process; RESTful Web services; SOAP Web 
service; Service Integration 
I. INTRODUCTION
 Service composition composes fine-grained services into 
coarse-grained services which have a practical meaning on 
business. Composing multiple web services is more beneficial 
to users than a single service [1]. BPEL (Business Process 
Execution Language) is the most popular language for 
composing web services to provide enterprise business. It 
orchestrates standard SOAP web services to achieve the 
business goal. Traditional SOAP-based Web services are 
designed with a common XML-based protocol, which is 
heavier than before as a series of WS-* protocol are defined.  
This results to a mature SOAP web service technology with 
redundant information and a lower performance. 
REST (Representational State Transfer) has gained 
widespread acceptance across the Web as a simpler alternative 
to SOAP Web Services. Since it is simple to publish and use a
 RESTful Web service, more and more Web 2.0 service 
providers—including Yahoo and Google shift their interface 
design from SOAP and WSDL-based interfaces to a simpler,
 resource-oriented REST style.
 REST (Representational State Transfer) is an architectural 
style that treats the Web as a resource-centric application. 
RESTful Web services are currently perceived as a lightweight 
mean to enable point-to-point integration between service 
providers and a large number of clients [2]. It is widespread 
used for its simplicity and usability. Most Web 2.0 websites 
provide their own web services that are realized in REST 
fashion for its usability and simplicity. Programmable Web 
shows that a whopping 73 percent of APIs registered on their
 site are REST-based while only 16 percent offer SOAP. More 
and more research work compare SOAP-based web services 
with RESTful Web services. Fatna Belqasmi et.al reviews the 
state of the art of RESTful-based service provisioning in next 
generation networks. It also provides an evaluation of the 
overall suitability of RESTful web services for service 
provisioning in next generation networks and discusses 
research directions [12]. C. Pautasso et.al [13] objectify the 
WS-* vs. REST debate by giving a quantitative technical 
comparison based on architectural principles and decisions. 
They show that the two approaches differ in the number of 
architectural decisions that must be made and in the number of 
available alternatives. As the rapid development of RESTful 
Web services, SOA is evolving to embrace new ways of 
working. 
A big challenge for using RESTful Web services in SOA 
business is how to compose RESTful Web services with 
SOAP-based Web Services in SOA business processes, that is, 
how to orchestrate web services which are mixture of both 
SOAP based and RESTful services to achieve one common 
goal. BPEL (Business Process Execution Language) [3], a 
popular technology of Web services orchestration based on 
process, has its own limitation that it is not designed to use 
RESTful Web services because these types of services do not 
use WSDL (Web Service Definition Language) to describe 
themselves. There is still no standard specification to define 
business process for both RESTful Web services and 
SOAP-based Web services
 On the basis of previous work [14], we propose a new 
approach for integrating RESTful Web services and 
SOAP-based Web services in business processes described in 
BPEL. The approach uses apache extensions to wrap a WSDL 
document for a RESTful Web service in order to allow BPEL 
to invoke RESTful Web services as same as SOAP-based Web 
services. At the same time, RESTful Web services are invoked 
by sending HTTP requests instead of SOAP message. The 
innovative advantages of the proposed RESTful Web service 
integration approach are: 
 RESTful Web service can be invoked in standard 
BPEL business processes without any modification of 
BPEL elements. 
 RESTful Web services are still invoked by HTTP 
requests, in that way the simplicity and efficiency of 
using RESTful Web services are preserved in BPEL 
business processes. 
2013 IEEE 10th International Conference on Services Computing
 978-0-7695-5026-8/13 $26.00 © 2013 IEEE
 DOI 10.1109/SCC.2013.70
 527
With these advantages, the proposed approach can be 
simply used in current standard BPEL execution environment 
without any modification of BPEL specification. It has a high 
usability and operability. 
This paper is organized as follows. First in Sections 2 we 
give related work on RESTful Web services and their 
invocation in business process. In section 3 we introduce a 
novel approach for integrating RESTful web services in BPEL 
processes. In section 4 we illustrate the service generation 
system developed by us that supports the proposed approach.
 We then apply the approach to practical multimedia conference 
BPEL processes on our service generation system in section 5, 
and compare our approach with traditional approaches on 
performance through a series of tests, and present and analyze 
the experimental result. In Section 6 we draw our experiences 
and conclude the paper.  
II. RELATED WORK
 The Web Services Business Process Execution Language 
(BPEL) is the de facto standard for service-based business 
processes. It is accepted and widely used in industry. However, 
WS-BPEL process model is layered on top of the service 
model defined by WSDL 1.1 [7]. In other words, the 
WS-BPEL and the WSDL languages are tightly coupled [4]. 
Although SOAP-based Web services have a WSDL document, 
resources published by a RESTful Web service are exposed 
using a fine-grained addressing mechanism: the Uniform 
Resource Identifier [2]. The publication of WSDL 2.0, which 
was designed with RESTful Web services in mind, as a World 
Wide Web Consortium (W3C) recommendation means there is 
now a language to describe RESTful Web services [5]. But in
 fact WSDL2.0 is not widely supported at present, this situation 
enforces us to look for other approaches.  
Since traditional service composition language has so many 
problems to be solved in composing RESTful Web services, 
many research works turn to finding a new way to implement 
the composition of RESTful Web services and SOAP-based 
Web services. A new language, namely JOpera visual 
composition language, is proposed to build a composite 
application (DoodleMap) out of some well-known, public and 
currently existing RESTful service APIs in [2]. The language 
has a set of language features that are required for RESTful 
services: dynamic late binding, dynamic typing, content-type 
negotiation, state inspection, and compliance with the uniform 
interface principle.  
And in industry, WSO2 Mashup Server [15] uses Web 
services including RESTful and SOAP-based Web services as 
the mechanism for acquiring data, XML (Extensible Markup 
Language) as its central abstraction, JavaScript (with E4X 
XML extensions) for manipulating that data, and again Web 
services as the primary way to republish the new information 
stream. These languages indeed give us more choices, but the 
disadvantages are also obvious: 
 Exactly, they are not business process language and 
could not implement complicated logical control to 
describe the process. 
 They do not make for a natural programming model, 
when it comes to RESTful Web Services. 
 No standard service composition description 
specification is proposed, which brings a confused
 condition in real application. As a result, they are not 
widely used in industry. 
BPEL can be the standard way to connect and manage 
SOAP-based Web services and RESTful Web service, and it is 
easier for enterprise to accept because of it is the defacto 
standard. However, there are several challenges in invoking 
RESTful Web services by BPEL for the difference with 
traditional SOAP-based Web services, such as no service 
description document. Different approaches were proposed to 
solve these problems. 
In [4], JOpera researchers propose a lightweight BPEL 
extension to natively support the composition of RESTful Web 
services using business processes and discusses how to expose 
the execution state of a business process so that it can be 
manipulated through REST primitives in a controlled way. It 
will become much easier to invoke RESTful Web services by 
using new service invocation activities in the modified BPEL 
specification. Theoretically, it is feasible and efficient. 
However, there are no obvious signs showing that it will be put 
into practice recently. 
A framework named REST2SOAP is presented to integrate 
SOAP services and RESTful services in [6]. REST2SOAP 
leverages WADL specification, and can wrap RESTful services 
into SOAP services semi-automatically. Using REST2SOAP, 
developers can create a BPEL service that combines SOAP, 
RESTful services and user interfaces simultaneously. It solves 
the problems and challenges brought by RESTful Web services 
in service composition. On the other hand, the advantages of 
RESTful Web services, such as efficiency and ease of use, are 
also abandoned. For developers who prefer to use RESTful 
Web services, that is not a good solution. 
In [16] the author presents a hybrid orchestration approach 
that makes use of the heterogeneous nature of the services (e.g, 
SOAP services and RESTful services) for efficient 
orchestration. The proposed system contains both a BPEL 
engine and a REST orchestration engine. A big workflow is 
divided into several sub-workflows according to services they 
invoke. SOAP-based orchestration is conducted in the BPEL 
engine, and REST services are orchestrated in the REST 
orchestration engine. The whole business process is assembled 
by the invocations. It is complex to preserve two orchestration 
engines in order to execute one workflow, and the division of 
the big workflow is also time-consuming. 
III. RESTFUL WEB SERVICES FOR BPEL
 Web Services Business Process Execution Language 
Version 2.0 (WS-BPEL 2.0 for short) is defined on the basis of 
WSDL 1.1 specification. It acquires necessary information 
about services, such as input, output, and address, from WSDL 
document, which is provided by each service. A weakness of 
RESTful Web services is that no standard service description 
document is provided. Although WSDL 2.0 and WADL (Web 
Application Description Language) could be used to describe 
528
RESTful Web services, they are not popular and are not 
supported in WS-BPEL 2.0. This is the biggest challenge we 
have to overcome. 
WS-BPEL 2.0 is widely used in enterprise, so modifying it 
to fit for RESTful Web services is unfeasible. Since BPEL 
requires each invoked service have a WSDL document, one 
solution is that we let each RESTful Web service provide a
 description document in WSDL 1.1 specification. The key 
problem is how to use WSDL to describe services information 
that fully match the semantics of a “GET”, “POST”, “PUT”, or 
“DELETE” request performed on a resource URI (Uniform 
Resource Identifier). Based on previous researches and tests, 
we try to generate a WSDL 1.1 document for RESTful Web 
services in order to make the Restful Web service invocation in 
BPEL possible. 
In WSDL 2.0 specification, RESTful Web services are 
supported with the help of definition of four basic HTTP 
(Hypertext Transfer Protocol) methods. The foundation of 
WS-BPEL 2.0 is WSDL 1.1. However, descriptions for HTTP 
GET and POST are also available in WSDL 1.1 specification. 
WSDL 1.1 includes a binding for HTTP’s GET and POST 
verbs in order to describe the interaction between a Web 
Browser and a web site. This allows applications other than 
Web Browser to interact with the site [8]. As for the other two 
verbs, PUT and DELETE, they are not involved and have to be 
specially considered. Apache ODE Project [8] has 
implemented the extension of WSDL 1.1 to support RESTful 
Web services and it can be used to describe HTTP PUT and 
DELETE verbs. By using the extension, a WSDL 1.1 
document for RESTful Web services could be constructed.  
Although RESTful Web services could have WSDL 
documents as same as SOAP-based Web services, their 
invocation methods in execution are different. For traditional 
SOAP-based Web services, execution engine would send
 SOAP message which is used over any transport protocol such 
as HTTP, SMTP and so on. However, for RESTful Web 
services, it directly uses HTTP protocol for communication. 
Namely, they work on different level. 
RESTful Web Services defined four basic operations, GET, 
POST, PUT and DELETE, on resources. To generate a WSDL 
document, each verb is needed to be described even though the 
service address is the same. In another word, a RESTful Web 
service including four verbs is wrapped into four basic service 
elements described in a WSDL document as one Web service.
 Since the four verbs are not all supported in WSDL 1.1 
specification, they are divided into two groups for different 
handling.
 A. GET & POST 
Currently only GET and POST verbs are supported in web 
page forms. For GET and POST verbs of RESTful Web 
services, it can be described by WSDL 1.1 specification [8]. 
The following protocol specific information may be specified: 
 An indication that a binding uses HTTP GET or POST 
 An address for the port 
 A relative address for each operation (relative to the 
base address defined in the port) 
Following the specification, a WSDL document for GET or 
POST verb of RESTful Web services that indicates the input, 
output and address and other necessary information could be 
constructed. Figure 1. shows the finished WSDL document for 
SMS service which uses POST verb.
 Figure 1. WSDL for POST Verb 
Compares with WSDL for SOAP Web services, 
GET/POST is specified in WSDL for Restful Web services by 
the following specific elements in bold: 
<binding…> 
//a concrete protocol and data format specification 
for a particular port type. 
<http:binding verb = “GET(or POST)”/>
 <operation...> 
//the particular PortType’s specific agreements 
and data type specifications 
<http:operation location=“uri”> 
<input…> 
 mime elements 
 </input> 
<output…> 
 mime elements 
 </output> 
</operation> 
</binding> 
<service…> 
//a collection of related endpoints. 
<port…> 
// a single endpoint defined as a combination 
of a binding and a network address. 
<http:address location=“uri”/>
 </port> 
</service> 
Take the SMS RESTful service in multimedia conference 
application as an example,  
 It uses POST verb, <http:binding verb=“POST”> 
 The location attribute specifies a relative URI for the 
operation. This URI is combined with the URI 
specified in the http:address element to form the full 
URI for the HTTP request. The URI value must be a 
relative URI. 
529
 To avoid having to define a new element for every 
MIME format, the mime:content element may be used 
if there is no additional information to convey about 
the format other than its MIME type string. More 
information about MIME Binding is described in [7]. 
B. PUT & DELETE 
PUT and DELETE verbs is not considered in WSDL 1.1. 
So extensions are needed. Apache ODE which executes 
business processes written following the WS-BPEL standard 
brings four extensions to better describe RESTful Web services:
 one HTTP method per operation (instead of one per binding), a
 unique URI Template for all operations, access to HTTP 
headers, and fault support. It supports GET, POST, PUT and 
DELETE description in WSDL 1.1 Extension for REST in the 
Apache ODE 1.2 and later versions. So we could use the 
extensions to describe all verbs. But another problem is that 
how to identify these extensions that are not defined in the 
standard WSDL 1.1 specification, the execution environment 
needs to understand what they stand for. Apache ODE 1.2 and 
later versions supports BPEL execution invocation of Restful 
Web services specified in WSDL 1.1 Extension for REST. But 
for RESTful Web services that only uses GET and POST, the 
extensions are not recommended for its limitation of execution 
environment, because only in certain versions of Apache ODE, 
these extensions could be analyzed and understood, other 
BPEL execution environment versions do not support the 
extensions. So for RESTful web services that only uses GET 
and POST, we recommend to follow the method in the above 
section A, in that way, they can be invoked in any standard 
BPEL execution environment. 
Apache ODE has declared all extensions in its own 
namespace. Detailed specifications of description can be found 
at the site [9]. Figure 2 shows a WSDL document for DELETE 
verb. Obviously, the odex namespace is necessary, so the 
<odex:binding  verb=“DELETE”> can be valid. Similarity, 
“PUT” verb can also be described in the RESTful WSDL.
 Figure 2. WSDL for DELETE Verb 
C. Data 
After four basic operations are clearly described, another 
key point data which are mainly input and output information 
should be considered. RESTful Web services provide a variety 
of data format, such as xml, json and so on. The format is 
decided by developers and can be declared in the document. 
However, the BPEL execution environment which interacts 
with RESTful Web services in business process execution has 
to support and resolve the data format. 
At present, BPEL only supports WSDL1.1, in WSDL1.1 
JSON can be invalid. Users had better transfer JSON data 
format to XML or String format. 
After a WSDL document is wrapped, RESTful Web 
services could be invoked in BPEL process just as SOAP-based 
Web services. Figure 3. illustrates how to invoke RESTful Web 
services in BPEL. 
DRGN YUFN
 tgekgxg
 kpxqmg
 tgrn{
 Qrgtcvkqpu
 qra3
 qra4
 qra5
 qra6
 JVVR"Dkpfkpi
 qra3"IGV
 qra4"RQUV
 qra5"RWV
 qra6"FGNGVG
 RQUV
 RWV T
 IGV
 FGNGVG
 UQCR
 JVVR
 Figure 3. RESTful Web Services for BPEL. 
In general, it’s similar to invoke the RESTful Web Services 
with wrapped WSDL as invoking the Web Services with 
ordinary WSDL. A RESTful Web service has to be wrapped 
through a WSDL interface in order to invoke them from a 
BPEL process. The specific RESTful Web Services invoking 
procedure is as follows. First, create a BPEL project and a 
process in it. Then create a partner link to indicate the 
interaction between the BPEL process and the RESTful Web 
services. After that, choose the corresponding operation in the 
selection area. The input and output variables would also need 
you to set. In a word, use the invoke action in the BPEL 
process to invoke other Web services, and set all the options it 
need, such as partner link, partner link type, role name and so 
on. 
IV. SERVICE GENERATION SYSTEM
 The proposed approach enables the integration of RESTful 
Web services and SOAP-based Web services in BPEL. It can 
be implemented on Service Generation System (SGS for short) 
developed by us, which is designed to support service 
composition, service management and service execution. In the 
following parts of this section, we will discuss the key point for 
implementing RESTful Web services invoking by BPEL on 
SGS. 
SGS is a novel system for description, composition and 
management of various types’ services. By compositing 
services that stored in the system or created new, developers 
could develop new services quickly and efficiently to fulfill 
user requests. Then services are allowed to deploy in the 
system and finally services could receive requests and complete 
their tasks. Based on function, SGS is divided into three parts: 
530
Service Development Platform in client side, Service 
Management Platform and Service Execution Environment in 
server side, which is shown in Figure 4.   
Ugtxgt
 Ugtxkeg"Ocpcigogpv Rncvhqto
 Ugtxkeg"
 Ocpcigogpv
 WugtCeeqwpv
 Ocpcigogpv Qvjgtu
 Eqqrgtcvkqp"
 eqpvtqn
 Ugtxkeg"Fgxgnqrogpv"
 Rncvhqto
 Drgn"
 Gfkvqt
 lRFN"
 Gfkvqt
 Yqtmurceg
 Ugtxkeg"Gzgewvkqp"
 Gpxktqpogpv
 Tgvtkgxg
 Ucxg
 Wrfcvg
 Nqikp
 Fgrnq{
 Qvjgtu
 Figure 4. Service Generation System. 
A. Service Development Platform (SDP) 
SDP is designed as a rich client for its complex functions. 
Its main purpose is to provide a visual toolkit for developers to 
composite services in an efficient way. As WS-BPEL has been 
the most popular standard in practice, SDP involves a BPEL 
editor based on BPEL Designer Project [10] which allows 
developers to build processes thorough drag and drop existed
 services of different granularity. Therefore WS-BPEL mainly 
supports machine-to-machine communication without 
involving human tasks. Because of the limitation of BPEL, 
SDP also provides a jPDL editor which uses another workflow 
language to allow developers to have more solutions.  
Another important task of SDP is to communicate with 
server. It can retrieve existed services based on users’ requests 
from Service Management Platform and upload new services 
created by users. With the growing of services library, the 
chance of services discovery is much bigger. On the other hand, 
the reusability of services is also improved. SDP can send 
commands to Service Execution Environment to deploy the 
created services and run them. Except that, SDP still needs to 
provide basic user login interface. 
B. Service Management Platform (SMP) 
SMP is a common service management platform for multi 
user sharing in collaboration environment. Semantic annotation 
and classification based on ontology are used in the platform to 
provide an interface of service storage, service discovery and 
service recommendation for developers. It mainly 
communicates with Service Development Platform and 
provides services through it. In general, SMP implements three 
functions as follows: 
 Service management: to manage various types of 
services efficiently based on specific policy, such as 
classification based on ontology. A good expansibility 
is necessary to support dynamic extension of service 
types. 
 User account management: to distribute permissions of 
manipulating resources to all users based on different 
roles. Through the permission control, the security and 
stability of system is improved. 
 Cooperation control: to coordinate different users’
 action and solve conflictions during the developing 
process. Multi user development is well supported by 
the dynamic control of services. 
SMP is designed on server which results to a large service 
library among all users. At the same time, a web interface for 
administrators and web services for SDP are both provided. 
The detailed policy is discussed in [11].  
C. Service Execution Environment (SEE) 
SEE is the runtime environment for services which could 
execute processes correctly. It is designed as a container on 
server side. As the foundation of system, it needs a high 
reliability and stability to guarantee quality of services. SEE 
retrieve all necessary documents from Service Development 
Platform and deploy them into execution engine according to 
users’ commands. SEE is asked to support the explanation and 
execution of different language specification for the diversity 
of development on Service Development Platform. 
SDP, SMP and SEE are three mainly part of Service 
Generation System and they work together to provide a 
complete solution to developers from developing to executing. 
Everyone will not only be a service customer but also a service 
provider in system. And finally this would result to a high 
improvement on service development. 
D. Extensions 
RESTful Web services would be registered into SMP, 
composed with SOAP-based Web services in SDP and finally 
invoked in SEE. Different with SOAP-based services, RESTful 
Web services need an additional step to wrap a WSDL 
document for it. As a result, SDP is extended to provide a 
wizard to wrap WSDL documents semi-automatically for 
RESTful Web services. In this section, SDP is introduced with 
providing two types editors, namely BPEL editor and jPDL 
editor. However, the approach is only related with BPEL editor. 
Actually these extensions are implemented on the BPEL editor. 
RESTful Web services do not have a standard description 
specification that results to impossibility of generating WSDL 
documents automatically. Human interaction with the platform 
cannot be avoided. Users still need to tell the platform some 
basic information about services, including input, output and 
location and so on through a user-friendly wizard. Then the 
platform could complete the remaining work and generate 
WSDL documents following the specification. And after that, 
RESTful Web services could be invoked as same as 
SOAP-based Web services in the platform. Figure 5. shows the 
extended BPEL editor in Service Development Platform. 
531
Figure 5. Extended BPEL Editor in Service Development Platform  
This wizard for creating WSDL document for RESTful 
Web services is based on WSDL4, which can be used to create 
and analyze WSDL. The most important methods are: 
 Create a WSDL document 
WSDLFactory wsdlFactory = WSDLFactory.newInstance(); 
 Create the definition element 
Definition definition = wsdlFactory.newDefinition(); 
 Set the target namespace 
definition.setTargetNamespace(“tns”);
 definition.setQName(new QName(tns,tns)); 
 Add necessary namespace   
definition.addNamespace(“tns”,tns);
  Create WSDL element 
Part part1 = definition.createPart(“partName”);
 It’s the same as creating Message, Port, PortType, Input,
 Output, Binding, Operation and Service elements. 
 Add element 
message1.addPart(part1); the same as others. 
 Set the input, output and operation type  
operation.setInput(input);   
operation.setStyle(OperationType.REQUEST_RESPONSE); 
OperationType.REQUEST_RESPONSE is corresponding 
to the four message switching methods. 
 Set HTTP verb 
httpBinding.setVerb(“POST”);           
 Indicates the interface service address   
HTTPAddress httpAddress = new HTTPAddressImpl ();    
httpAddress.setLocationURI 
(“http://example.org/helloService”);   
port.addExtensibilityElement (httpAddress); 
Figure 6. and Figure 7. show the wizard’s two pages. The 
wizard collects users’ information about their services to finally 
generate the WSDL description file for RESTful web services. 
If the input and output elements are very complex, users can 
modify them in the design view of the WSDL file or edit the 
file directly.  
Figure 6. The Wiard Interface 1 
Figure 7. The Wiard Interface 2 
V. CASE STUDY
 In this section, a real multimedia conference business is 
presented as a scenario to explain our motivation and verify the 
availability and performance of the proposed approach by 
testing the conference processes that integrat both SOAP web 
services and RESTful web services. Multimedia conference 
system allows people dispersed in geography to communicate 
with each other through voice, graph and other ways as same as 
a real conference. In the process of multimedia conference, the 
first step is that conference organizer creates a conference. 
Then all participants should be invited. And before the 
conference will soon begin, a notification would be sent to each 
participant to notice them to enter the meeting room online. 
Finally, the conference begins and another process would be 
triggered to manage the conference. Figure 8. shows the sample 
process. 
532
Eqphgtgpeg"
 Etgcvkqp
 Wugt
 Kpxkvcvkqp Pqvkhkecvkqp
 Eqphgtgpeg
 Gpvgtkpi
 Qpnkpg
 Vkog"
 Vtkiigt
 Xqkeg
 Pqvkhkecvkq
 p
 UOU
 Pqvkhkecvkq
 p
 Wugt
 Xgtkhkecvkq
 p
 [gu
 Pq
 Figure 8. Business Process for Multimedia Conference 
In the notification sub-process, the system uses different
 ways to notice users based on whether they are online or not. If 
yes, a voice service provided in SOAP style would be invoked 
and if no, a SMS service provided by China Telecom in REST 
style would be invoked. This scenario obviously illustrated that 
the integration of RESTful Web services and SOAP-based 
Web services is necessary in a real business process. And 
developers use the Service Generation System (SGS), which is 
a rich development platform introduced in section IV to assist 
their work. 
In general, RESTful Web services are wrapped to provide 
WSDL documents and then they could be used to compose
 business processes in Service Development Platform (SDP). 
Finally, BPEL processes will be deployed and published to 
customers in Service Execution Environment (SEE).  
A. Functionality 
The notification sub-process of multimedia conference 
system mentioned above composes RESTful Web services 
with SOAP Web services using the proposed approach. The 
notification sub-process in BPEL consists of four web services. 
The process is deployed in ServiceMix [11], an enterprise 
service bus, with Apache ODE as the process execution engine. 
SoapUI which is the world leading Open Source Functional 
Testing Tool for Web Service Testing is used to simulate client 
to send SOAP message to start the process. Tomcat 6.0 is 
selected as the web container of web services. Through 
analyzing the runtime log information and the response 
message of process, we can verify that RESTful Web services 
are actually invoked and executed in the process. In another 
word, the proposed approach really works. 
B. Performance 
Since the approach makes it possible to invoke RESTful 
Web services in BPEL processes, we could compare processes 
that use RESTful Web services with the ones that use 
SOAP-based Web services only to find out the efficiency of the 
approach. 
Firstly, several different processes need to be created. These 
processes should complete same task with same control logic 
and same functional services except that the services are REST 
style or SOAP style. In our experiments, five processes are 
provided and each of them has different number of RESTful 
Web services. Process 1 only uses SOAP-based Web services, 
while process 2 replaces one SOAP-based Web service in 
process 1 with a RESTful Web service that has the same 
function. Process 3 replaces two SOAP-based services in 
process 2 with two RESTful Web services, each replacement 
pair has the same function, and the rest can be deduced by 
analogy. Through using different number of RESTful Web 
services in one BPEL process, we could conclude the 
improvement of performance it brings. 
After the five processes are deployed in the same Service 
Execution Environment (SEE) with ServiceMix and ODE, 
soapUI is used to simulate multi users. In our experiment, the 
response time of each process when concurrently visited by 10 
users, 50 users and 100 users are all recorded. Figure 9. shows 
the statistics data. The horizontal axis represents process 1 to 
process 5, and the vertical axis represents response time. Three 
lines with different color represent different amount of 
concurrent users. 
Figure 9. Response Time of Visiting Processes Integrating Different Number 
of RESTful serivces 
With the increasing of concurrent users, response time is 
also increased because of the limitation of resources. But there 
is a common point among three lines. Generally, the more 
RESTful Web services used in one process, the less the 
response time. The main reason is that traditional SOAP-based 
Web services are designed to send SOAP message which is an 
XML-based message based on transfer protocol, such as HTTP, 
while RESTful Web services are visited by directly HTTP 
requests. SOAP message parsing is time-consuming. For 
RESTful Web services, less transport information results to a 
higher performance. So RESTful Web services are 
recommended to be used in BPEL processes if exist. 
VI. CONCLUSION
 In this paper, a new approach for BPEL to compose 
RESTful Web services with SOAP-based Web services is 
proposed. The approach wrap a WSDL document for RESTful 
0
 200
 400
 600
 800
 1000
 1200
 1 2 3 4 5
 Ti
 m
 e
  (m
 s) 
10 users 50 users 100 users
 533
Web services in order to allow BPEL to invoke RESTful Web 
services as same as SOAP-based Web services. RESTful 
services are invoked by sending HTTP requests instead of 
SOAP message. The WSDL wrapping of RESTful service is 
offered by our service generation system (SGS), as well as the 
orchestration of the SOAP services and RESTful services. The 
generated BPEL code can be executed in any environment that 
supports standard BPEL.  
Different with JOpera work [2] and WSO2 Mashup Tool 
[15] in industry, the proposed approach uses standard business 
process language to compose SOAP and RESTful service, and 
the business process language is standard without any 
extension or modification. Only RESTful service verbs are 
wrapped as a WSDL description to enable the integration with 
SOAP Web services in BPEL. This makes the approach easy 
for developers to accept. The GET and POST verb wrapping of 
a RESTful service in standard WSDL 1.1 specification enables 
the simple and efficient RESTful service invocation by HTTP 
requests. As we know, a large proportion of the RESTful 
services only use GET and POST verbs. For PUT and
 DELETE verbs, we follow ODE WSDL 1.1 extension to 
specify and invoke the RESTful service. This is an improved 
approach different from ODE WSDL extension which uses 
WSDL 1.1 extension to specify all the four verbs of a RESTful 
service. We do not have to rely on certain versions of ODE for 
the RESTful service invocation, for RESTful services with 
GET and POST verbs only, we integrate it with SOAP services 
in BPEL in a standard way which can be executed in standard 
BPEL execution environment. 
The greatest advantage of the proposed approach is that for 
a large proportion of RESTful services with only GET and 
POST verbs, it can be simply used in current BPEL execution 
environment without any modification of BPEL specification. 
The real multimedia conference business process study verifies 
the high usability and operability of the proposed approach. 
The overhead of the approach is the translation from SOAP 
message to HTTP message for invoking a RESTful service, 
and the wrapping of the RESTful service response HTTP 
message to SOAP message for replying the BPEL invocation.  
In the future, more RESTful services should be invoked in 
real application’s BPEL process to test and enhance the 
stability of the execution of the BPEL process that integrate 
both SOAP services and RESTful services. From the testing 
experiences, we will conclude the proper kinds of services that 
are suitable for description in RESTful style and integration 
with SOAP services in BPEL.  
ACKNOWLEDGMENT
 This work is supported by the National Natural Science 
Foundation of China (Grant No. 61003067), National 973 
Programs (Grant No. 2013CB329102, 2011CB302704), and 
Key Project of National Natural Science Foundation of China 
(Grant No. 61132001).  
REFERENCES
 [1] Z. Maamar, S. Mostefaoui, and H. Yahyaoui, Toward an Agent-Based 
and Context-Oriented Approach for Web Services. Composition, IEEE 
Trans. Knowledge and Data Engineering Vol. 17, No. 5, 2005, pp. 
686-697. 
[2] Composing RESTful services with JOpera, Cesare Pautasso, in Software 
Composition, Lecture Notes in Computer Science Volume 5634, 2009, 
pp 142-159. 
[3] OASIS: Web Services Business Process Execution Language (WSBPEL) 
2.0. (2006),
 https://www.oasis-open.org/committees/tc_home.php?wg_abbrev=wsbp
 el. 
[4] Cesare Pautasso, RESTful Web service composition with BPEL for 
REST, Data & Knowledge Engineering, Vol. 68, Issue 9, September 
2009, pp. 851–866. 
[5] Describe REST Web services with WSDL 2.0, Lawrence Mandel,
 http://www.ibm.com/developerworks/webservices/library/ws-restwsdl/ 
29 May 2008. 
[6] Yu-Yen Peng, Shang-Pin Ma, Jonathan Lee, REST2SOAP: A 
framework to integrate SOAP services and RESTful services, in
 Proceedings of IEEE International Conference on Service-Oriented 
Computing and Applications, SOCA 2009,  pp. 1-4. 
[7] Web Services Description Language (WSDL) 1.1, W3C Note 15 March 
2001, Erik Christensen, Microsoft Francisco Curbera, IBM 
ResearchGreg Meredith, MicrosoftSanjiva Weerawarana, IBM 
Research. 
[8] http://ode.apache.org/wsdl-11-extensions-for-rest.html. 
[9] http://www.eclipse.org/bpel/ 
[10] Lili Fang, Budan Wu, Junliang Chen, Service Management Model Based 
on Ontology, Computer and Information Science (ICIS), 2012 
IEEE/ACIS 11th International Conference on, June 2012, pp. 438- 443,. 
[11] http://servicemix.apache.org/
 [12] F. Belqasmi, C. Fu, R. Glitho, RESTful Web Services for Service 
Provisioning in Next Generation Networks: A Survey, IEEE 
Communications Magazine, December 2011, Vol. 49, No12, pp. 66-73. 
[13] C. Pautasso, O. Zimmermann, and F. Leymann, RESTful Web Services 
vs. “Big” Web Services: Making the Right Architectural Decision, in 
Proceedings of 17th International World Wide Web Conf., Beijing, 
China, Apr. 2008,  pp. 805–14. 
[14] Budan Wu, Junliang Chen, A Semantic Extended Multi-Layer Model for 
BPEL Process Generation, Proceedings of IEEE 9th International 
Conference on Services Computing, 2012, Hawaii, U.S., pp. 696-698. 
[15] WSO2 Mashup Server, http://wso2.com/products/mashup-server/ 
[16] Kejing He, Integration and Orchestration of Heterogeneous Services, 
Joint Conferences on Pervasive Computing JCPC, 2009, Taipei, pp. 
467-470. 
534
