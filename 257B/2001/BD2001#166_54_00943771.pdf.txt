Engineering a Front-End Prototype Using Computing With Words 
In Generic BK-Product Fuzzy Relational Architectures 
Bobby C. Granville 
Department of Computer And Information Sciences, 
Florida A & M University 
Tallahassee, Florida 32307-5 100, USA 
E-mail granvill@cis.famu.edu 
Abstract-When employing fuzzy relational 
structures in the development of intelligent 
systems, a unified generic tool is needed to assist 
the designers, knowledge experts, and users in 
constructing the application’s data dictionary and 
relational structures for the observed environment 
being modeled. Such a tool must apply some form 
of “computing with wordF” to help users 
conceptualize the semantics of the fuzzy relations 
themselves. Everyday terms and those used in 
special environments form a natural means of 
conceptualizing the reasoning process of fuzzy 
analysis on fuzzy relations using words rather 
than numbers. The recognized words and terms 
allow the potential users of fuzzy systems the 
opportunity to step back and see the big-picture of 
a typical application’s overall relational structures 
and compositions. A front-end English Query 
Language (EQL) tool is specified along with the 
supporting grammar to view the emerging 
technologies employed in representing fuzzy 
relational structures and how the relational 
approach can be used for “computing with words” 
systems. Therefore, the desired logical analysis 
can be expressed using natural language queries as 
opposed to the mathematical products forms of the 
multi-valued logics used. Such a tool enables 
future researchers to facilitate rapid construction 
of new applications of fuzzy relational systems 
with ease. 
1. Introduction 
The researchers, Willis Bandler and Ladislav Kohout 
are credited for the special non-associative products 
of fuzzy relations (called BK-products in the 
literature). In BK-relational architectures, the 
problems and solutions are expressed in the form of 
fuzzy mathematical formulas or BK-products. The 
BK-products can be interpreted as sub-triungle 
(“included in”), super-triungle (“includes”), and 
square (“are exactly the same”). Such products are 
used to build architectures for fuzzy relational 
Ladislav J. Kohout 
Department of Computer Science, 
Florida State University 
Tallahassee, Florida 32306-4530, USA 
E-mail kohout@cs.fsu.edu 
computing in A I  and other applications. Their 
triangle products allow containment analysis of 
relations to be formed. Using this technique a new 
containment can be disclosed from the analysis. 
Also, the circle (at least one) product is implemented 
in BK-Product systems. An interpretation of the BK- 
product of two fuzzy relations can be represented by 
a structured query. The benefit here is that the user 
can form query analysis on fuzzy relational structures 
without any explicit knowledge of the mathematics of 
fuzzy relations. Therefore, we designed a front-end 
prototype subsystem to hide the fuzzy computations 
from the typical user. This permits users to focus on 
the sequence of analysis being performed and not 
getting bogged down in the specifics of the 
underlying fuzzy computations involved. The order 
sequence of queries is important. It directs the user’s 
analysis of the embedded cognitive structures. 
2. Computing With Words Systems 
There is a natural correspondence between (1) the 
various linguistic structures used in “computing with 
words” (CW) [l] systems, and (2) the logical 
associations that let users define the problem analysis 
using representations in fuzzy relational architectures. 
This makes it possible to use BK-product relational 
architectures as the core of a CW system. In Fuzzy 
Semiotic Representation Structures (FSRS), one puts 
fuzzy sets and relations into correspondence with 
semiotic descriptors. Fuzzy Relational Structures 
(FRS) together with Semiotic Descriptors (SD) give 
additional power to relational methods. The semiotic 
descriptors (SD) capture the denotational meaning of 
concepts in a specific application domain. Those 
objects denoted by SD are the concepts and processes 
that the computer is to emulate in a relational 
computational model. Semiotic descriptors, however, 
are also in a correspondence with words of natural 
language and those of Linguistic Statements (LS) 
qualified by words. Let us call this correspondence 
of SD with LS ‘Lexternul inguistic correspondence of 
FSRS”. This correspondence factors out a Restricted 
0-7803-7078-3/0V$l0.00 (C)u)ol JEEE. Page: 1500 
Fragment of Natural Language (RFNL) that is 
application-domain dependent. The representations 
will vary for different specialties of medicine, or for 
different branches of engineering and other scientific 
areas. The structure of Fuzzy BK-Product 
Architectures for computing with words can be 
divided into three aggregate subsystems below: 
The Front-End: a Fuzzy CW Translator. 
Architecture. 
Communication Interface. 
The Core System: BK-Product Relational 
The Back-End: An Open-Math 
The fiont-end is a generic subsystem that can be 
connected to a variety of different BK-product 
relational architectures. The front-end prototype is 
built over the hidden analytical powers of a 
Restricted Fragment of Natural Language (RFNL) 
described as an English Query Language (EQL) 
query that incorporates the canonic relational forms 
represented within Fuzzy Semiotic Relational 
Structures. Its function is to provide translation of 
the natural language statements in EQL to the canonic 
relational form represented in FSRS. 
The core system, in tum, uses the translated 
relational meta forms to evaluate relational 
computations. Also, it may prompt the front-end to 
perform the reverse translation of the computational 
results from FSRS to the structured EQL, a form 
more suitable for the user. Our design of the front- 
end explores natural affinities of restricted natural 
language input for representations of knowledge from 
a particular application domain using linguistic 
variables, hedges and linguistic predicate structures 
with the deep knowledge concerning the same 
domain expressed in the relational form. Translation 
process is done under the supervision of the user, so 
that the user can check the correctness of relational 
interpretation as well as of the re-translation from 
relational notation to EQL. The Core System design 
utilizes our experience in application of relational 
methods in various knowledge domains. The triangle 
relational products together with fast fuzzy relational 
algorithms [2], [3] were applied to various practical 
problems in a number of scientific fields. For 
example in the analysis of medical diagnosis: 
diagnostic data and patient management processes 
[4], [SI, [6] ,  medical sign and symptom comparison 
[7], [SI; information retrieval [9], [IO], [ll], 
handwriting classification, industrial engineering, 
business and other areas [ 121, [ 131. 
The back-end subsystem should incorporate an 
open-math interface necessary to exchange 
communication of fuzzy mathematical structures 
between subsystems. 
I I Um interface 
I -
F 
P - 
I 1 
i rl Maintenance - 
Application 
j designates rhe direction of clars inheritance 
Fig. 1. Basic Configuration of Front-End Prototype 
3. A Front-End Processor for Relational 
The current Front-End Translator Prototype [ 141 
gives the user forms of practical EQL queries in 
which to pose questions about the useful fuzzy 
relational computations and searches [ 15). The 
configuration of the prototype is shown in figure 1. 
In more concrete terms, the front-end subsystem can 
create the hierarchical classification of objects, and 
specify any necessary restrictions placed on the 
objects. Also, the embedded system parameters 
allow user control of the analysis sequence. This can 
be accomplished utilizing the following parameters 
and controls: 
0 choice of fuzzy relational product; circle- 
product, sub-triangle product, supper-triangle 
product, and square product ( O , q ,  b, and 0). 
0 Choice of implication implementation functions 
Choice of mean or harsh evaluation criteria. 
0 Set the a-cut level by which to establish crisp 
values 
These controls provide the means for the formulation 
and verification of syntactic and semantic restrictions. 
Syntactic restrictions include such limitations as 
Computing With Words Systems 
0-7803-7078-3/0U$10.00 (C)U)ol IEEE. Page: 1501 
permitting only the specified forms from a given list 
of English Linguistic predicates, queries, and limited 
Graphical representation forms. Semantic 
restrictions, on the other hand, refer to the 
application-specific requirements that maintain the 
relational dependency of sub-objects given by a 
preorder. Some concrete examples from specific 
applications include hierarchies and similarities of 
diseases, signs and symptoms in the medical domain 
[16]; or terms, sub-topics and retrieved documents in 
fuzzy relational information retrieval applications 
[l 13; heuristic hierarchies of term and theorems in 
resolution theorem provers [ 171; preorders and 
equivalences of cost parameters in affordability 
studies for aeronautic industry [ 1 81. 
to Install Data Dictionary for the Application 
to Translate EQL Requests 
to BacWTranslate Query Meta Formula 
to provide Help Options 
Znstall Data Dictionary: When executing the front- 
end prototype the desired application specific data 
(that determine the semiotic descriptors of the 
relevant knowledge domain) must be installed prior 
to requesting any of the other functions. An error 
will occur if no data dictionary is installed. A sample 
data dictionary is shown in Table-I. 
Translate EQL Requests: An input EQL query is 
translated from a given English query to its 
corresponding ”fuzzy product meta formula.” This 
formula represents the embedded fuzzy analysis, 
which incorporates the fuzzy product computations 
necessary to determine the answers to the query by 
responding with a yes (I) ,  no (0), or a fuzzy measure 
indicating the degree of truth found. First the 
Qparser object performs lexical and syntax analyses 
on the input EQL query. The lexical analysis verifies 
the tokens and displays any unknown tokens with an 
appropriate error message. Not only lexical analysis 
but syntax analysis is also performed. When errors 
are found, all accumulated error messages are later 
displayed. Moreover, the resulting “fuzzy product 
meta formula” is displayed for each error fkee query. 
BackYTranslation: A conversion that begins with an 
input “fuzzy product meta formula” which is 
translated to an appropriate English Query Language 
(EQL) query. This option provides researchers some 
interpretation of the special triangle products formed 
on a pair of fuzzy relational structures. 
Back/Translation attempts to match the semiotic 
descriptors, symbols, and entity names used in the 
The Main functions of the prototype are: 
fuzzy product meta formula against predefined items 
in the Data Dictionary. Any accumulated errors 
found are displayed for the user as attempts are made 
by Qparser to recover and continue the lexical and 
syntax analysis process. If there were no errors found 
then the associated English query is written using the 
stored names for the corresponding semiotic 
descriptors. 
Help Options: The user is provided information on 
the data dictionary tables, appropriate error messages 
when parsing an EQL query or bacWtranslating a 
meta-formula, and indications of current processing 
status. The help activity is supported by each of the 
objects. This gives the user context sensitive help 
explaining many problem situations. 
3.1. English Query Language Structure (EQL) 
The EQL grammar allows different queries to be 
formed. Each query can be parsed into the following 
four major phrases: 
1) header phrase 
2) antecedent phrase 
3) product phrase 
and 4) subsequent phrase. 
The header phrase is structured to allow some control 
directly from the query. The header can trigger a 
choice of a mean or harsh evaluation formula. The 
first and last relation used in the BK-product 
corresponds to the antecedent phrase and subsequent 
phrase, respectively. Also, the product phrase is a 
representation of the BK-products triangle, square, or 
circle product forms. Each of these phrases 
participates in the specification of the fuzzy relational 
analysis to be performed. For example, the sub- 
triangle product of two fuzzy relations “patients to 
signs/symptoms” and “signs/symptoms to diseases” 
produces the degree to which the product holds. For 
example the following EQL request is parsed into the 
“h, ” “ a, ” ‘ p ,  ” and “s ” phrases, respectively: 
“What is the degree to which the 
signs/symptoms for patienf Bob Smith are 
included in the signshymptoms for disease 
diabetes?” 
h-“ What is the degree to which” 
-“the s iphymptoms for patient Bob Smith” 
p-“are included in” 
s--“the sigdkymptoms for disease diabetes’’ 
3.2. Data Dictionary Structure 
Tables of special object types are needed to parse 
the EQL query and relational product meta formula. 
A sample data dictionary (see Table-I) provides 
0-7803-7078-3/0l/$10.00 (C)Uw)l IEEE. Page: 1502 
examples of the items in the collection of tables. The 
required order of items within a table or list is 
sequenced to process the longest matching word 
string first. For example, the program will attempt to 
match on the name “body system” before trying to 
match on the term “body“ in the query. 
Table-I. Sample Data Dictionary Structure 
Table of Category Primary Sets 
P Patients D Diseases 
S SigndSymptoms B Body System 
List of Primary Set Elements 
Patients Diseases 
John Harris Tuberculosis 
Judy Jones Diabetes 
Bob Smith Hypertension 
Signs/Symptoms Body Systems 
Chills nervous 
Fever respiratory 
Sore Throat circulatory 
high, 
low, 
mild, etc. 
acute, 
benign, 
chronic, etc. 
very, 
extremely, 
a little, etc. 
List of Linguistic Variables (Generic) 
List of Linguistic Variables (Specific) 
List of Linguistic Hedges (Generic) 
Category Primary Set object (CATGYPS) is the 
title or classification name for a set of relational 
elements. These elements are referred to as the 
Category Primary Element (CATGYPE) objects. 
This object forms the domain class or range class of a 
relation. Its members are the attributes on which 
relational queries can be formed and values stored. A 
number of CATGYPS objects is constructed in the 
data dictionary; one for each category or group of 
relational attributes. It contains a formal name with 
an associated semiotic descriptor, a linguistic variable 
address and a hedge list pointer. When asked, this 
object can update any of its fields; recognize its name 
or descriptor; tell other objects its name or descriptor; 
compare a given name or descriptor with its own; and 
display its information to aid the user. CATGYPE is 
the object name given to the elements or attributes of 
a relational set. These elements are the smallest items 
on which a fuzzy relation can be constructed. 
Normally EQL queries and their translated product 
meta-formulas are based on the product of the 
relational attribute shared between two elements. 
Further analysis using compositions of these binary 
products is being studied. A number of CATGYPE 
objects is constructed in the data dictionary as 
sequential lists; one for each category primary set or 
group of relational attributes. Each CATGYPE 
contains a formal name and an indicator that excludes 
or permits its use of linguistic variables. When 
asked, this object can update any of its fields; 
recognize its name; tell other objects its name 
reference; compare a given name with its own; and 
display its information to aid the user. A generic 
name object (”eTex) is used as an abstract class 
object from which its functions and data types can be 
inherited by the many objects using name structures. 
Also a generic table object (GenericTbl) is employed 
to simplify the creation of table or list structures. A 
generic data dictionary object (GenericDict) 
maintains all the generic linguistic tables and parse 
tables of reserve syntax terms or special symbols. 
The environment’s data dictionary object 
(EnvirDDict) constructs all the data dictionary tables 
with information describing the particular application 
environment in which specific analysis queries can be 
accepted and processed. First this object must be 
provided access to all the generic tables and functions 
of GenericDict. 
Dual Semiotic Descriptors are used to aid the user 
in recognizing the entities between which the 
relations are formed. A major advantage of the dual 
semiotic specification of fizzy relations is to clearly 
display a direct association of the semiotic descriptor 
to each fuzzy category involved in a relation. The 
two semiotic descriptors must correspond to the 
domain and range set names, respectively as shown in 
figure 2. The fizzy relational matrix distinctively 
indicates the degree of truth that each entity, of the 
fuzzy relation’s domain set, is related to the attributes 
of the relation’s range set. 
0-7803-7078-3/0U$10.00 (C)u)ol IEEE. Page: 1503 
~~ ~ ~ 
domain ~ /?ge 
+ 
a-relalion psymbol s-relation 
BobSmith( PS @ SD) diabetes 
w -  
I 
Fig. 2. Product of Relations (Dual Descriptors) 
3.3. Linguhtic Qualipers 
The qualifiers are evaluative terms naturally used to 
test for a specific level of fuzzy membership. A 
generic set of linguistic variables includes the 
qualifiers high, mild, and low. These can be applied 
to certain specific categories of relational entities and 
not to others. For example, the entities in the 
category signs/symptoms may have linguistic 
variables whereas the category, “body system” do not 
allow linguistic qualifiers. Therefore, linguistic 
qualifiers can be excluded from a certain category 
sets as “patients,” for instance. There is no need to 
qualify a patient. Whereas, the category set 
signskymptoms with members such as fever, 
swelling, coughing, sore throat, etc. does allow 
linguistic variables and hedge qualifiers. 
Additionally, the restriction of linguistic variables can 
be controlled by each primary element, individually. 
A linguistic hedge can be described as an adverb 
that qualifies a linguistic variable (an adjective which 
qualifies a relational entity). A generic set of 
linguistic hedges includes the qualifiers v e v  high, 
somewhat mild, and a little low. These can be 
applied to certain specific categories of relational 
entities and not to others. The qualification using 
both linguistic variables and hedges permit multiple 
linguistic compositions phrases to be formed on the 
relational entity. As new and different qualifiers are 
needed the lists of linguistic variables and hedge 
tables can be appended. 
The assignment of meaning (values) to linguistic 
elements causes the assessment of a fuzzy restriction 
on the underlying entity’s fuzzy membership value. 
Each linguistic variable is assigned an adjustment 
value to be computed against the relational entity’s 
unadjusted measurement. 
4. Conclusion 
The prototype’s purpose is to serve as a 
performance guideline of a tool shared by the user 
interface, core subsystem, and back-end knowledge 
based subsystem. Such a tool provides standard well-. 
needed translation features of word queries. The 
natural language and control properties of EQL and 
the data dictionary allow the formation of a variety of 
query compositions too numerous to list. Such 
capabilities include allowing vague measurement 
terms to be used in the query to soften or strengthen 
the truth measurement of a relational entity. The 
EQL request is translated into a meta formula which 
directs the core subsystem to perform one of the 
specific fuzzy product evaluations on the relations 
involved. Also, this analysis returns the set member 
having the highest degree of truth. 
We believe that a front-end subsystem designed for 
relational CW architectures can bring more interest to 
the area of fuzzy knowledge based systems and 
further the theoretical and practical aspects of 
artificial intelligence research. 
5. References 
L.A. Zadeh, “Fuzzy Logic = Computing With 
Words,” IEEE Transactions On Fuzzy 
Systems, Vol. 4, No. 2, May 1996. 
W. Bandler and L.J. Kohout, “Fast hzzy 
relational algorithms,” In A. Ballester, D. 
Cardlis, and E. Trillas, editors, Proc. of the 
Second Internat. Conference on Mathematics 
at the Sentice of Man, pages 123-131, Las 
Palmas, 1982. (Las Palmas, Canary Islands, 
Spain, 28 June - 3 July), Universidad 
Politechnica de las Palmas. 
W. Bandler and L.J. Kohout, “Special 
properties, closures and interiors of crisp and 
fuzzy relations,” F u z q  Sets and Systems, 
26(3):3 17-332, June 1988. 
W. Bandler and L.J. Kohout, “The use of new 
relational products in clinical modeling,” In 
B.R. Gaines, editor, General Systems 
Research: A Science, a Methodology, a 
Technology (Proc. 1979 North American 
Meeting of the Society for General Systems 
Research)., pages 240-246, Louisville KY, 
January 1979. Society for General Systems 
Research. 
W. Bandler and L.J. Kohout, “Semantics of 
implication operators and fuzzy relational 
products,” Internat. Journal of Man-Machine 
0-7803-7078-3/0v$l0.00 (C)zOOl IEEE. Page: 1504 
Studies, 12239--116, 1980. Reprinted in 
Mamdani, E.H. and Gaines, B.R. Eds. Fuzzy 
Reasoning and its Applications. Academic 
Press, London, 198 1 ,  pages 2 19-246. 
[6] W. Bandler and L.J. Kohout, “A survey of 
fuzzy relational products in their applicability 
to medicine and clinical psychology,” In L.J. 
Kohout and W. Bandler, editors, Knowledge 
Representation in Medicine and Clinical 
Behavioural Science, pages 107-- 1 18. An 
Abacus Book, Gordon and Breach Publ., 
London and New York, 1986. 
[7] B. Ben-Ahmeida, L.J. Kohout, and W. 
Bandler, “The use of fuzzy relational products 
in comparison and verification of correctness 
of knowledge structures,” In L.J. Kohout, J. 
Anderson, and W. Bandler, editors, 
Knowledge-Based Systems for Multiple 
Environments, chapter 16. Ashgate Publ. 
(Gower), Aldershot, U.K., 1992. 
[8] L.J. Kohout and M. Kallala, “The use of 
fuzzy information retrieval in knowledge- 
based management of patients’ clinical 
profiles,” In B. Bouchon and R.R. Yager, 
editors, Uncertainty in Knowledge-Based 
Systems (Lecture Notes in Computer Science 
vol. 286), pages 275-282. Springer Verlag, 
Berlin, 1987. 
E. Keravnou and L.J. Kohout, “A system for 
experimental verification of deviance of fuzzy 
connectives in information retrieval 
applications,” In A. Ballester, D. Cardh, and 
E. Trillas, editors, Proc. of the Second 
Internat. Conference on Mathematics at the 
Service of Man, pages 384--387, Las Palmas, 
1982. (Las Palmas, Canary Islands, Spain, 28 
June - 3 July), Universidad Politechnica de 
las Palmas. 
L.J. Kohout, E. Keravnou, and W. Bandler, 
“Automatic documentary information retrieval 
by means of fuzzy relational products,” In 
B.R. Gaines, L.A. Zadeh, and H. J. 
Zimmermann, editors, Fuzzy Sets in Decision 
Analysis, pages 383--404. North-Holland, 
Amsterdam, 1984. 
[ 1 1 1  L.J. Kohout and W. Bandler, “The use of 
fuzzy information retrieval techniques in 
construction of multi-centre knowledge-based 
systems,” In B. Bouchon and R.R. Yager, 
editors, Uncertainty in Knowledge-Based 
Systems (Lecture Notes in Computer Science 
[9] 
[lo] 
vol. 286), pages 257--264. Springer Verlag, 
Berlin, 1987. 
[12] L.J. Kohout, “Fuzzy decision making and its 
impact on the design of expert systems,” In 
IEE Technical Digest No. 67, London, May 
1984. IEE, IEE Colloquium on Decision 
Support Aspects of Expert Systems, 
Reprinted in: Bulletin of British Computer 
Society Specialist Group on Artificial 
Intelligence, 1984. 
L.J. Kohout and W.’ Bandler, “Relational- 
product architectures for information 
processing,” Information Science, 37:25--37, 
1985. 
[14] B.C. Granville, “An Empirical Study of a 
Query-Language Front-End Processor Using 
BK-Products for Fuzzy Relational Knowledge- 
Based Systems,” Ph.D. Dissertation, Dept. of 
Computer Science, Florida State University, 
1998. 
B. Granville and L.J. Kohout, “An intelligent 
front-end for relational decision support 
architectures based on bk-products of fuzzy 
relations,” In P.P. Wang, editor, Proc. of the 
2nd Joint Con$ on Information Sciences (Sept. 
28 - Oct. I ,  Wrightsville Beach, NC, USA), 
pages 605--608. Duke University, 1995. 
L. J. Kohout, I. Stabile, W. Bandler, and J. 
Anderson, “Clinaid: Medical knowledge- 
based system based on fuzzy relational 
structures,” In M. Cohen and D. Hudson, 
editors, Comparative Approaches in Medical 
Reasoning, pages 1-25. World Scientific, 
1995. 
L.J. Kohout and Yong-Gi Kim, “Generating 
control strategies for resolution-based theorem 
provers by means of fuzzy relational products 
and relational closures,” In B. Lowen and M. 
Roubens, editors, Fwzy Logic: State of the 
Art, pages 18 1 -- 192. Kluwer Academic, 
Boston and Dordrecht, 1993. 
E.. Kim, L.J. Kohout, B. Dubrosky, and W. 
Bandler, “Use of fuzzy relations for 
affordability decisions in high technology,” 
In R.A. Adey, G. Rzevski, and A.K. Sunol, 
editors, Applications of Artificial Intelligence 
in Engineering XI .  Computational Mechanics 
Publications, Southampton, UK - Bilerica, 
MA, USA, 1996. 
[I31 
[15] 
[16] 
[17] 
[IS] 
0-7803-7078-3/0l/$l0.00 (C)u)Ol IEEE. Page: 1505 
